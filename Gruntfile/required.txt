tfs- https://dev.azure.com/accenturecio07/myWizardSICustom_30852/_workitems/edit/138572 open in IE


[className] = condition ? isTrue : isFalse


var isDNDCOntainerHasChild = $('.parentDNDContainer').children().length > 0;
            $('.parentDNDContainer')[isDNDCOntainerHasChild != true ? 'addClass' : 'removeClass']('fixedParentDndCOntainer');


import { Component, OnInit, OnDestroy, ViewEncapsulation, Input, ViewChild, EventEmitter, Output, AfterViewChecked, HostListener, PACKAGE_ROOT_URL } from '@angular/core';
import * as d3 from 'd3';
//import * as d3 from 'd3-3.5.17';
//import * as $ from 'jquery';
declare let $: any;
import { Guid } from "guid-typescript";
import { d } from '@angular/core/src/render3';
//var document = (<any>window).document; 
//declare var d3: any;
import { RoadmapAssistantService } from '../../Services/RoadmapAssistant/roadmapassistant-service'
import { SimpleGlobal } from 'ng2-simple-global';
import { ActivatedRoute, Router, NavigationEnd, Params, RoutesRecognized } from '@angular/router';
import { NgbModal, NgbModalOptions } from '@ng-bootstrap/ng-bootstrap';
import { RoadmapSettingsMain } from '../RoadmapAssistant/roadmap-settings-main.component';
import { UUID } from 'angular2-uuid';
import { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';
import { RoadmapTemplates } from '../RoadmapAssistant/roadmap-templates-component';
import { RoadmapPromptTemplates } from '../RoadmapAssistant/roadmap-prompttemplate-component';
import { BaselineRoadmapComponent } from '../RoadmapAssistant/BaselineRoadmap.Component';
//import { BaselineRoadmapInitiativeComponent } from '../RoadmapAssistant/BaselineRoadmapInitiative.Component';
import { HeaderComponent } from '../header.component'
import { getMatIconFailedToSanitizeLiteralError } from '@angular/material';
import { LocalStorage } from '@ng-idle/core';
import { EditInitiativeComponent } from './edit-initiative.component';
//import "jquery-ui"; 
import { AddEditRelease } from './add_edit_release-component';
import * as moment from 'moment';
import { RoadmapIteration } from './add-edit-iteration-component';
import { AddEditPhase } from './add_edit_phase-component';
import { AddEditTask } from './add_edit_task-component';
import { Template } from '@angular/compiler/src/render3/r3_ast';
import { RoadmapSprint } from './add-edit-sprint-component';
import { RoadmapFunctionalArea } from './add-functionalArea-component';
import { ConfirmPromptModal } from '../../Components/Shared/confirmprompt-modal.component';
import { AddEditMilestoneComponent } from '../../Components/RoadmapAssistant/add-edit-milestone.component';
import { AddEditDependency, Dependency } from '../../Components/RoadmapAssistant/add-edit-dependency-component';
import { ScopeSelectorViewComponent } from '../Shared/scope-selector.component';
import { NgxSpinnerService } from 'ngx-spinner';

declare var LeaderLine: any;
//import '../../../Scripts/leader-line.min.js'
import * as line from 'leader-line';
declare var jspdf;
import html2canvas from 'html2canvas';

import { setTimeout } from 'timers';
import { RoadMapFilterComponent } from './RoadMapFilter.Component';
import { ProgressFilterComponent } from './ProgressFilter.Component';
import { ToastrService } from '../../Services/toastr.service';
import { Subscription } from 'rxjs';
import { MessageService } from '../../Services/message.service';
import { Constatsobject } from '../../Components/Constantsobj.components';
import { HelperService } from '../../Services/helper.service';
import { AppConfig } from '../../Components/app-config.module';

@Component({
    selector: 'app-roadmapMain',
    templateUrl: '../app/Views/RoadmapAssistant/RoadmapMain.html',
    providers: [RoadmapAssistantService, NgbActiveModal]
})

export class RoadmapMainComponent implements OnInit, OnDestroy {
    public historycolumns = false;
    subscription: Subscription;
    panelOpenState = false;
    @ViewChild(HeaderComponent) headerComp: HeaderComponent;
    @ViewChild(RoadmapSettingsMain) settingComp: RoadmapSettingsMain;
    @ViewChild(EditInitiativeComponent) edit: EditInitiativeComponent;
    @ViewChild(AddEditRelease) editRelease: AddEditRelease;
    @ViewChild(RoadmapIteration) editIteration: RoadmapIteration;
    @ViewChild(RoadmapSprint) sprintEdit: RoadmapSprint;
    @ViewChild(RoadmapFunctionalArea) functionalEdit: RoadmapFunctionalArea;
    @ViewChild(AddEditPhase) editPhase: AddEditPhase;
    @ViewChild(AddEditMilestoneComponent) editMilestone: AddEditMilestoneComponent;
    @ViewChild(AddEditDependency) editDependency: AddEditDependency;
    @ViewChild(RoadMapFilterComponent) RoadMapFilterComponent: RoadMapFilterComponent;
    @ViewChild(ProgressFilterComponent) ProgressFilterComponent: ProgressFilterComponent;
    @HostListener('document:click', ['$event'])
    documentClick(event: MouseEvent) {
        if (this.isTitleEdit == true) {
            this.CaptureTitleOnDbClick();
            this.isTitleEdit = false;
            this.execDivResize = true;
        }
        //this.execDivResize = true;
    }

    @HostListener('window:scroll', ['$event'])    
    onScrollEvent($event) {
        //console.log("scrolling");
        if ($(document).scrollTop() > 45) {
            $(".roadMapHeaderNavigationMenu").addClass("fixHeaderPos");
            $(".roadmap-zoomingContainer").addClass("fixedZoomBtnContaner");
            $(".showWorkPlanTab").addClass("fixedWorkPlanTab");
            $(".sidePanelContainer").addClass("fixedSidepanelContainer");

            var isDNDCOntainerHasChild = $('.parentDNDContainer').children().length > 0;
            $('.parentDNDContainer')[isDNDCOntainerHasChild != true ? 'addClass' : 'removeClass']('fixedParentDndCOntainer');

            if ($('.isFullscreenEnable').length > 0) {
                //add the fixed class based on the body Class
                //$('#timeline').attr('style', '');
                $('.backto_phoenix').addClass('fixedBackPhoenix');
                $('.close_fullscreen').addClass('fixedFullScreenIcon');

                //On window Scroll Timeline Fixed
                var getScroll = $(document).scrollTop();
                var setMarginToTimeline = getScroll - 20;
                $('#timeline').css({ 'margin-top': setMarginToTimeline + 'px' });

            } else {   
                //remove the fixed class based on the body Class 
                $('.backto_phoenix').removeClass('fixedBackPhoenix');
                $('.close_fullscreen').removeClass('fixedFullScreenIcon');
                //$('#div_scroll').css('margin-top', '');

                //On window Scroll Timeline Fixed
                var getScroll = $(document).scrollTop();
                var setMarginToTimeline = getScroll - 10;
                $('#timeline').css({ 'margin-top': setMarginToTimeline + 'px' });
            }

            $('.canvas').css({ 'background-color': '#f2f2f2'});
            if ($('.scope-selector-new').css('display') == 'block') {
                $('.scope-selector-new').hide();
            }

        } else {
            $(".roadMapHeaderNavigationMenu").removeClass("fixHeaderPos");
            $(".roadmap-zoomingContainer").removeClass("fixedZoomBtnContaner");
            $(".showWorkPlanTab").removeClass("fixedWorkPlanTab");
            $(".sidePanelContainer").removeClass("fixedSidepanelContainer");
            $('.parentDNDContainer').removeClass("fixedParentDndCOntainer");

            //On window Scroll Timeline Fixed
            $('#timeline').attr('style', '');
            $('.canvas').css({ 'background-color':'#fff'});
        }       

        this.DependencyFlat = this.global["DEPENDENCYFLAT"];
        if (this.DependencyFlat != undefined && this.DependencyFlat.length > 0) {
            this.ResetDependencyLine();
        }
    }

    @ViewChild(AddEditTask) editTask: AddEditTask;
    @Output() responseMessages = new EventEmitter<object>();
    @Input() FilterDisabled: RoadMapFilterComponent;
    roadMapMapping: RoadMapMapping;
    lstRoadMapMapping: Array<RoadMapMapping> = [];
    roadMap: RoadMap;
    //formatDate: any;
    timelineGridStartDate: any;
    modalOption: NgbModalOptions = {};
    SourceData: any = [];
    sourceBuilderTools: any[];
    targetBuilderTools: any[] = [];
    targetBuilderToolsCompareFirstData: any[] = [];
    targetBuilderToolsCompareSecondData: any[] = [];
    flat: any[] = [];
    flatCompareFirstData: any[] = [];
    flatCompareSecondData: any[] = [];
    inTransitTargetFlat: any[] = [];
    roadMapUUId: any;
    roadmapLength: any;
    //formattedDate: any;
    timelineGridEndDate: any;
    send_date: any;
    deliveryConstructUId: any;
    CopyVersion: any;
    isCopied: boolean = false;
    savedRoadmapSettingsData: any;
    public showHistory: boolean = false;
    isNotModified: boolean = false;
    isDeleted: boolean = false;
    isSaved: boolean = false;
    isError: boolean = false;
    successMessage: any;
    errorMessage: any;
    showEditInitiative: boolean = false;
    showEditRelease: boolean = false;
    showEditPhase: boolean = false;
    showEditTask: boolean = false;
    showBuild: boolean = true;
    showSettings: boolean = false;
    public showFilter: boolean = false;
    showEditIteration: boolean = false;
    showAddEditSprint: boolean = false;
    showEditMilestone: boolean = false;
    showEditFunctional: boolean = false;
    showEditDependency: boolean = false;
    public progressbarTab: boolean = false;
    public ForeCastTab: boolean = false;
    public progressBarFilter: boolean = false;
    public roadMapFilter: boolean = false;
    entityContainerID: any;
    HistoryData: any[] = [];
    ChangeHistory: any[] = [];
    isEdit: any = false;
    public showBaselineTab: boolean = false;
    public showBaselineInitiativeTab: boolean = false;
    public showWorkPlanTab: boolean = false;
    isNotSaved: boolean = true;
    isDisabledButton: boolean = false;
    UserRoles: any = [];
    cUser: any;
    cRole: any;
    disableTaskUIds: any = [];
    titleDetails: any;
    isTitleEdit: boolean = false;
    TemplateUId: any;
    resizingGlobalval: any;
    execDivResize: boolean = false;
    execDivResizeCompareData: boolean = false;
    displayFontSize: any = "Medium";
    historytoggle = {};
    settingsAppliedData: any;
    isEntity: any = false;
    openHistorytoggle: any = false;
    ShowHistoryComments: any = false;
    RoadMapComments: any;
    MilestoneTitle: any;
    //  DeletedArray: any = [];
    DeletedArray: any[] = [];
    titleColor: any;
    SaveWarningMessage: boolean = false;
    RoadmapWarningMessage: any;
    isCommentPopup: boolean = false;
    // titleIsChanged: any;
    titleData: any;
    entityFontSize: any;
    loggedInUserName: any;
    isWarningError: boolean = false;
    isDisabledSaveButton: any = false;
    timeLineGridWidth: any;
    MilestoneFlat: any[] = [];
    isCompare: boolean = false;
    DependencyFlat: any[] = [];
    isCompareButtonEnable: boolean = false;
    isbaselineMessage: boolean = false;
    isDependencyReset: boolean = false;
    roadMapName: any = '';
    showExport: boolean = false;
    isBaselineChecked: boolean = false;
    public ProgressBarFilteredData: any;
    hasDependecy: any = false;
    DependencyDeletedArray: any[] = [];
    public selectedFilterValues: any;
    filterAppliedData: any;
    copyAppliedData: any;
    sprintDaysDuration: any;
    sprintWeeksDuration: any;
    timelineGridStartMonth: any;
    isFilterApplied: boolean;
    showDetails: boolean = false;
    isEnabledEntity: boolean = true;
    baselineInitiativeName: any;
    baselineInitiativeUID: any;
    baselinedlevel: any;
    selectedProgressFilterValues: any = [];
    roadMapProgressData: any = [];
    routeID: any;
    timelinemonthdate: any;
    roadMapExportUIds: any[] = [];
    roadMapAssociatedDeliveryConstructId: any;
    isParentRoadmap = false;
    isAssociated = false;
    isCollapsed: boolean = false;
    constantObjValue: any = Constatsobject;
    isBaselineAutoSave: boolean = false;
    panX: any;
    zoomPercent: any = 100 + "%";
    isRoadMapLoaded: boolean = false;
    count: number = 0;
    editentity: boolean = true;
    isDisabledNewButton: boolean = false;
    backToPhoenoixValue: any;
    constructor(private roadmapAssistantService: RoadmapAssistantService, private global: SimpleGlobal, private modalService: NgbModal, private router: Router,
        private activatedRoute: ActivatedRoute, public activeModal: NgbActiveModal, private toastrService: ToastrService, private spinner: NgxSpinnerService,
        private messageService: MessageService, private helperService: HelperService) {
        this.subscription = this.messageService.getMessage().subscribe(message => {            
            if (message.text == "Access restricted") {
                this.deliveryConstructUId = undefined;
                this.ValidateSourceBuilderTools();
            }
            else {
                this.LoadRoadmapDataBasedOnScopeSelector(message.text); 
            }
        });
    }

    LoadRoadmapDataBasedOnScopeSelector(deliveryConstrucUid: string) {
        if (this.global["selectedScopeLevel"] && this.global["selectedScopeLevel"].length > 0) {
            this.isDisabledNewButton = false;
            this.global["ROADMAPSETTINGSFLAT"] = null;
            this.deliveryConstructUId = deliveryConstrucUid;
            this.GetRoadMapCount(deliveryConstrucUid);
        }
    }
   
    ngOnDestroy() {
        // unsubscribe to ensure no memory leaks
        this.subscription.unsubscribe();
    }

    ngOnInit() {
        this.timeLineGridWidth = $(".builder-container").width();
        this.loggedInUserName = this.global["LoggedInUserName"];
        this.showSettings = true;
        this.progressbarTab = false;
        this.ForeCastTab = false;
        this.backToPhoenoixValue = AppConfig.settings.apiDetails.backToPhoenix;
        $("#noncomparediv").css("display", "block");
        setTimeout(function () {
            $("#timeline").find(".axis:first .tick line").attr({ "y2": "24", "y1": "-4" });
        }, 1000);
        //this.setHeightSettingTab();
        this.global["ISROADMAPBUILT"] = false;
        this.global["ISCOPIED"] = false;
        this.panX = 1;
        //this.activatedRoute.queryParams.subscribe(params => {
        //    let pageNameparams = params['page'];
        //    console.log(pageNameparams);
        //});
        if (this.deliveryConstructUId == "" || this.deliveryConstructUId == undefined || this.deliveryConstructUId == '') {
            this.isDisabledButton = true;
            this.isDisabledNewButton=true;
        }
        this.activatedRoute.params.subscribe((routeParams: Params) => {
            //let pageNameparams = routeParams['page'];
            //if (pageNameparams !== undefined) {
            //    this.ShowPages(pageNameparams);
            //}           
            if (routeParams['DeliveryConstruct'] != null) {
                this.deliveryConstructUId = routeParams['DeliveryConstruct'];
            } else if (this.global['DeliveryConstructUId'] != null && this.global['DeliveryConstructUId'] != undefined && 
                this.global['DeliveryConstructUId'] != '00000000-0000-0000-0000-000000000000' ) {
                this.deliveryConstructUId = this.global['DeliveryConstructUId'];
            }
            if (routeParams['Roadmap'] != null) {
                this.roadMapUUId = routeParams['Roadmap'];
                this.global["ROADMAPUID"] = this.roadMapUUId;
                this.isEdit = true;
                this.global["ACTIONTYPE"] = "Modified";
                this.isCompareButtonEnable = true;
            }
            //else if (this.global["ROADMAPUID"] != null && this.global["ROADMAPUID"] != undefined && routeParams['Template'] != null) {
            //    this.roadMapUUId = this.global["ROADMAPUID"];
            //}
            else {
                this.global["ACTIONTYPE"] = "Added";
            }

            if (routeParams['Template'] != null) {
                this.TemplateUId = routeParams['Template'];
            }

            if (routeParams['Compare'] != null) {
                this.isCompare = routeParams['Compare'];
            }

            this.SaveWarningMessage = false;
            this.isbaselineMessage = false;
            this.baselinedlevel = "";


        });
        //$("#rect1").mousemove(function (event) {
        //    var pageCoords = "( " + event.pageX + ", " + event.pageY + " )";
        //    var clientCoords = "( " + event.clientX + ", " + event.clientY + " )";
        //    console.log(pageCoords);
        //    console.log(clientCoords);
        //});

        if (this.TemplateUId == undefined) {
            this.spinner.show();
        }


        var response1 =
            [
                { Name: "Koushik", Role: "DeliveryManager" },
                { Name: "Sangeetha", Role: "DeliveryManager" },
                { Name: "Arun", Role: "Manager" },
                { Name: "Pratap", Role: "Manager" },
                { Name: "Siva", Role: "Lead" },
                { Name: "Manoj", Role: "Lead" },
            ];
        response1.forEach(i => {
            this.UserRoles.push(
                {
                    "Name": i.Name,
                    "Role": i.Role,
                });
        });
        this.global["CURRENTUSER"] = this.UserRoles[0].Name;
        this.global["CURRENTUSERROLE"] = this.UserRoles[0].Role;
        this.cUser = this.global["CURRENTUSER"];
        this.cRole = this.global["CURRENTUSERROLE"];
        this.global["isUnSavedData"] = false;
        this.SetSourceData(this.cUser, this.cRole);
        //this.deliveryConstructUId = "22000000-0000-0000-0000-000000000000";
        this.deliveryConstructUId = this.global['DeliveryConstructUId'];

        //To check delivery construct UId to 6d9c5218-5688-e811-a9ca-00155da6d537 in SourceData and remove dependency entity.
        //if (this.deliveryConstructUId != "6d9c5218-5688-e811-a9ca-00155da6d537") {
        //    let removedSourceData = [];
        //    let tempSourceData = [];
        //    tempSourceData = this.sourceBuilderTools.slice(0);
        //    tempSourceData.forEach(function iter(item) {
        //        if (item.Title == 'Add Dependency') {
        //            item.Display = false;
        //            removedSourceData.push(item);
        //        }
        //    });

        //    if (this.sourceBuilderTools.filter(a => a.Display == false).length > 0) {
        //        let filterArray = this.sourceBuilderTools.filter(a => a.Display != false);
        //        this.sourceBuilderTools = filterArray;
        //    }
        //}


        if (this.roadMapUUId != "" && this.roadMapUUId != null) {
            this.LoadRoadmap(this.deliveryConstructUId, this.roadMapUUId, null);
            this.isDisabledButton = false;
            this.isDisabledNewButton = false;
        }
        else if (this.isCompare) {
            this.showBuild = false;
            this.isCompareButtonEnable = true;
            this.LoadCompareRoadmaps();
        } else {
            this.LoadRoadmapDataBasedOnScopeSelector(this.deliveryConstructUId);
        }

        if (this.TemplateUId != "" && this.TemplateUId != null) {
            this.NewRoadmapClick();
        }
        if (this.flat != undefined && this.flat.length > 0)
            $("#hiddentasks").val(JSON.stringify(this.flat));

        this.rendertimeline();
        //if (this.roadMapUUId != "" && this.roadMapUUId != null) {
        //    this.GetHistoryData(this.roadMapUUId);
        //}
        this.execDivResize = true;
        $('.ngx-dnd-container.gu-empty').css('height', '300px!important');
        //localStorage.setItem('flatJSONData', JSON.stringify(null));
        this.ValidateSourceBuilderTools();
        setTimeout(() => {
            $('.root-container > .ngx-dnd-container:first-child').addClass("parentDNDContainer");
        }, 50)

        if (this.TemplateUId == undefined) {
            setTimeout(() => {
                this.spinner.hide();
            }, 1000);
        }

        if ($('header-component').hasClass("fullscreen_applied")) {
            $("#contentToConvert").addClass("fullscreen_active");
            $('.exit_fullscreen').css("display", "block");
        }
        else {
            $('.exit_fullscreen').css("display", "none");
        }
        this.setDynamicTimelineheight();
        this.GetReleaseMethodologiesData();
    }

    NavigateToMainPage() {
        this.progressbarTab = false;
        this.ForeCastTab = false;
        this.activatedRoute.params.subscribe((routeParams: Params) => {
            if (routeParams['id'] != null) {
                this.routeID = routeParams['id'];
            }
        });
        var milestoneFlagElements = $('.flag-on-main-scr');
        for (var i = 0; i < milestoneFlagElements.length; i++) {
            if (this.MilestoneFlat != undefined && this.MilestoneFlat.length > 0) {
                var MilestoneOnMainScr = this.MilestoneFlat.filter(x => x.TaskUId == milestoneFlagElements[i].id.split("_")[1] && x.ActionType != "Deleted");
                if (MilestoneOnMainScr.length > 0) {
                    var value = milestoneFlagElements[i].attributes.style.value;
                    value = value + 'visibility : visible;';
                    milestoneFlagElements[i].attributes.style.value = value;
                }
            }
        }
        $("#noncomparediv").css("display", "block");

        this.roadMapUUId = this.global["ROADMAPUID"];
        var routenewID = this.routeID == 1 ? 2 : 1;
        this.router.navigate(['/DeliveryConstruct', this.deliveryConstructUId, 'Roadmap', this.roadMapUUId, 'ID', routenewID, 'RoadmapAssistant']);
        this.rendertimeline();
        //this.DivRezise();
        this.execDivResize = true;
    }
    public ngAfterViewChecked(): void {
        if (this.execDivResize) {
            this.DivRezise();
        }
        if (this.execDivResizeCompareData) {
            this.DivReziseCompareFirstData();
            this.DivReziseCompareSecondData();
        }
    }

    public ngAfterViewInit(): void {
        $('.settings').hide();
    }
    //setHeightSettingTab() {
    //    var getHeaderHight = $('.header').height() + $('.roadMapHeaderNavigationMenu').height();
    //    var calculatedSidePanelheight = $(window).height() - getHeaderHight;
    //    $('.settingContent').css('height', (calculatedSidePanelheight - 150) + 'px');

    //    //var getHeaderHight = $('.header').height() + $('.header-sub-sec').height() + $('.roadMapHeaderNavigationMenu').height();
    //    //var tabHeight = $('.tab-content').height();
    //    //var calculatedSidePanelheight = $(window).height() - getHeaderHight;
    //    //$('.sidePanelContainer').css('height', (calculatedSidePanelheight - 200) + 'px');
    //}

    // setEditHeight() {
    //    var getHeaderHight = $('.header').height() + $('.header-sub-sec').height() + $('.roadMapHeaderNavigationMenu').height();
    //    var tabHeight = $('.tab-content').height();
    //    var calculatedSidePanelheight = $(window).height() - getHeaderHight;
    //       $('.editContent').css('height', (calculatedSidePanelheight - 200) + 'px');
    //    //if ($('.settingContent').height()>)
    //}

    SetSourceData(currentUser: any, currentRole: any) {
        switch (currentRole) {
            case "DeliveryManager": {
                this.SourceData = [
                    {
                        //TaskUId: 'AB941243-0080-42B1-BF0F-AB4EDEDFEB17',
                        "RoadMapTaskId": 1,
                        "ParentTaskUId": -1,
                        "Title": "Add Initiative",
                        "TaskType": "Initiative",
                        "InputType": "section",
                        "Icon": "far fa-square",
                        "BarColor": "#286e99",
                        "PlannedEfforts": undefined,
                        //"PlannedStart": new Date("02-01-2019"),
                        //"PlannedFinish": new Date("05-30-2019"),
                        "Levels": 0,
                        "OutlineNumber": 0,
                        "IsEnabled": true,
                        //index: '1',
                        "DeliveryConstructUId": "22000000-0000-0000-0000-000000000000",
                        "PositionSettings": 0,
                        //"DeliveryConstructUId": this.global['DeliveryConstructUId']
                        "Display": true,
                        "BaselinedatInitlevel": false

                    },
                    {
                        //TaskUId: '6B9808C8-C694-4023-A575-611F8F02AA01',
                        "RoadMapTaskId": 2,
                        "ParentTaskUId": -1,
                        "Title": "Add Release",
                        "TaskType": "Release",
                        "InputType": "section",
                        "Icon": "far fa-square",
                        "BarColor": "#3e8db3",
                        //"PlannedStart": new Date("03-15-2019"),
                        //"PlannedFinish": new Date("04-28-2019"),
                        "PlannedEfforts": undefined,
                        "Levels": 1,
                        "OutlineNumber": 0,
                        "IsEnabled": true,
                        //index: '2',
                        "DeliveryConstructUId": "22000000-0000-0000-0000-000000000000",
                        "PositionSettings": 0,
                        "Display": true,
                        "BaselinedatInitlevel": false

                        //"DeliveryConstructUId": this.global['DeliveryConstructUId']

                    },
                    {
                        //TaskUId: 'B9807118-0ABC-483E-A8D7-AB9026387A3D',
                        "RoadMapTaskId": 3,
                        "ParentTaskUId": -1,
                        "Title": "Add Iteration",
                        "TaskType": "Iteration",
                        "InputType": "section",
                        "Icon": "fas fa - language",
                        "BarColor": "#10add3",
                        //"PlannedStart": new Date("06-05-2019"),
                        //"PlannedFinish": new Date("07-15-2019"),
                        "PlannedEfforts": undefined,
                        "Levels": 2,
                        "OutlineNumber": 0,
                        "IsEnabled": true,
                        //index: '3',
                        "DeliveryConstructUId": "22000000-0000-0000-0000-000000000000",
                        "PositionSettings": 0,
                        "Display": true,
                        "BaselinedatInitlevel": false

                        //"DeliveryConstructUId": this.global['DeliveryConstructUId']

                    },
                    {
                        //TaskUId: 'B9807118-0ABC-483E-A8D7-AB9026387A3D',
                        "RoadMapTaskId": 4,
                        "ParentTaskUId": -1,
                        "Title": "Add Phase",
                        "TaskType": "Phase",
                        "InputType": "section",
                        "Icon": "fas fa - language",
                        "BarColor": "#0484AE",
                        //"PlannedStart": "02/01/2019 00:00:00.0000000",
                        //"PlannedFinish": "05/02/2019 08:00:00.0000000",
                        "PlannedEfforts": undefined,
                        "Levels": 2,
                        "OutlineNumber": 0,
                        "IsEnabled": true,
                        //index: '3',
                        "DeliveryConstructUId": "22000000-0000-0000-0000-000000000000",
                        "PositionSettings": 0,
                        "Display": true,
                        "BaselinedatInitlevel": false
                        //"DeliveryConstructUId": this.global['DeliveryConstructUId']
                    },
                    {
                        //TaskUId: 'B9807118-0ABC-483E-A8D7-AB9026387A3D',
                        "RoadMapTaskId": 5,
                        "ParentTaskUId": -1,
                        "Title": "Add Functional Area",
                        "TaskType": "FunctionalArea",
                        "InputType": "section",
                        "Icon": "fas fa - language",
                        "BarColor": "#0484AE",
                        //"PlannedStart": "22/01/2019 00:00:00.0000000",
                        //"PlannedFinish": "22/02/2019 08:00:00.0000000",
                        "PlannedEfforts": undefined,
                        "Levels": 2,
                        "OutlineNumber": 0,
                        "IsEnabled": true,
                        //index: '3',
                        "DeliveryConstructUId": "22000000-0000-0000-0000-000000000000",
                        "PositionSettings": 0,
                        "Display": true,
                        "BaselinedatInitlevel": false

                        //"DeliveryConstructUId": this.global['DeliveryConstructUId']

                    },
                    {
                        //TaskUId: 'B9807118-0ABC-483E-A8D7-AB9026387A3D',
                        "RoadMapTaskId": 6,
                        "ParentTaskUId": -1,
                        "Title": "Add Activity",
                        "TaskType": "Task",
                        "InputType": "section",
                        "Icon": "fas fa - language",
                        "BarColor": "#0484AE",
                        //"PlannedStart": "02/01/2019 00:00:00.0000000",
                        //"PlannedFinish": "05/02/2019 08:00:00.0000000",
                        "PlannedEfforts": undefined,
                        "Levels": 2,
                        "OutlineNumber": 0,
                        "IsEnabled": true,
                        //index: '3',
                        "DeliveryConstructUId": "22000000-0000-0000-0000-000000000000",
                        "PositionSettings": 0,
                        "Display": true,
                        "BaselinedatInitlevel": false

                        // "DeliveryConstructUId": this.global['DeliveryConstructUId']

                    },
                    {
                        //TaskUId: 'B9807118-0ABC-483E-A8D7-AB9026387A3D',
                        "RoadMapTaskId": 7,
                        "ParentTaskUId": -1,
                        "Title": "Add Sprint",
                        "TaskType": "Sprint/Iteration",
                        "InputType": "section",
                        "Icon": "fas fa - language",
                        "BarColor": "#69BEE3",
                        //"PlannedStart": "22/01/2019 00:00:00.0000000",
                        //"PlannedFinish": "22/02/2019 08:00:00.0000000",
                        "PlannedEfforts": undefined,
                        "Levels": 2,
                        "OutlineNumber": 0,
                        "IsEnabled": true,
                        //index: '3',
                        "DeliveryConstructUId": "22000000-0000-0000-0000-000000000000",
                        "PositionSettings": 0,
                        "Display": true,
                        "BaselinedatInitlevel": false

                        // "DeliveryConstructUId": this.global['DeliveryConstructUId']

                    },
                    {
                        //TaskUId: 'B9807118-0ABC-483E-A8D7-AB9026387A3D',
                        "RoadMapTaskId": 8,
                        "ParentTaskUId": -1,
                        "Title": "Add Milestone",
                        "TaskType": "Milestone",
                        "InputType": "string",
                        "Icon": "fas fa - language",
                        "BarColor": "#002E42",
                        //"PlannedStart": "22/01/2019 00:00:00.0000000",
                        //"PlannedFinish": "22/02/2019 08:00:00.0000000",
                        "Levels": 2,
                        "OutlineNumber": 0,
                        "IsEnabled": true,
                        //index: '3',
                        "DeliveryConstructUId": "22000000-0000-0000-0000-000000000000",
                        "PositionSettings": 0,
                        "Display": true,
                        "BaselinedatInitlevel": false

                        //"DeliveryConstructUId": this.global['DeliveryConstructUId']

                    },
                    {
                        //TaskUId: 'B9807118-0ABC-483E-A8D7-AB9026387A3D',
                        "RoadMapTaskId": 9,
                        "ParentTaskUId": -1,
                        "Title": "Add Dependency",
                        "TaskType": "Dependency",
                        "InputType": "string",
                        "Icon": "fas fa - language",
                        "BarColor": "#3e8db3",
                        //"PlannedStart": "22/01/2019 00:00:00.0000000",
                        //"PlannedFinish": "22/02/2019 08:00:00.0000000",
                        "Levels": 2,
                        "OutlineNumber": 0,
                        "IsEnabled": false,
                        //index: '3',
                        "DeliveryConstructUId": "22000000-0000-0000-0000-000000000000",
                        "PositionSettings": 0,
                        "Display": true,
                        "BaselinedatInitlevel": false

                        //"DeliveryConstructUId": this.global['DeliveryConstructUId']
                    }
                ]
                break;
            }
            case "Manager": {
                this.SourceData = [

                    {
                        //TaskUId: '6B9808C8-C694-4023-A575-611F8F02AA01',
                        "RoadMapTaskId": 2,
                        "ParentTaskUId": -1,
                        "Title": "Add Release",
                        "InputType": "section",
                        "Icon": "far fa-square",
                        "BarColor": "#3e8db3",
                        "PlannedStart": new Date("03-15-2019"),
                        "PlannedFinish": new Date("04-28-2019"),
                        "PlannedEfforts": undefined,
                        "Levels": 1,
                        "OutlineNumber": 0,
                        "IsEnabled": true,
                        //index: '2',
                        "DeliveryConstructUId": "22000000-0000-0000-0000-000000000000"
                        //"DeliveryConstructUId": this.global['DeliveryConstructUId']

                    },
                    {
                        //TaskUId: 'B9807118-0ABC-483E-A8D7-AB9026387A3D',
                        "RoadMapTaskId": 3,
                        "ParentTaskUId": -1,
                        "Title": "Add Iteration",
                        "InputType": "string",
                        "Icon": "fas fa - language",
                        "BarColor": "#10add3",
                        "PlannedStart": new Date("06-05-2019"),
                        "PlannedFinish": new Date("07-15-2019"),
                        "PlannedEfforts": undefined,
                        "Levels": 2,
                        "OutlineNumber": 0,
                        "IsEnabled": true,
                        //index: '3',
                        "DeliveryConstructUId": "22000000-0000-0000-0000-000000000000"
                        //"DeliveryConstructUId": this.global['DeliveryConstructUId']

                    },
                    {
                        //TaskUId: 'B9807118-0ABC-483E-A8D7-AB9026387A3D',
                        "RoadMapTaskId": 4,
                        "ParentTaskUId": -1,
                        "Title": "Add Phase",
                        "InputType": "string",
                        "Icon": "fas fa - language",
                        "BarColor": "#0484AE",
                        "PlannedStart": "02/01/2019 00:00:00.0000000",
                        "PlannedFinish": "05/02/2019 08:00:00.0000000",
                        "PlannedEfforts": undefined,
                        "Levels": 2,
                        "OutlineNumber": 0,
                        "IsEnabled": true,
                        //index: '3',
                        "DeliveryConstructUId": "22000000-0000-0000-0000-000000000000"
                        //"DeliveryConstructUId": this.global['DeliveryConstructUId']

                    },
                    {
                        //TaskUId: 'B9807118-0ABC-483E-A8D7-AB9026387A3D',
                        "RoadMapTaskId": 5,
                        "ParentTaskUId": -1,
                        "Title": "Add Functional Area",
                        "InputType": "section",
                        "Icon": "fas fa - language",
                        "BarColor": "#0484AE",
                        "PlannedStart": "22/01/2019 00:00:00.0000000",
                        "PlannedFinish": "22/02/2019 08:00:00.0000000",
                        "PlannedEfforts": undefined,
                        "Levels": 2,
                        "OutlineNumber": 0,
                        "IsEnabled": true,
                        //index: '3',
                        "DeliveryConstructUId": "22000000-0000-0000-0000-000000000000"
                        // "DeliveryConstructUId": this.global['DeliveryConstructUId']

                    },
                    {
                        //TaskUId: 'B9807118-0ABC-483E-A8D7-AB9026387A3D',
                        "RoadMapTaskId": 6,
                        "ParentTaskUId": -1,
                        "Title": "Add Activity",
                        "InputType": "section",
                        "Icon": "fas fa - language",
                        "BarColor": "#0484AE",
                        "PlannedStart": "02/01/2019 00:00:00.0000000",
                        "PlannedFinish": "05/02/2019 08:00:00.0000000",
                        "PlannedEfforts": undefined,
                        "Levels": 2,
                        "OutlineNumber": 0,
                        "IsEnabled": true,
                        //index: '3',
                        "DeliveryConstructUId": "22000000-0000-0000-0000-000000000000"
                        // "DeliveryConstructUId": this.global['DeliveryConstructUId']

                    },
                    {
                        //TaskUId: 'B9807118-0ABC-483E-A8D7-AB9026387A3D',
                        "RoadMapTaskId": 7,
                        "ParentTaskUId": -1,
                        "Title": "Add Sprint/ Iteration",
                        "InputType": "string",
                        "Icon": "fas fa - language",
                        "BarColor": "#69BEE3",
                        "PlannedStart": "22/01/2019 00:00:00.0000000",
                        "PlannedFinish": "22/02/2019 08:00:00.0000000",
                        "PlannedEfforts": undefined,
                        "Levels": 2,
                        "OutlineNumber": 0,
                        "IsEnabled": true,
                        //index: '3',
                        "DeliveryConstructUId": "22000000-0000-0000-0000-000000000000"
                        // "DeliveryConstructUId": this.global['DeliveryConstructUId']

                    },
                    {
                        //TaskUId: 'B9807118-0ABC-483E-A8D7-AB9026387A3D',
                        "RoadMapTaskId": 8,
                        "ParentTaskUId": -1,
                        "Title": "Add Milestone",
                        "InputType": "string",
                        "Icon": "fas fa - language",
                        "BarColor": "#002E42",
                        "PlannedStart": "22/01/2019 00:00:00.0000000",
                        "PlannedFinish": "22/02/2019 08:00:00.0000000",
                        "Levels": 2,
                        "OutlineNumber": 0,
                        "IsEnabled": true,
                        //index: '3',
                        "DeliveryConstructUId": "22000000-0000-0000-0000-000000000000"
                        //"DeliveryConstructUId": this.global['DeliveryConstructUId']

                    }
                ]
                break;
            }
            case "Lead": {
                this.SourceData = [

                    {
                        //TaskUId: 'B9807118-0ABC-483E-A8D7-AB9026387A3D',
                        "RoadMapTaskId": 3,
                        "ParentTaskUId": -1,
                        "Title": "Add Iteration",
                        "InputType": "string",
                        "Icon": "fas fa - language",
                        "BarColor": "#10add3",
                        "PlannedStart": new Date("06-05-2019"),
                        "PlannedFinish": new Date("07-15-2019"),
                        "PlannedEfforts": undefined,
                        "Levels": 2,
                        "OutlineNumber": 0,
                        "IsEnabled": true,
                        //index: '3',
                        "DeliveryConstructUId": "22000000-0000-0000-0000-000000000000"
                        // "DeliveryConstructUId": this.global['DeliveryConstructUId']

                    },
                    {
                        //TaskUId: 'B9807118-0ABC-483E-A8D7-AB9026387A3D',
                        "RoadMapTaskId": 4,
                        "ParentTaskUId": -1,
                        "Title": "Add Phase",
                        "InputType": "string",
                        "Icon": "fas fa - language",
                        "BarColor": "#0484AE",
                        "PlannedStart": "02/01/2019 00:00:00.0000000",
                        "PlannedFinish": "05/02/2019 08:00:00.0000000",
                        "PlannedEfforts": undefined,
                        "Levels": 2,
                        "OutlineNumber": 0,
                        "IsEnabled": true,
                        //index: '3',
                        "DeliveryConstructUId": "22000000-0000-0000-0000-000000000000"
                        // "DeliveryConstructUId": this.global['DeliveryConstructUId']

                    },
                    {
                        //TaskUId: 'B9807118-0ABC-483E-A8D7-AB9026387A3D',
                        "RoadMapTaskId": 5,
                        "ParentTaskUId": -1,
                        "Title": "Add Functional Area",
                        "InputType": "section",
                        "Icon": "fas fa - language",
                        "BarColor": "#0484AE",
                        "PlannedStart": "22/01/2019 00:00:00.0000000",
                        "PlannedFinish": "22/02/2019 08:00:00.0000000",
                        "PlannedEfforts": undefined,
                        "Levels": 2,
                        "OutlineNumber": 0,
                        "IsEnabled": true,
                        //index: '3',
                        "DeliveryConstructUId": "22000000-0000-0000-0000-000000000000"
                        //"DeliveryConstructUId": this.global['DeliveryConstructUId']

                    },
                    {
                        //TaskUId: 'B9807118-0ABC-483E-A8D7-AB9026387A3D',
                        "RoadMapTaskId": 6,
                        "ParentTaskUId": -1,
                        "Title": "Add Activity",
                        "InputType": "section",
                        "Icon": "fas fa - language",
                        "BarColor": "#0484AE",
                        "PlannedStart": "02/01/2019 00:00:00.0000000",
                        "PlannedFinish": "05/02/2019 08:00:00.0000000",
                        "PlannedEfforts": undefined,
                        "Levels": 2,
                        "OutlineNumber": 0,
                        "IsEnabled": true,
                        //index: '3',
                        "DeliveryConstructUId": "22000000-0000-0000-0000-000000000000"
                        //"DeliveryConstructUId": this.global['DeliveryConstructUId']

                    },
                    {
                        //TaskUId: 'B9807118-0ABC-483E-A8D7-AB9026387A3D',
                        "RoadMapTaskId": 7,
                        "ParentTaskUId": -1,
                        "Title": "Add Sprint/ Iteration",
                        "InputType": "string",
                        "Icon": "fas fa - language",
                        "BarColor": "#69BEE3",
                        "PlannedStart": "22/01/2019 00:00:00.0000000",
                        "PlannedFinish": "22/02/2019 08:00:00.0000000",
                        "PlannedEfforts": undefined,
                        "Levels": 2,
                        "OutlineNumber": 0,
                        "IsEnabled": true,
                        //index: '3',
                        "DeliveryConstructUId": "22000000-0000-0000-0000-000000000000"
                        // "DeliveryConstructUId": this.global['DeliveryConstructUId']

                    },
                    {
                        //TaskUId: 'B9807118-0ABC-483E-A8D7-AB9026387A3D',
                        "RoadMapTaskId": 8,
                        "ParentTaskUId": -1,
                        "Title": "Add Milestone",
                        "InputType": "string",
                        "Icon": "fas fa - language",
                        "BarColor": "#002E42",
                        "PlannedStart": "22/01/2019 00:00:00.0000000",
                        "PlannedFinish": "22/02/2019 08:00:00.0000000",
                        "Levels": 2,
                        "OutlineNumber": 0,
                        "IsEnabled": true,
                        //index: '3',
                        "DeliveryConstructUId": "22000000-0000-0000-0000-000000000000"
                        // "DeliveryConstructUId": this.global['DeliveryConstructUId']

                    }
                ]
                break;
            }
        }
        this.sourceBuilderTools = this.getHierarchical(this.SourceData, -1);
    }

    GetHistoryData(roadMapUId: any) {
        var _this = this;
        var i;
        this.roadmapAssistantService.GetRoadmapHistoryData(roadMapUId).subscribe((response) => {
            if (response != null) {
                if (response.length >= 0) {
                    if (response != null || response != "null") {
                        _this.HistoryData = response;
                        //for (i = 0; i < this.HistoryData.length; i++) {
                        //    _this.ChangeHistory[i] = this.HistoryData[i].ChangeHistory.split(",");
                        //}
                    }
                    // console.log(response);
                }
            }
        });
    }
    BaselineProgressClick(isBaselineChecked) {

        this.isBaselineChecked = !isBaselineChecked;
        var showBaseLineBarsFlag = this.roadmapAssistantService.getShowBaseLineBarsFlag();
        if (this.isBaselineChecked || showBaseLineBarsFlag) {
            this.roadmapAssistantService.setShowBaseLineBarsFlag(false);
            var elements = $('.phaseBaselineBar');
            for (var i = 0; i < elements.length; i++) {
                var style = elements[i].parentElement.attributes.style.value;

                var arr = style.split(';');
                if (arr[arr.length - 1] == 'display: none !important') {
                    delete arr[arr.length - 1];
                }
                style = arr.join(';');
                style = style + 'display: block !important;';
                elements[i].parentElement.attributes.style.value = style;
            }
        } else {
            var elements = $('.phaseBaselineBar');
            for (var i = 0; i < elements.length; i++) {
                var style = elements[i].parentElement.attributes.style.value;
                var arr = style.split(';');
                if (arr[arr.length - 1] == 'display: block !important') {
                    delete arr[arr.length - 1];
                }
                style = arr.join(';');
                style = style + 'display: none !important;';
                elements[i].parentElement.attributes.style.value = style;
            }
        }
    }
    DivRezise() {
        //console.log('FormatDate' + this.timelineGridStartDate);
        //console.log('FormatDate' + this.timelineGridEndDate);
        // var xScale: any = d3.time.scale().domain([new Date(this.timelineGridStartDate), new Date(this.timelineGridEndDate)]).range([0, 1700]);
        // var xScale: any = d3.time.scale().domain([new Date(this.timelineGridStartDate), new Date(this.timelineGridEndDate)]).range([0, this.timeLineGridWidth]);

        //if (this.flat && this.flat.length > 0) {
        //    this.isRoadMapLoaded = true;
        //} else {
        //    this.isRoadMapLoaded = false;
        //}

        var xScale: any = d3.time.scale().domain([new Date(this.timelinemonthdate), new Date(this.timelineGridEndDate)]).range([0, this.timeLineGridWidth]);
        var _this = this;
        var tempIni = [];
        tempIni = $.grep(this.flat, function (e: any) { return e.TaskType == "Initiative" });
        if (tempIni.length > 1) {

        }
        else {
            this.flat = this.flat.sort(function (a, b) {
                return a.Orderid - b.Orderid;
            });
        }

        $.each(this.flat, function (i: any, d: any) {

            console.log(i + ": " + d.TaskUId);
            var startDate: any = d3.time.day.floor(new Date(d.PlannedStart));
            var endDate: any = d3.time.day.ceil(new Date(d.PlannedFinish));
            var parentEntityData: any = _this.flat.filter(i => i.TaskUId == d.ParentTaskUId)

            if (d.ParentTaskUId != 0 && d.TaskType != "Initiative") {
                var checkPosition = $.grep(_this.flat, function (e: any) { return e.ParentTaskUId == d.ParentTaskUId && e.Orderid < d.Orderid && e.Rowid == d.Rowid });
                if (d.TaskType != "Milestone") {
                    if (checkPosition.length > 0) {
                        var minOrderId = _this.getMax(checkPosition, "Orderid");
                        var prevRel = $.grep(checkPosition, function (e: any) { return e.Orderid == minOrderId });
                        var prevDate = prevRel[0].PlannedFinish;
                        const [year, month, day] = d.PlannedStart.split("-");
                        //var prevDate: any = _this.flat.filter(i => i.ParentTaskUId == d.ParentTaskUId && i.Orderid == (d.Orderid - 1) && i.Rowid == d.Rowid)[0].PlannedFinish;
                        var nstartDate: any = d3.time.day.floor(new Date(parseInt(year), parseInt(month) - 1, parseInt(day) - 1));
                        var startDate1: any = d3.time.day.floor(new Date(prevDate));
                        var calwidth1 = xScale(nstartDate) - xScale(startDate1);
                        //if (d.TaskType == "Phase") {
                        //    $("#div_" + d.TaskUId).parent().css("margin-left", calwidth1 - 4.6 + "px");
                        //}
                        //else if (d.TaskType == "Sprint/Iteration") {                            
                            $("#div_" + d.TaskUId).parent().css("margin-left", calwidth1 + "px");
                        //}
                        //else {
                        //    $("#div_" + d.TaskUId).parent().css("margin-left", calwidth1 - 8.4 + "px");
                        //}
                    }
                    else {
                        var parentStartDate: any = _this.flat.filter(i => i.TaskUId == d.ParentTaskUId)
                        if (parentStartDate.length > 0) {
                            let psd = parentStartDate[0].PlannedStart;
                            var startDate2: any = d3.time.day.floor(new Date(psd));
                            var calwidth1 = xScale(startDate) - xScale(startDate2);
                            $("#div_" + d.TaskUId).parent().css("margin-left", calwidth1 - 12 + "px");
                            $("#div_" + d.TaskUId).parent().css("clear", "left");
                            //$("#div_" + d.TaskUId).parent().offset({ left: xScale(startDate) - 10 });
                        }
                    }
                }
                //if (d.TaskType == 'Sprint/Iteration') {
                //    var parentRel = _this.flat.filter(i => i.TaskUId == d.ParentTaskUId)
                //    if (parentRel != undefined && parentRel.length > 0) {
                //        //if (parentRel[0].ReleaseMethodologyType != undefined) {
                //        //    if (parentRel[0].ReleaseMethodologyType.toLowerCase() == "agile") {
                //        //        $("#div_" + d.TaskUId).parent().css("margin-right", "4px");
                //        //    }
                //        //}
                //        //if (Date.parse(parentRel[0].PlannedFinish) == Date.parse(d.PlannedFinish)) 
                //        //    $("#div_" + d.TaskUId).parent().css("margin-right", "1px");
                //        //else
                //            $("#div_" + d.TaskUId).parent().css("margin-right", "0px");
                //    }
                //}
                //else {
                    $("#div_" + d.TaskUId).parent().css("margin-right", "0px");
                //}
                $("#con_" + d.TaskUId + " > .ngx-dnd-container").css("padding-right", "0px");
            }
            else {
                //$("#div_" + d.TaskUId).parent().offset({ left: xScale(startDate) });
                $("#div_" + d.TaskUId).parent().css("margin-left", xScale(startDate) + "px");
            }
            //$("#div_" + d.TaskUId).parent().css({ left: xScale(startDate) - 10 });
            //$('#div_' + d.TaskUId).parent().css({ 'display':'inline-block', 'position': 'absolute'});

            var calwidth = xScale(endDate) - xScale(startDate);
            if (d.TaskType != "Milestone") {
                var parentEntity: any = _this.flat.filter(i => i.TaskUId == d.ParentTaskUId)
                if (parentEntity.length > 0) {
                    let pend = parentEntity[0].PlannedFinish;
                    if (Date.parse(pend) == Date.parse(d.PlannedFinish) && (d.TaskType == "Sprint/Iteration" || d.TaskType == "Task"))
                        $("#div_" + d.TaskUId).parent().css("width", calwidth - 2 + "px");
                    else
                        $("#div_" + d.TaskUId).parent().css("width", calwidth + "px");
                }
                else
                    $("#div_" + d.TaskUId).parent().css("width", calwidth + "px");

                $("#div_" + d.TaskUId).parent().css("background-color", d.BarColor);
            }
            $("#div_" + d.TaskUId + " .ngx-dnd-container").eq(0).css("border", "2px solid " + d.BarColor);
            $("#divTitle_" + d.TaskUId + "_" + d.TaskType.replace("/", "\\")).val(d.Title);
            $("#divTitle_" + d.TaskUId + "_" + d.TaskType.replace("/", "\\")).css("font-family", "sans-serif");

            //During drag and drop each entity adding dynamic width based on the parent width (ie.. timeline container)
            var targetTimelineContainer = $("#ec_" + d.TaskUId).width() - 110;
            $("#ec_" + d.TaskUId + "> .ngxInputContainer").css('width', targetTimelineContainer + 'px');

            if (d.TaskType == "Sprint/Iteration" || d.TaskType == "Task") { 
                $("#div_" + d.TaskUId + " .ngx-dnd-container").eq(0).css("border", "none");
                if (parentEntityData.length > 0) {
                    if (Date.parse(parentEntity[0].PlannedStart) == Date.parse(d.PlannedStart))
                        $("#div_" + d.TaskUId + " .ngx-dnd-container").eq(0).css('border-left', '2px solid #286e99');
                }
                $("#div_" + d.TaskUId + " .ngx-dnd-container").eq(0).css("height", "10px");
            }

            //During drag and drop each entity adding dynamic width based on the parent width (ie.. timeline container)
            var targetTimelineContainer = $("#ec_" + d.TaskUId).width() - 130;
            $("#ec_" + d.TaskUId + "> .ngxInputContainer").css('width', targetTimelineContainer + 'px');

            //if (calwidth > 154) {
            //    $("#divTitle_" + d.TaskUId + "_" + d.TaskType).parent().css('width', 'auto');
            //}
            //else {
            //    $("#divTitle_" + d.TaskUId + "_" + d.TaskType).parent().css('width', 98 + 'px');
            //}                      
            var topPaddingValue = 0;
            switch (d.BarFontSize) {
                case "Small":
                    {
                        this.displayFontSize = "x-small";
                        topPaddingValue = 6;
                        break;
                    }
                case "Medium":
                    {
                        this.displayFontSize = "medium";
                        topPaddingValue = 4;
                        break;
                    }
                case "Large":
                    {
                        this.displayFontSize = "large";
                        topPaddingValue = 2;
                        break;
                    }
                case "Excel":
                    {
                        this.displayFontSize = "x-large";
                        topPaddingValue = 0;
                        break;
                    }
                default:
                    {
                        this.displayFontSize = "small";
                        topPaddingValue = 5;
                        break;
                    }
            }
            if (d.TaskType == "Sprint/Iteration") {
                $("#divTitle_" + d.TaskUId + "_" + 'Sprint\\/Iteration').attr('style', 'padding-top: ' + topPaddingValue.toString() + 'px !important');
                $("#divTitle_" + d.TaskUId + "_" + 'Sprint\\/Iteration').css("font-size", this.displayFontSize);
                $("#divTitle_" + d.TaskUId + "_" + 'Sprint\\/Iteration').css("height", 30);
            }
            else {
                $("#divTitle_" + d.TaskUId + "_" + d.TaskType.replace("/", "\\")).attr('style', 'padding-top: ' + topPaddingValue.toString() + 'px !important');
                $("#divTitle_" + d.TaskUId + "_" + d.TaskType.replace("/", "\\")).css("font-size", this.displayFontSize);
                $("#divTitle_" + d.TaskUId + "_" + d.TaskType.replace("/", "\\")).css("height", 30);
            }

            $("#eyediv_" + d.TaskUId).position({
                my: 'right top', at: 'right+85 top', of: '#div_' + d.TaskUId, collision: "none"
            });
            if (calwidth < 46) {
                var p1 = $("#ec_" + d.TaskUId).find('.section-image');
                p1.remove();
                $("#ec_" + d.TaskUId).find("#image_" + d.TaskUId).css({ 'margin-left': '-7px', 'margin-top': '-5px', 'padding-bottom': '4px' });
                $("#eyediv_" + d.TaskUId).css({ 'top': '1px', 'float': 'left', 'left': '-6px' });
                $("#divTitle_" + d.TaskUId + "_" + d.TaskType.replace("/", "\\/")).hide();
                $("#divTitle_" + d.TaskUId + "_" + d.TaskType.replace("/", "\\/")).parent('.ngxInputContainer').css({ 'margin-left': '-40px' });
            }
            else if (calwidth >= 46 && calwidth < 80) {
                var p1 = $("#ec_" + d.TaskUId).find('.section-image');
                p1.remove();
                $("#eyediv_" + d.TaskUId).css({ 'top': '-5px', 'float': 'left', 'left': (calwidth - 30).toString() + 'px' });
                $("#divTitle_" + d.TaskUId + "_" + d.TaskType.replace("/", "\\/")).hide();
                $("#divTitle_" + d.TaskUId + "_" + d.TaskType.replace("/", "\\/")).parent('.ngxInputContainer').css({ 'margin-left': '-30px' });
            }
            else if (calwidth >= 80 && calwidth < 117) {
                $("#eyediv_" + d.TaskUId).css({ 'top': '-8px', 'float': 'left', 'left': (calwidth - 30).toString() + 'px' });
                $("#divTitle_" + d.TaskUId + "_" + d.TaskType.replace("/", "\\/")).hide();
                $("#divTitle_" + d.TaskUId + "_" + d.TaskType.replace("/", "\\/")).parent('.ngxInputContainer').css({ 'margin-left': '-36px' });
            }
            ////window.event.stopImmediatePropagation();
        });
        //if ($('#hiddenScale').val() != "") {
        //    var panX = $('#hiddenScale').val();
        //    $(".builder-target").css("transform", "scaleX(" + parseFloat(panX) + ")");
        //}

        // console.log(this.MilestoneFlat);

        $.each(this.MilestoneFlat, function (i: any, d: any) {
            //  console.log(i + ": " + d.TaskUId);
            if (d.BaselineStartDate != undefined) {
                var milestonesContainer = $.grep(_this.flat, function (e: any) { return e.TaskUId == d.ParentTaskUId });
                if (milestonesContainer != undefined && milestonesContainer.length > 0) {
                    var msd = milestonesContainer[0].PlannedStart;
                }
                var startDate: any = d3.time.day.floor(new Date(msd));
                var endDate: any = d3.time.day.ceil(new Date(d.BaselineStartDate));

                var calwidth = xScale(endDate) - xScale(startDate) - 15;
                var l = 'left+' + calwidth + ' top';
                setTimeout(function () {
                    $("#img_" + d.TaskUId).position({ my: 'left top-20', at: l, of: '#div_' + d.ParentTaskUId, collision: "none" });
                }, 0);
            }
            else {
                setTimeout(function () {
                    $("#img_" + d.TaskUId).position({ my: 'right top-20', at: 'right+25 top', of: '#div_' + d.ParentTaskUId, collision: "none" });
                }, 0);
            }

            //if (d.LegendIcon == 'Redflag')
            var src: any;

            var milestoneStyle = 'redflag';
            if (_this.settingsAppliedData != undefined) {
                if (_this.settingsAppliedData.MilestoneStyle != undefined)
                    milestoneStyle = _this.settingsAppliedData.MilestoneStyle;
                if (_this.settingsAppliedData.MileStoneStyle != undefined)
                    milestoneStyle = _this.settingsAppliedData.MileStoneStyle;
            }

            if (d.LegendIcon != undefined) {
                if (d.LegendIcon.toLowerCase() == 'greensquare')
                    src = "./images/greensquare.png";
                else if (d.LegendIcon.toLowerCase() == 'bluediamond')
                    src = "./images/bluediamond.png";
                else if (d.LegendIcon.toLowerCase() == 'yellowstar')
                    src = "./images/yellowstar.png";
                else
                    src = "./images/redflag.png";
            }
            else {
                if (milestoneStyle.toLowerCase().indexOf('greensquare') > -1)
                    src = "./images/greensquare.png";
                else if (milestoneStyle.toLowerCase().indexOf('bluediamond') > -1)
                    src = "./images/bluediamond.png";
                else if (milestoneStyle.toLowerCase().indexOf('yellowstar') > -1)
                    src = "./images/yellowstar.png";
                else
                    src = "./images/redflag.png";

                d.LegendIcon = src.split('/')[2].split('.')[0];
            }

            if (d.ActionType == "Deleted") {
                $("#img_" + d.TaskUId).remove();
            }
            else {
                $("#img_" + d.TaskUId).attr("src", src);
                $("#img_" + d.TaskUId).prop("title", d.Title + "  " + d.BaselineStartDate);
            }
        });
        if ($("#testsvg1").children().length == 4) {
            $("#testsvg1").children().eq(2).remove();
        }
        if (this.isCompare) {
            $("#noncomparediv").remove();
        }
        this.DependencyFlat = this.global["DEPENDENCYFLAT"];
        if (this.DependencyFlat != undefined && this.DependencyFlat.length > 0) {
            this.ResetDependencyLine();
        }

        this.SetEntitySubMenu(this.targetBuilderTools);
        
        if ($('.parentDNDContainer').children().length > 0) {
            var getWindowHeight = $(window).height();
            var headerHgt = $('.header').length > 0 ? $('.header').height() : 0
            var backtoPhoenix = $('.backto_phoenix').length > 0 ? $('.backto_phoenix').height() : 0
            var roadmapZoomingContainerHgt = $('.roadmap-zoomingContainer').length > 0 ? $('.roadmap-zoomingContainer').height() : 0
            var headerHeight = $('#div_scroll').height() + headerHgt + backtoPhoenix + $('.roadMapHeaderNavigationMenu').height() + roadmapZoomingContainerHgt + 54;

            if (getWindowHeight < headerHeight) {
                setTimeout(function () {
                    var TimelineHeight = $(".builder-target").css('height');
                    var ScrollHeight = $(window).height() - 145;
                    if (parseFloat(TimelineHeight) > ScrollHeight) {
                        $("#div_scroll").css('height', (parseFloat(TimelineHeight) + 100) + "px");
                    }
                    else {
                        $("#div_scroll").css('height', ScrollHeight + 'px');
                    }

                    $('#CurrentDateVL').css("height", $("#div_scroll").css('height'));

                }, 10);
            } else {
                $("#div_scroll ").css('height', (getWindowHeight - 155) + 'px');
                $('#CurrentDateVL').css('height', (getWindowHeight - 130) + 'px');
            }

            
        } else {
            var getWindowHeight = $(window).height();  
            $("#div_scroll ").css('height', (getWindowHeight - 155) + 'px');
            $('#CurrentDateVL').css('height', (getWindowHeight - 130) + 'px');
        }

        this.execDivResize = false;
    }

    AlignBars(divid: any, event: any) {
        //var xScale: any = d3.time.scale().domain([new Date(this.timelineGridStartDate), new Date(this.timelineGridEndDate)]).range([0, this.timeLineGridWidth]);
        var xScale: any = d3.time.scale().domain([new Date(this.timelinemonthdate), new Date(this.timelineGridEndDate)]).range([0, this.timeLineGridWidth]);
        var startDate, endDate;
        var _this = this;
        var TaskUId = divid.split("_")[1];
        let u = -1;
        this.panX = 1;
        var divleft1: any = 0;
        for (let i = 0; i < this.flat.length; i++) {
            divleft1 = parseFloat(divleft1) + parseFloat($("#div_" + this.flat[i].TaskUId).parent().css("margin-left").replace('px', ''));
            if (TaskUId == this.flat[i].TaskUId) {
                u = i;
                break;
            }
        }
        if ((!(1 / event.position.left < 0 || event.position.left > 0)) && u > 0) {
            divleft = divleft + 10;
        }
        var divleft: any = divleft1 + "px";

        var rectWidth = $("#div_" + TaskUId).parent().css("width");
        rectWidth = rectWidth.substring(0, rectWidth.length - 2);

        startDate = xScale.invert(parseFloat(divleft) + 3);
        endDate = xScale.invert(parseFloat(divleft) + parseFloat(rectWidth));
        if (Date.parse(endDate.toISOString().slice(0, 10)) > Date.parse(_this.timelineGridEndDate)) {
            endDate = _this.timelineGridEndDate;
        }
        var planStartDate = _this.flat[u].PlannedStart;
        var planEndDate = _this.flat[u].PlannedFinish;
        var parentUId = _this.flat[u].ParentTaskUId;

        var parentSD = $.grep(_this.flat, function (e: any) { return e.TaskUId == parentUId; });
        let hasError = false;
        _this.flat[u].PlannedStart = startDate.toISOString().slice(0, 10);
        _this.flat[u].PlannedFinish = endDate.toISOString().slice(0, 10);
        if (parentSD.length > 0) {
            if (_this.flat[u].PlannedStart < parentSD[0].PlannedStart) {
                _this.flat[u].PlannedStart = parentSD[0].PlannedStart;
            }
            if (_this.flat[u].PlannedFinish > parentSD[0].PlannedFinish) {
                _this.flat[u].PlannedFinish = parentSD[0].PlannedFinish;
            }
        }

        $("#hiddentasks").val(JSON.stringify(_this.flat));
        this.targetBuilderTools = this.getHierarchicalData(this.flat, this.flat[0].ParentTaskUId);
        this.execDivResize = true;
        this.rendertimeline();
    }

    SettingsApply(event: any) {
        this.settingsAppliedData = event;
        for (let i = 0; i < this.flat.length; i++) {
            if (event.IsAll) {

                if (this.flat[i].IsEditedFromEntity == undefined || this.flat[i].IsEditedFromEntity == "" || this.flat[i].IsEditedFromEntity == false) {
                    this.flat[i].BarColor = event.BarColor;
                    this.flat[i].BarFontSize = event.BarFontSize;
                }
                //this.flat[i].BarColor = this.flat[i].BarColor != undefined ? this.flat[i].BarColor : event.BarColor;
                //this.flat[i].BarFontSize = this.flat[i].BarFontSize != undefined ? this.flat[i].BarFontSize : event.BarFontSize;
            }
            else {
                if (event.IsInitiative) {
                    if (this.flat[i].TaskType == "Initiative") {
                        if (this.flat[i].IsEditedFromEntity == undefined || this.flat[i].IsEditedFromEntity == "" || this.flat[i].IsEditedFromEntity == false) {
                            this.flat[i].BarColor = event.BarColor;
                            this.flat[i].BarFontSize = event.BarFontSize;
                        }
                        //this.flat[i].BarColor = this.flat[i].BarColor != undefined ? this.flat[i].BarColor: event.BarColor;
                        //this.flat[i].BarFontSize = this.flat[i].BarFontSize != undefined ? this.flat[i].BarFontSize : event.BarFontSize;;
                    }
                }
                if (event.IsRelease) {
                    if (this.flat[i].TaskType == "Release") {

                        if (this.flat[i].IsEditedFromEntity == undefined || this.flat[i].IsEditedFromEntity == "" || this.flat[i].IsEditedFromEntity == false) {
                            this.flat[i].BarColor = event.BarColor;
                            this.flat[i].BarFontSize = event.BarFontSize;
                        }
                        // this.flat[i].BarColor = this.flat[i].BarColor != undefined ? this.flat[i].BarColor : event.BarColor;
                        //this.flat[i].BarFontSize = this.flat[i].BarFontSize != undefined ? this.flat[i].BarFontSize : event.BarFontSize;
                    }
                }

                if (event.IsPhase) {
                    if (this.flat[i].TaskType == "Phase") {
                        //  this.flat[i].BarColor = this.flat[i].BarColor != undefined ? this.flat[i].BarColor : event.BarColor;
                        if (this.flat[i].IsEditedFromEntity == undefined || this.flat[i].IsEditedFromEntity == "" || this.flat[i].IsEditedFromEntity == false) {
                            this.flat[i].BarColor = event.BarColor;
                            this.flat[i].BarFontSize = event.BarFontSize;
                        }
                        //this.flat[i].BarFontSize = this.flat[i].BarFontSize != undefined ? this.flat[i].BarFontSize : event.BarFontSize;
                    }
                }
                if (event.IsTask) {
                    if (this.flat[i].TaskType == "Task") {
                        //  this.flat[i].BarColor = this.flat[i].BarColor != undefined ? this.flat[i].BarColor : event.BarColor;
                        if (this.flat[i].IsEditedFromEntity == undefined || this.flat[i].IsEditedFromEntity == "" || this.flat[i].IsEditedFromEntity == false) {
                            this.flat[i].BarColor = event.BarColor;
                            this.flat[i].BarFontSize = event.BarFontSize;
                        }
                        //this.flat[i].BarFontSize = this.flat[i].BarFontSize != undefined ? this.flat[i].BarFontSize : event.BarFontSize;
                    }
                }
                if (event.IsIteration) {
                    if (this.flat[i].TaskType == "Iteration") {
                        // this.flat[i].BarColor = this.flat[i].BarColor != undefined ? this.flat[i].BarColor : event.BarColor;
                        if (this.flat[i].IsEditedFromEntity == undefined || this.flat[i].IsEditedFromEntity == "" || this.flat[i].IsEditedFromEntity == false) {
                            this.flat[i].BarColor = event.BarColor;
                            this.flat[i].BarFontSize = event.BarFontSize;
                        }
                        //this.flat[i].BarFontSize = this.flat[i].BarFontSize != undefined ? this.flat[i].BarFontSize : event.BarFontSize;
                    }
                }
                if (event.IsFunctional) {
                    if (this.flat[i].TaskType == "FunctionalArea") {
                        // this.flat[i].BarColor = this.flat[i].BarColor != undefined ? this.flat[i].BarColor : event.BarColor;
                        if (this.flat[i].IsEditedFromEntity == undefined || this.flat[i].IsEditedFromEntity == "" || this.flat[i].IsEditedFromEntity == false) {
                            this.flat[i].BarColor = event.BarColor;
                            this.flat[i].BarFontSize = event.BarFontSize;
                        }
                        //this.flat[i].BarFontSize = this.flat[i].BarFontSize != undefined ? this.flat[i].BarFontSize : event.BarFontSize;
                    }
                }
                if (event.IsSprint) {
                    if (this.flat[i].TaskType == "Sprint/Iteration") {
                        //this.flat[i].BarColor = this.flat[i].BarColor != undefined ? this.flat[i].BarColor : event.BarColor;
                        if (this.flat[i].IsEditedFromEntity == undefined || this.flat[i].IsEditedFromEntity == "" || this.flat[i].IsEditedFromEntity == false) {
                            this.flat[i].BarColor = event.BarColor;
                            this.flat[i].BarFontSize = event.BarFontSize;
                        }
                        //this.flat[i].BarFontSize = this.flat[i].BarFontSize != undefined ? this.flat[i].BarFontSize : event.BarFontSize;
                    }
                }
            }
        }
        this.execDivResize = true;
    }

    GetPlannedStartEnd(flat: any) {

        // var xScale: any = d3.time.scale().domain([new Date(this.timelineGridStartDate), new Date(this.timelineGridEndDate)]).range([0, 1700]);
        //var xScale: any = d3.time.scale().domain([new Date(this.timelineGridStartDate), new Date(this.timelineGridEndDate)]).range([0, this.timeLineGridWidth]);
        var xScale: any = d3.time.scale().domain([new Date(this.timelinemonthdate), new Date(this.timelineGridEndDate)]).range([0, this.timeLineGridWidth]);


        var startDate, endDate, modifiedindex;
        $.each(flat, function (i, d) {
            var TaskUId = d.TaskUId;
            //if (TaskUId == d.TaskUId) {
            //console.log(i + ": " + d.TaskUId);
            var divleft: any = $("#div_" + TaskUId).parent().offset();
            divleft = divleft.left;
            startDate = xScale.invert(parseFloat(divleft) + 32);

            //var divleft: any = $("#div_" + TaskUId).parent().css("marginLeft");
            //divleft = divleft.substring(0, divleft.length - 2);
            //startDate = xScale.invert(parseFloat(divleft) + 20);
            var rectWidth = $("#div_" + TaskUId).parent().css("width");
            rectWidth = rectWidth.substring(0, rectWidth.length - 2);
            endDate = xScale.invert(parseFloat(divleft) + 10 + parseFloat(rectWidth));
            modifiedindex = i;
            console.log("StartDate:" + startDate);
            console.log("EndDate:" + endDate);
            flat[modifiedindex].PlannedStart = startDate.toISOString().slice(0, 10);
            flat[modifiedindex].PlannedFinish = endDate.toISOString().slice(0, 10);
            //}

        });


        this.flat = flat;
        $("#hiddentasks").val(JSON.stringify(this.flat));
        // this.rendertimeline();

    }
    onResizeStart(event: any) {
        this.isDisabledSaveButton = false;
        $('#sidePanelPopupContainer').hide();
        //    console.log("Resize Started");
        //    console.log(event.size);
        //    console.log(event.position);
    }
    onResizing(event: any, divUid: any) {

        var xScale: any = d3.time.scale().domain([new Date(this.timelinemonthdate), new Date(this.timelineGridEndDate)]).range([0, this.timeLineGridWidth]);
        var startDate, endDate;
        var _this = this;
        var TaskUId = divUid;
        let u = -1;
        for (let i = 0; i < this.flat.length; i++) {
            if (TaskUId == this.flat[i].TaskUId) {
                u = i;
            }
        }

        var width = $("#div_" + divUid).css("width");
        var width1 = parseFloat(width) + 20;
        $("#div_" + divUid).parent().css("width", width1);
        this.resizingGlobalval = '-' + $("#div_" + divUid).css("left");
        /* Left side to left direction */
        if (1 / event.position.left < 0) {

            $("#div_" + divUid).parent().css("margin-left", parseFloat($("#div_" + divUid).parent().css("margin-left").replace('px', '')) - 3 + "px");
            $("#div_" + divUid).css("margin-left", $("#div_" + divUid).css("margin-left").replace('-', ''))
            $("#div_" + divUid).css("width", parseFloat($("#div_" + divUid).css("width").replace('px', '')) + 30 + "px");
            $("#div_" + divUid).parent().css("width", parseFloat($("#div_" + divUid).css("width").replace('px', '')) + 20 + "px");

            if ($("#div_" + this.flat[u].TaskUId).parent().css("margin-left").replace('px', '') < 1)
            {
                $("#div_" + divUid).parent().css("margin-left", "-10px");
            }
            this.resizingGlobalval = $("#div_" + divUid).css("left");

            var divleft: any = $("#div_" + divUid).parent().css("margin-left");
           // divleft = parseFloat(divleft.left);

            var rectWidth = $("#div_" + divUid).parent().css("width");
            rectWidth = rectWidth.substring(0, rectWidth.length - 2);

            startDate = xScale.invert(parseFloat(divleft));
            endDate = xScale.invert(parseFloat(divleft) + parseFloat(rectWidth));
            var parentUId = _this.flat[u].ParentTaskUId;

            _this.flat[u].PlannedStart = startDate.toISOString().slice(0, 10);
        }
        /* Left side to right direction */
        else if (event.position.left > 0) {
            $("#div_" + divUid).parent().css("margin-left", parseFloat($("#div_" + divUid).parent().css("margin-left").replace('px', '')) + 3 + "px");

            var divleft: any = $("#div_" + divUid).parent().css("margin-left");
           // divleft = parseFloat(divleft.left);

            var rectWidth = $("#div_" + divUid).parent().css("width");
            rectWidth = rectWidth.substring(0, rectWidth.length - 2);

            startDate = xScale.invert(parseFloat(divleft));
            endDate = xScale.invert(parseFloat(divleft) + parseFloat(rectWidth));
            var parentUId = _this.flat[u].ParentTaskUId;

            _this.flat[u].PlannedStart = startDate.toISOString().slice(0, 10);
        }
        /* Right side to any direction */
        else {
            $("#div_" + divUid).parent().css("margin-left", $("#div_" + divUid).parent().css("margin-left"));
        }
        $("#div_" + divUid).css("margin-left", this.resizingGlobalval);
        this.isDisabledSaveButton = false;
    }

    onResizeStop(event: any, taskUId: any, parentTaskUId: any) {
        var xScale: any = d3.time.scale().domain([new Date(this.timelinemonthdate), new Date(this.timelineGridEndDate)]).range([0, this.timeLineGridWidth]);
        var startDate, endDate;
        var _this = this;
        var TaskUId = taskUId;
        let u = -1;
        var divleft1: any = 0;
        for (let i = 0; i < this.flat.length; i++) {
            divleft1 = parseFloat(divleft1) + parseFloat($("#div_" + this.flat[i].TaskUId).parent().css("margin-left").replace('px',''));
            if (TaskUId == this.flat[i].TaskUId) {
                u = i;
                break;
            }
        }
        if ((!(1 / event.position.left < 0 || event.position.left > 0)) && u > 0) {
            divleft = divleft + 10;
        }
        var divleft: any = divleft1 + "px";
      //  divleft = divleft.left;

        var rectWidth = $("#div_" + TaskUId).parent().css("width");
        rectWidth = rectWidth.substring(0, rectWidth.length - 2);

        startDate = xScale.invert(parseFloat(divleft) + 3);
        endDate = xScale.invert(parseFloat(divleft) + parseFloat(rectWidth));
        var planStartDate = _this.flat[u].PlannedStart;
        var planEndDate = _this.flat[u].PlannedFinish;
        var parentUId = _this.flat[u].ParentTaskUId;
        
        var parentSD = $.grep(_this.flat, function (e: any) { return e.TaskUId == parentUId; });
        let hasError = false;

        if (startDate.toISOString().slice(0, 10) != undefined && endDate.toISOString().slice(0, 10) != undefined) {
            if (Date.parse(startDate.toISOString().slice(0, 10)) < Date.parse(_this.timelineGridStartDate) || Date.parse(endDate.toISOString().slice(0, 10)) > Date.parse(_this.timelineGridEndDate)) {
                this.errorMessage = "Child timeline cannot be outside the roadmap timeline";
                if (Date.parse(startDate.toISOString().slice(0, 10)) < Date.parse(_this.timelineGridStartDate)) {
                    _this.flat[u].PlannedStart = _this.timelineGridStartDate;
                    this.toastrService.showErrorToastr(this.errorMessage);
                }
                else if (Date.parse(endDate.toISOString().slice(0, 10)) > Date.parse(_this.timelineGridEndDate)) {
                    _this.flat[u].PlannedFinish = _this.timelineGridEndDate;
                    this.toastrService.showErrorToastr(this.errorMessage);
                }
                hasError = true;
                $("#hiddentasks").val(JSON.stringify(_this.flat));
                this.targetBuilderTools = this.getHierarchicalData(this.flat, this.flat[0].ParentTaskUId);
                this.execDivResize = true;
                this.rendertimeline();
            }
        }

        /*For Left side */
        if (1 / event.position.left < 0 || event.position.left > 0) {
            this.SetTargetBuilderData(this.flat);
        }
        /*For Right side */
        else {
            this.AlignBars("div_" + taskUId, event);
        }
        /*setting timeline of associated over-all(Program) release according to project release's timeline change*/
        let resizedEntity = this.flat.find(x => x.TaskUId == taskUId);
        if (resizedEntity.ParentTaskUId != 0 && resizedEntity.TaskType == "Release") {
            if (resizedEntity.AssociatedOverAllReleaseUId != undefined) {
                var associatedOverallRelease = this.flat.filter(x => x.TaskUId == resizedEntity.AssociatedOverAllReleaseUId)[0];
                if (associatedOverallRelease.PlannedStart > resizedEntity.PlannedStart) {
                    this.flat.filter(k => k.TaskUId == associatedOverallRelease.TaskUId)[0].PlannedStart = resizedEntity.PlannedStart;
                }
                if (associatedOverallRelease.PlannedFinish < resizedEntity.PlannedFinish) {
                    this.flat.filter(k => k.TaskUId == associatedOverallRelease.TaskUId)[0].PlannedFinish = resizedEntity.PlannedFinish;
                }
            }
        }
        this.isDisabledSaveButton = false;
        if (hasError) {
            return false;
        }
    }

    LoadCompareRoadmaps() {
        var _this = this;
        var compareUIds = this.global["COMPAREUIDS"];
        var roadmapdatauid = null;
        var baselineuid1 = null;
        var baselineuid2 = null;
        if (compareUIds != undefined && compareUIds.length > 0) {
            var rmuid = this.global["ROADMAPUID"];
            var roadmapuidindex = compareUIds.indexOf(rmuid);
            if (roadmapuidindex != -1) {
                roadmapdatauid = rmuid;
                baselineuid1 = roadmapuidindex == 0 ? compareUIds[1] : compareUIds[0];
            }
            else {
                baselineuid1 = compareUIds[0];
                baselineuid2 = compareUIds[1];
            }
            _this.roadmapAssistantService.GetCompareRoadmapData(this.deliveryConstructUId, roadmapdatauid, baselineuid1, baselineuid2).subscribe((response) => {
                if (response != null) {
                    if (response.length > 0) {
                        if (response[0] != null || response[1] != null) {
                            var compareFirstData = response[0];
                            var compareSecondData = response[1];
                        }
                        for (var i = 0; i < compareFirstData.length; i++) {
                            if (compareFirstData[i].TaskType == "Initiative" || compareFirstData[i].TaskType == "Release" || compareFirstData[i].TaskType == "Iteration" || compareFirstData[i].TaskType == "FunctionalArea" || compareFirstData[i].TaskType == "Phase" || compareFirstData[i].TaskType == "Sprint/Iteration" || compareFirstData[i].TaskType == "Task") {
                                compareFirstData[i].InputType = "section";
                            } else {
                                compareFirstData[i].InputType = "string";
                            }
                            if (compareFirstData[i].CreatedBy == this.cUser) {
                                compareFirstData[i].isEnabled = true;
                            }
                            else {
                                compareFirstData[i].isEnabled = false;
                                this.disableTaskUIds.push(compareFirstData[i].TaskUId);
                            }
                        }
                        _this.targetBuilderToolsCompareFirstData = _this.getHierarchicalData(compareFirstData, compareFirstData[0].ParentTaskUId);
                        _this.flatCompareFirstData = _this.getFlat(_this.targetBuilderToolsCompareFirstData, 0);

                        if (_this.flatCompareFirstData.filter(x => x.TaskType == "Milestone").length > 0) {
                            let milestoneData = _this.flatCompareFirstData.filter(x => x.TaskType == "Milestone");
                            this.rendertimeline();
                            _this.MilestoneFlat = milestoneData;
                            _this.flatCompareFirstData = _this.flatCompareFirstData.filter(x => x.TaskType != "Milestone");
                            _this.targetBuilderToolsCompareFirstData = _this.getHierarchicalData(_this.flatCompareFirstData, _this.flatCompareFirstData[0].ParentTaskUId);
                            this.orderFlatJsonCompareFirstData();
                            this.execDivResizeCompareData = true;
                        }

                        for (var i = 0; i < compareSecondData.length; i++) {
                            if (compareSecondData[i].TaskType == "Initiative" || compareSecondData[i].TaskType == "Release" || compareSecondData[i].TaskType == "Iteration" || compareSecondData[i].TaskType == "FunctionalArea" || compareSecondData[i].TaskType == "Phase" || compareSecondData[i].TaskType == "Sprint/Iteration" || compareSecondData[i].TaskType == "Task") {
                                compareSecondData[i].InputType = "section";
                            } else {
                                compareSecondData[i].InputType = "string";
                            }
                            if (compareSecondData[i].CreatedBy == this.cUser) {
                                compareSecondData[i].isEnabled = true;
                            }
                            else {
                                compareSecondData[i].isEnabled = false;
                                this.disableTaskUIds.push(compareSecondData[i].TaskUId);
                            }
                        }
                        _this.targetBuilderToolsCompareSecondData = _this.getHierarchicalData(compareSecondData, compareSecondData[0].ParentTaskUId);
                        _this.flatCompareSecondData = _this.getFlat(_this.targetBuilderToolsCompareSecondData, 0);

                        if (_this.flatCompareSecondData.filter(x => x.TaskType == "Milestone").length > 0) {
                            let milestoneData = _this.flatCompareSecondData.filter(x => x.TaskType == "Milestone");
                            this.rendertimeline();
                            _this.MilestoneFlat = milestoneData;
                            _this.flatCompareSecondData = _this.flatCompareSecondData.filter(x => x.TaskType != "Milestone");
                            _this.targetBuilderToolsCompareSecondData = _this.getHierarchicalData(_this.flatCompareSecondData, _this.flatCompareSecondData[0].ParentTaskUId);
                            this.orderFlatJsonCompareSecondData();
                            this.execDivResizeCompareData = true;
                        }
                    }
                }
                this.orderFlatJsonCompareFirstData();
                this.orderFlatJsonCompareSecondData();
                this.execDivResizeCompareData = true;
                this.renderCompareTimeLine();
            }, error => {
                this.spinner.hide();
                console.log(error);
            });
        }

    }
    filterEntities(event: any, isFilterApplied: boolean) {
        this.isFilterApplied = isFilterApplied;
        this.filterAppliedData = event;
        this.flat = event;
        this.targetBuilderTools = this.getHierarchicalData(this.filterAppliedData, this.filterAppliedData[0].ParentTaskUId);
        this.execDivResize = true;
    }

    SwapContents() {
        var temp = this.targetBuilderToolsCompareFirstData;
        this.targetBuilderToolsCompareFirstData = this.targetBuilderToolsCompareSecondData;
        this.targetBuilderToolsCompareSecondData = temp;

        this.flatCompareFirstData = this.getFlat(this.targetBuilderToolsCompareFirstData, 0);
        this.flatCompareSecondData = this.getFlat(this.targetBuilderToolsCompareSecondData, 0);

        this.orderFlatJsonCompareFirstData();
        this.orderFlatJsonCompareSecondData();
        this.execDivResizeCompareData = true;
        this.renderCompareTimeLine();

    }

    orderFlatJsonCompareFirstData() {
        this.flatCompareFirstData.forEach(this.GenerateUniqueId());

        var EntityData = [];
        var ReleaseData = [];
        var distinctLevels = [];
        //ReleaseData = $.grep(this.flatCompareFirstData, function (e: any) { return e.TaskType == "Release" });
        EntityData = $.grep(this.flatCompareFirstData, function (e: any) { return e.TaskType != "Initiative" });
        var distinctParent = EntityData.map(item => item.ParentTaskUId)
            .filter((value, index, self) => self.indexOf(value) === index);

        if (distinctParent.length > 0) {
            for (let i = 0; i < distinctParent.length; i++) {
                var flatCompareFirstDataRelease = []
                var Orderid = 0;
                var heightPosition = 1;
                var startDate = null;
                for (let temp = 0; temp < EntityData.length; temp++) {
                    EntityData[temp].PositionSettings = 0;
                }
                flatCompareFirstDataRelease = $.grep(EntityData, function (e: any) { return e.ParentTaskUId == distinctParent[i]; });

                for (let j = 0; j < flatCompareFirstDataRelease.length; j++) {
                    var yetToAlign = $.grep(flatCompareFirstDataRelease, function (e: any) { return e.PositionSettings == 0 || e.PositionSettings == undefined; });
                    if (startDate == null || startDate == undefined) {

                        if (yetToAlign.length > 0) {

                            var mindate = new Date(Math.min.apply(null, yetToAlign.map(function (e) {
                                return new Date(e.PlannedStart);
                            })));
                            var mindate2 = moment(mindate).format('YYYY-MM-DD');
                            var AlignTask = $.grep(yetToAlign, function (e: any) { return Date.parse(moment(e.PlannedStart).format('YYYY-MM-DD')) == Date.parse(mindate2); });
                            Orderid = Orderid + 1;
                            // update flatCompareFirstData json with orderid and rowid based on AlignTask
                            //this.flatCompareFirstData.filter(x => x.TaskUId == flatCompareFirstDataRelease[j].TaskUId)[0].Orderid = Orderid;
                            //this.flatCompareFirstData.filter(x => x.TaskUId == flatCompareFirstDataRelease[j].TaskUId)[0].Rowid = heightPosition;
                            if (AlignTask.length > 0) {
                                AlignTask[0].Orderid = Orderid;
                                AlignTask[0].Rowid = heightPosition;

                                startDate = AlignTask[0].PlannedFinish;
                                AlignTask[0].PositionSettings = 1;
                            }
                            var remainingTasks1 = $.grep(yetToAlign, function (e: any) { return e.PlannedStart > startDate; });
                            if (remainingTasks1.length == 0) {
                                startDate = null;
                                heightPosition++;
                            }

                        }
                    }
                    else {

                        if (yetToAlign.length > 0) {
                            var remainingTasks1 = $.grep(yetToAlign, function (e: any) { return e.PlannedStart > startDate; });

                            var mindate = new Date(Math.min.apply(null, remainingTasks1.map(function (e) {
                                return new Date(e.PlannedStart);
                            })));
                            var mindate2 = moment(mindate).format('YYYY-MM-DD');
                            var AlignTask = $.grep(yetToAlign, function (e: any) { return Date.parse(moment(e.PlannedStart).format('YYYY-MM-DD')) == Date.parse(mindate2); });
                            Orderid = Orderid + 1;
                            // update flatCompareFirstData json with orderid based on AlignTask
                            //this.flatCompareFirstData.filter(x => x.TaskUId == flatCompareFirstDataRelease[j].TaskUId)[0].Orderid = Orderid;
                            //this.flatCompareFirstData.filter(x => x.TaskUId == flatCompareFirstDataRelease[j].TaskUId)[0].Rowid = heightPosition;
                            if (AlignTask.length > 0) {
                                AlignTask[0].Orderid = Orderid;
                                AlignTask[0].Rowid = heightPosition;

                                startDate = AlignTask[0].PlannedFinish;
                                AlignTask[0].PositionSettings = 1;
                            }
                            var remainingTasks1 = $.grep(yetToAlign, function (e: any) { return e.PlannedStart > startDate; });
                            if (remainingTasks1.length == 0) {
                                startDate = null;
                                heightPosition++;
                            }
                        }

                    }


                }
            }
        }
        //this.targetBuilderToolsCompareFirstData = this.getHierarchicalData(this.flatCompareFirstData, this.flatCompareFirstData[0].ParentTaskUId);
        if (this.flatCompareFirstData.length > 0) {
            this.targetBuilderToolsCompareFirstData = this.getHierarchicalData(this.flatCompareFirstData, this.flatCompareFirstData[0].ParentTaskUId);
        } else {
            this.targetBuilderToolsCompareFirstData = this.getHierarchicalData(this.flatCompareFirstData, 0);
        }
    }

    orderFlatJsonCompareSecondData() {
        this.flatCompareSecondData.forEach(this.GenerateUniqueId());

        var EntityData = [];
        var ReleaseData = [];
        var distinctLevels = [];
        //ReleaseData = $.grep(this.flatCompareSecondData, function (e: any) { return e.TaskType == "Release" });
        EntityData = $.grep(this.flatCompareSecondData, function (e: any) { return e.TaskType != "Initiative" });
        var distinctParent = EntityData.map(item => item.ParentTaskUId)
            .filter((value, index, self) => self.indexOf(value) === index);

        if (distinctParent.length > 0) {
            for (let i = 0; i < distinctParent.length; i++) {
                var flatCompareSecondDataRelease = []
                var Orderid = 0;
                var heightPosition = 1;
                var startDate = null;
                for (let temp = 0; temp < EntityData.length; temp++) {
                    EntityData[temp].PositionSettings = 0;
                }
                flatCompareSecondDataRelease = $.grep(EntityData, function (e: any) { return e.ParentTaskUId == distinctParent[i]; });

                for (let j = 0; j < flatCompareSecondDataRelease.length; j++) {
                    var yetToAlign = $.grep(flatCompareSecondDataRelease, function (e: any) { return e.PositionSettings == 0 || e.PositionSettings == undefined; });
                    if (startDate == null || startDate == undefined) {

                        if (yetToAlign.length > 0) {

                            var mindate = new Date(Math.min.apply(null, yetToAlign.map(function (e) {
                                return new Date(e.PlannedStart);
                            })));
                            var mindate2 = moment(mindate).format('YYYY-MM-DD');
                            var AlignTask = $.grep(yetToAlign, function (e: any) { return Date.parse(moment(e.PlannedStart).format('YYYY-MM-DD')) == Date.parse(mindate2); });
                            Orderid = Orderid + 1;
                            // update flatCompareSecondData json with orderid and rowid based on AlignTask
                            //this.flatCompareSecondData.filter(x => x.TaskUId == flatCompareSecondDataRelease[j].TaskUId)[0].Orderid = Orderid;
                            //this.flatCompareSecondData.filter(x => x.TaskUId == flatCompareSecondDataRelease[j].TaskUId)[0].Rowid = heightPosition;
                            if (AlignTask.length > 0) {
                                AlignTask[0].Orderid = Orderid;
                                AlignTask[0].Rowid = heightPosition;

                                startDate = AlignTask[0].PlannedFinish;
                                AlignTask[0].PositionSettings = 1;
                            }
                            var remainingTasks1 = $.grep(yetToAlign, function (e: any) { return e.PlannedStart > startDate; });
                            if (remainingTasks1.length == 0) {
                                startDate = null;
                                heightPosition++;
                            }

                        }
                    }
                    else {

                        if (yetToAlign.length > 0) {
                            var remainingTasks1 = $.grep(yetToAlign, function (e: any) { return e.PlannedStart > startDate; });

                            var mindate = new Date(Math.min.apply(null, remainingTasks1.map(function (e) {
                                return new Date(e.PlannedStart);
                            })));
                            var mindate2 = moment(mindate).format('YYYY-MM-DD');
                            var AlignTask = $.grep(yetToAlign, function (e: any) { return Date.parse(moment(e.PlannedStart).format('YYYY-MM-DD')) == Date.parse(mindate2); });
                            Orderid = Orderid + 1;
                            // update flatCompareSecondData json with orderid based on AlignTask
                            //this.flatCompareSecondData.filter(x => x.TaskUId == flatCompareSecondDataRelease[j].TaskUId)[0].Orderid = Orderid;
                            //this.flatCompareSecondData.filter(x => x.TaskUId == flatCompareSecondDataRelease[j].TaskUId)[0].Rowid = heightPosition;
                            if (AlignTask.length > 0) {
                                AlignTask[0].Orderid = Orderid;
                                AlignTask[0].Rowid = heightPosition;

                                startDate = AlignTask[0].PlannedFinish;
                                AlignTask[0].PositionSettings = 1;
                            }
                            var remainingTasks1 = $.grep(yetToAlign, function (e: any) { return e.PlannedStart > startDate; });
                            if (remainingTasks1.length == 0) {
                                startDate = null;
                                heightPosition++;
                            }
                        }

                    }


                }
            }
        }
        //this.targetBuilderToolsCompareSecondData = this.getHierarchicalData(this.flatCompareSecondData, this.flatCompareSecondData[0].ParentTaskUId);
        if (this.flatCompareSecondData.length > 0) {
            this.targetBuilderToolsCompareSecondData = this.getHierarchicalData(this.flatCompareSecondData, this.flatCompareSecondData[0].ParentTaskUId);
        } else {
            this.targetBuilderToolsCompareSecondData = this.getHierarchicalData(this.flatCompareSecondData, 0);
        }
    }

    DivReziseCompareFirstData() {
        console.log('FormatDate' + this.timelineGridStartDate);
        console.log('FormatDate' + this.timelineGridEndDate);
        // var xScale: any = d3.time.scale().domain([new Date(this.timelineGridStartDate), new Date(this.timelineGridEndDate)]).range([0, 1700]);
        //  var xScale: any = d3.time.scale().domain([new Date(this.timelineGridStartDate), new Date(this.timelineGridEndDate)]).range([0, this.timeLineGridWidth]);
        var xScale: any = d3.time.scale().domain([new Date(this.timelinemonthdate), new Date(this.timelineGridEndDate)]).range([0, this.timeLineGridWidth]);

        var _this = this;
        this.flatCompareFirstData = this.flatCompareFirstData.sort(function (a, b) {
            return a.Orderid - b.Orderid;
        });
        $.each(this.flatCompareFirstData, function (i: any, d: any) {

            console.log(i + ": " + d.TaskUId);
            var startDate: any = d3.time.day.floor(new Date(d.PlannedStart));
            var endDate: any = d3.time.day.ceil(new Date(d.PlannedFinish));

            if (d.TaskType != "Initiative") {
                var checkPosition = $.grep(_this.flatCompareFirstData, function (e: any) { return e.ParentTaskUId == d.ParentTaskUId && e.Orderid < d.Orderid && e.Rowid == d.Rowid });

                if (checkPosition.length > 0) {
                    var minOrderId = _this.getMax(checkPosition, "Orderid");
                    var prevRel = $.grep(checkPosition, function (e: any) { return e.Orderid == minOrderId });
                    var prevDate = prevRel[0].PlannedFinish;
                    //var prevDate: any = _this.flatCompareFirstData.filter(i => i.ParentTaskUId == d.ParentTaskUId && i.Orderid == (d.Orderid - 1) && i.Rowid == d.Rowid)[0].PlannedFinish;
                    var startDate1: any = d3.time.day.floor(new Date(prevDate));
                    var calwidth1 = xScale(startDate) - xScale(startDate1);
                    $("#divCR1_" + d.TaskUId).parent().css("margin-left", calwidth1 - 18 + "px");
                }
                else {
                    var parentStartDate: any = _this.flatCompareFirstData.filter(i => i.TaskUId == d.ParentTaskUId)[0].PlannedStart;
                    var startDate2: any = d3.time.day.floor(new Date(parentStartDate));
                    var calwidth1 = xScale(startDate) - xScale(startDate2);
                    $("#divCR1_" + d.TaskUId).parent().css("margin-left", calwidth1 - 10 + "px");
                    $("#divCR1_" + d.TaskUId).parent().css("clear", "left");
                    //$("#divCR1_" + d.TaskUId).parent().offset({ left: xScale(startDate) - 10 });
                }
            }
            else {
                $("#divCR1_" + d.TaskUId).parent().offset({ left: xScale(startDate) });
                //$("#divCR1_" + d.TaskUId).parent().css("margin-left", xScale(startDate) - 10 + "px");
            }

            //$("#divCR1_" + d.TaskUId).parent().css({ left: xScale(startDate) - 10 });
            var calwidth = xScale(endDate) - xScale(startDate);
            $("#divCR1_" + d.TaskUId).parent().css("width", calwidth + "px");

            //$('#divCR1_' + d.TaskUId).parent().css({ 'display':'inline-block', 'position': 'absolute'});
            $("#divCR1_" + d.TaskUId).parent().css("background-color", d.BarColor);
            $("#divCR1_" + d.TaskUId + " .ngx-dnd-container").eq(0).css("border", "2px solid " + d.BarColor);

            //drag and drop each entity set the dynamic width to canvas.
            this.setDynamicCanvasheight();

            //set dynamic height for timeline bar 
            this.setDynamicTimelineheight();

            $("#divTitleCR1_" + d.TaskUId + "_" + d.TaskType.replace("/", "\\")).val(d.Title);
            $("#divTitleCR1_" + d.TaskUId + "_" + d.TaskType.replace("/", "\\")).css("font-family", "sans-serif");

            if (d.TaskType == "Sprint/Iteration" || d.TaskType == "Task") {
                $("#divCR1_" + d.TaskUId + " .ngx-dnd-container").eq(0).css("border", "none");
                $("#divCR1_" + d.TaskUId + " .ngx-dnd-container").eq(0).css("height", "10px");
            }
            //if (calwidth > 154) {
            //    $("#divTitleCR1_" + d.TaskUId + "_" + d.TaskType).parent().css('width', 'auto');
            //}
            //else {
            //    $("#divTitleCR1_" + d.TaskUId + "_" + d.TaskType).parent().css('width', 98 + 'px');
            //}          

            switch (d.BarFontSize) {
                case "Small":
                    {
                        this.displayFontSize = "x-small";
                        $("#divTitleCR1_" + d.TaskUId + "_" + d.TaskType.replace("/", "\\")).attr('style', 'padding-top: 9px !important');
                        break;
                    }
                case "Medium":
                    {
                        this.displayFontSize = "medium";
                        $("#divTitleCR1_" + d.TaskUId + "_" + d.TaskType.replace("/", "\\")).attr('style', 'padding-top: 4px !important');
                        break;
                    }
                case "Large":
                    {
                        this.displayFontSize = "large";
                        $("#divTitleCR1_" + d.TaskUId + "_" + d.TaskType.replace("/", "\\")).attr('style', 'padding-top: 2px !important');
                        break;
                    }
                case "Excel":
                    {
                        this.displayFontSize = "x-large";
                        $("#divTitleCR1_" + d.TaskUId + "_" + d.TaskType.replace("/", "\\")).attr('style', 'padding-top: 0px !important');
                        break;
                    }
                default:
                    {
                        this.displayFontSize = "small";
                        break;
                    }
            }

            $("#divTitleCR1_" + d.TaskUId + "_" + d.TaskType.replace("/", "\\")).css("font-size", this.displayFontSize);

            ////window.event.stopImmediatePropagation();
        });

        console.log(this.MilestoneFlat);

        $.each(this.MilestoneFlat, function (i: any, d: any) {
            console.log(i + ": " + d.TaskUId);
            if (d.BaselineStartDate != undefined) {
                var milestonesContainer = $.grep(_this.flatCompareFirstData, function (e: any) { return e.TaskUId == d.ParentTaskUId });
                if (milestonesContainer != undefined && milestonesContainer.length > 0) {
                    var msd = milestonesContainer[0].PlannedStart;
                }
                var startDate: any = d3.time.day.floor(new Date(msd));
                var endDate: any = d3.time.day.ceil(new Date(d.BaselineStartDate));

                var calwidth = xScale(endDate) - xScale(startDate) - 15;
                var l = 'left+' + calwidth + ' top';
                $("#img_" + d.TaskUId).position({ my: 'left top-20', at: l, of: '#divCR1_' + d.ParentTaskUId, collision: "none" });
            }
            else {
                $("#img_" + d.TaskUId).position({
                    my: 'right top-20', at: 'right+25 top', of: '#divCR1_' + d.ParentTaskUId, collision: "none"
                });
            }

            //if (d.LegendIcon == 'Redflag')
            var src: any;

            var milestoneStyle = 'redflag';
            if (_this.settingsAppliedData != undefined && _this.settingsAppliedData.MilestoneStyle != undefined) {
                milestoneStyle = _this.settingsAppliedData.MilestoneStyle;
            }

            if (d.LegendIcon != undefined) {
                if (d.LegendIcon.toLowerCase() == 'greensquare')
                    src = "./images/greensquare.png";
                else if (d.LegendIcon.toLowerCase() == 'bluediamond')
                    src = "./images/bluediamond.png";
                else if (d.LegendIcon.toLowerCase() == 'yellowstar')
                    src = "./images/yellowstar.png";
                else
                    src = "./images/redflag.png";
            }
            else {
                if (milestoneStyle.toLowerCase().indexOf('greensquare') > -1)
                    src = "./images/greensquare.png";
                else if (milestoneStyle.toLowerCase().indexOf('bluediamond') > -1)
                    src = "./images/bluediamond.png";
                else if (milestoneStyle.toLowerCase().indexOf('yellowstar') > -1)
                    src = "./images/yellowstar.png";
                else
                    src = "./images/redflag.png";

                d.LegendIcon = src.split('/')[2].split('.')[0];
            }

            if (d.ActionType == "Deleted") {
                $("#img_" + d.TaskUId).remove();
            }
            else {
                $("#img_" + d.TaskUId).attr("src", src);
                $("#img_" + d.TaskUId).prop("title", d.Title + "  " + d.BaselineStartDate);
            }
        });
        if ($("#testsvg1").children().length == 4) {
            $("#testsvg1").children().eq(2).remove();
        }
        if (this.isCompare) {
            $("#noncomparediv").remove();
        }
        $(".ngx-dnd-item").css("pointer-events", "none");
        $(".section-image").css("pointer-events", "auto");
    }

    DivReziseCompareSecondData() {
        console.log('FormatDate' + this.timelineGridStartDate);
        console.log('FormatDate' + this.timelineGridEndDate);
        // var xScale: any = d3.time.scale().domain([new Date(this.timelineGridStartDate), new Date(this.timelineGridEndDate)]).range([0, 1700]);
        //  var xScale: any = d3.time.scale().domain([new Date(this.timelineGridStartDate), new Date(this.timelineGridEndDate)]).range([0, this.timeLineGridWidth]);
        var xScale: any = d3.time.scale().domain([new Date(this.timelinemonthdate), new Date(this.timelineGridEndDate)]).range([0, this.timeLineGridWidth]);

        var _this = this;
        this.flatCompareSecondData = this.flatCompareSecondData.sort(function (a, b) {
            return a.Orderid - b.Orderid;
        });
        $.each(this.flatCompareSecondData, function (i: any, d: any) {

            console.log(i + ": " + d.TaskUId);
            var startDate: any = d3.time.day.floor(new Date(d.PlannedStart));
            var endDate: any = d3.time.day.ceil(new Date(d.PlannedFinish));

            if (d.TaskType != "Initiative") {
                var checkPosition = $.grep(_this.flatCompareSecondData, function (e: any) { return e.ParentTaskUId == d.ParentTaskUId && e.Orderid < d.Orderid && e.Rowid == d.Rowid });

                if (checkPosition.length > 0) {
                    var minOrderId = _this.getMax(checkPosition, "Orderid");
                    var prevRel = $.grep(checkPosition, function (e: any) { return e.Orderid == minOrderId });
                    var prevDate = prevRel[0].PlannedFinish;
                    //var prevDate: any = _this.flatCompareSecondData.filter(i => i.ParentTaskUId == d.ParentTaskUId && i.Orderid == (d.Orderid - 1) && i.Rowid == d.Rowid)[0].PlannedFinish;
                    var startDate1: any = d3.time.day.floor(new Date(prevDate));
                    var calwidth1 = xScale(startDate) - xScale(startDate1);
                    $("#divCR2_" + d.TaskUId).parent().css("margin-left", calwidth1 - 18 + "px");
                }
                else {
                    var parentStartDate: any = _this.flatCompareSecondData.filter(i => i.TaskUId == d.ParentTaskUId)[0].PlannedStart;
                    var startDate2: any = d3.time.day.floor(new Date(parentStartDate));
                    var calwidth1 = xScale(startDate) - xScale(startDate2);
                    $("#divCR2_" + d.TaskUId).parent().css("margin-left", calwidth1 - 10 + "px");
                    $("#divCR2_" + d.TaskUId).parent().css("clear", "left");
                    //$("#divCR2_" + d.TaskUId).parent().offset({ left: xScale(startDate) - 10 });
                }
            }
            else {
                $("#divCR2_" + d.TaskUId).parent().offset({ left: xScale(startDate) });
                //$("#divCR2_" + d.TaskUId).parent().css("margin-left", xScale(startDate) - 10 + "px");
            }

            //$("#divCR2_" + d.TaskUId).parent().css({ left: xScale(startDate) - 10 });
            var calwidth = xScale(endDate) - xScale(startDate);
            $("#divCR2_" + d.TaskUId).parent().css("width", calwidth + "px");

            //$('#divCR2_' + d.TaskUId).parent().css({ 'display':'inline-block', 'position': 'absolute'});
            $("#divCR2_" + d.TaskUId).parent().css("background-color", d.BarColor);
            $("#divCR2_" + d.TaskUId + " .ngx-dnd-container").eq(0).css("border", "2px solid " + d.BarColor);


            $("#divTitleCR2_" + d.TaskUId + "_" + d.TaskType.replace("/", "\\")).val(d.Title);
            $("#divTitleCR2_" + d.TaskUId + "_" + d.TaskType.replace("/", "\\")).css("font-family", "sans-serif");

            if (d.TaskType == "Sprint/Iteration" || d.TaskType == "Task") {
                $("#divCR2_" + d.TaskUId + " .ngx-dnd-container").eq(0).css("border", "none");
                $("#divCR2_" + d.TaskUId + " .ngx-dnd-container").eq(0).css("height", "10px");
            }
            //if (calwidth > 154) {
            //    $("#divTitleCR2_" + d.TaskUId + "_" + d.TaskType).parent().css('width', 'auto');
            //}
            //else {
            //    $("#divTitleCR2_" + d.TaskUId + "_" + d.TaskType).parent().css('width', 98 + 'px');
            //}          

            switch (d.BarFontSize) {
                case "Small":
                    {
                        this.displayFontSize = "x-small";
                        $("#divTitleCR2_" + d.TaskUId + "_" + d.TaskType.replace("/", "\\")).attr('style', 'padding-top: 9px !important');
                        break;
                    }
                case "Medium":
                    {
                        this.displayFontSize = "medium";
                        $("#divTitleCR2_" + d.TaskUId + "_" + d.TaskType.replace("/", "\\")).attr('style', 'padding-top: 4px !important');
                        break;
                    }
                case "Large":
                    {
                        this.displayFontSize = "large";
                        $("#divTitleCR2_" + d.TaskUId + "_" + d.TaskType.replace("/", "\\")).attr('style', 'padding-top: 2px !important');
                        break;
                    }
                case "Excel":
                    {
                        this.displayFontSize = "x-large";
                        $("#divTitleCR2_" + d.TaskUId + "_" + d.TaskType.replace("/", "\\")).attr('style', 'padding-top: 0px !important');
                        break;
                    }
                default:
                    {
                        this.displayFontSize = "small";
                        break;
                    }
            }

            $("#divTitleCR2_" + d.TaskUId + "_" + d.TaskType.replace("/", "\\")).css("font-size", this.displayFontSize);

            ////window.event.stopImmediatePropagation();
        });

        console.log(this.MilestoneFlat);

        $.each(this.MilestoneFlat, function (i: any, d: any) {
            console.log(i + ": " + d.TaskUId);
            if (d.BaselineStartDate != undefined) {
                var milestonesContainer = $.grep(_this.flatCompareSecondData, function (e: any) { return e.TaskUId == d.ParentTaskUId });
                if (milestonesContainer != undefined && milestonesContainer.length > 0) {
                    var msd = milestonesContainer[0].PlannedStart;
                }
                var startDate: any = d3.time.day.floor(new Date(msd));
                var endDate: any = d3.time.day.ceil(new Date(d.BaselineStartDate));

                var calwidth = xScale(endDate) - xScale(startDate) - 15;
                var l = 'left+' + calwidth + ' top';
                $("#img_" + d.TaskUId).position({ my: 'left top-20', at: l, of: '#divCR2_' + d.ParentTaskUId, collision: "none" });
            }
            else {
                $("#img_" + d.TaskUId).position({
                    my: 'right top-20', at: 'right+25 top', of: '#divCR2_' + d.ParentTaskUId, collision: "none"
                });
            }

            //if (d.LegendIcon == 'Redflag')
            var src: any;

            var milestoneStyle = 'redflag';
            if (_this.settingsAppliedData != undefined && _this.settingsAppliedData.MilestoneStyle != undefined) {
                milestoneStyle = _this.settingsAppliedData.MilestoneStyle;
            }

            if (d.LegendIcon != undefined) {
                if (d.LegendIcon.toLowerCase() == 'greensquare')
                    src = "./images/greensquare.png";
                else if (d.LegendIcon.toLowerCase() == 'bluediamond')
                    src = "./images/bluediamond.png";
                else if (d.LegendIcon.toLowerCase() == 'yellowstar')
                    src = "./images/yellowstar.png";
                else
                    src = "./images/redflag.png";
            }
            else {
                if (milestoneStyle.toLowerCase().indexOf('greensquare') > -1)
                    src = "./images/greensquare.png";
                else if (milestoneStyle.toLowerCase().indexOf('bluediamond') > -1)
                    src = "./images/bluediamond.png";
                else if (milestoneStyle.toLowerCase().indexOf('yellowstar') > -1)
                    src = "./images/yellowstar.png";
                else
                    src = "./images/redflag.png";

                d.LegendIcon = src.split('/')[2].split('.')[0];
            }

            if (d.ActionType == "Deleted") {
                $("#img_" + d.TaskUId).remove();
            }
            else {
                $("#img_" + d.TaskUId).attr("src", src);
                $("#img_" + d.TaskUId).prop("title", d.Title + "  " + d.BaselineStartDate);
            }
        });
        if ($("#testsvg1").children().length == 4) {
            $("#testsvg1").children().eq(2).remove();
        }
        if (this.isCompare) {
            $("#noncomparediv").remove();
        }
        $(".ngx-dnd-item").css("pointer-events", "none");
        $(".section-image").css("pointer-events", "auto");
        this.execDivResizeCompareData = false;
    }

    LoadRoadmap(deliveryConstructUId: any, roadMapUId: any, latestRoadMap: any) {
        var _this = this;
        if (latestRoadMap != undefined) {
            _this.isParentRoadmap = (latestRoadMap.DeliveryConstructUId != deliveryConstructUId);
            _this.savedRoadmapSettingsData = latestRoadMap;
            _this.savedRoadmapSettingsData.ActionType = "Modified";
            _this.savedRoadmapSettingsData.strObjectId = latestRoadMap._id;
            _this.savedRoadmapSettingsData.DisplayGrids = 2;
            _this.savedRoadmapSettingsData.TimelineStyle = 2;
            _this.savedRoadmapSettingsData.TimelineMonthstoDisplay = 12;
            _this.timelineGridStartMonth = _this.savedRoadmapSettingsData.TimelineStartMonth;
            //var date1 = new Date(_this.savedRoadmapSettingsData.TimelineStartDate)
            //date1.setDate(0);
            //this.timelineGridStartDate = this.ConvertDateTimeToString(date1.toDateString())
            //_this.timelineGridEndDate = _this.savedRoadmapSettingsData.TimelineEndDate;
            /// _this.timelineGridStartDate = _this.savedRoadmapSettingsData.TimelineStartDate;
            var tempDate1 = new Date(_this.savedRoadmapSettingsData.TimelineStartDate);
            tempDate1.setDate(-1);
            //_this.timelineGridStartDate = this.ConvertDateTimeToString(tempDate1.toDateString());
            _this.timelinemonthdate = this.ConvertDateTimeToString(tempDate1.toDateString());

            _this.timelineGridEndDate = _this.savedRoadmapSettingsData.TimelineEndDate;
            this.global["ROADMAPSETTINGSFLAT"] = _this.savedRoadmapSettingsData;
            this.settingsAppliedData = _this.savedRoadmapSettingsData;
            this.global["TITLEFORBASE"] = _this.savedRoadmapSettingsData.Title; // added by mounika
            this.global["ExsistingTimeLineStartDate"] = _this.savedRoadmapSettingsData.TimelineStartDate;
            this.global["ExsistingTimelineEndDate"] = _this.savedRoadmapSettingsData.TimelineEndDate;
            _this.roadMapAssociatedDeliveryConstructId = _this.savedRoadmapSettingsData.DeliveryConstructUId;
            if (latestRoadMap.RoadMapMappingList != null || latestRoadMap.RoadMapMappingList != "null") {
                var childData = latestRoadMap.RoadMapMappingList;
            }
            if (latestRoadMap.RoadMapDependencyList != null || latestRoadMap.RoadMapDependencyList != "null") {
                var dependencyData = latestRoadMap.RoadMapDependencyList;
            }
            for (var i = 0; i < childData.length; i++) {
                var taskType = childData[i].TaskType;
                if (taskType == "Initiative" || taskType == "Release" || taskType == "Iteration" || taskType == "FunctionalArea" || taskType == "Phase" || taskType == "Sprint/Iteration" || taskType == "Task") {
                    childData[i].InputType = "section";
                    if (taskType == "Initiative") {
                        var associativescopeselectorName = this.global["selectedScopeLevel"] != undefined ? this.global["selectedScopeLevel"].filter(a => a.DeliveryConstructUID == childData[i].AssociativescopeselectorId) : null;
                        childData[i].Associativescopeselector = associativescopeselectorName.length > 0 ? associativescopeselectorName[0].Name : null;
                    }
                } else {
                    childData[i].InputType = "string";
                }
                if (childData[i].CreatedBy == this.cUser) {
                    childData[i].isEnabled = true;
                }
                else {
                    childData[i].isEnabled = false;
                    this.disableTaskUIds.push(childData[i].TaskUId);
                }

                var selected = this.global["selectedScopeLevel"].find(x => x.SelectedIndex == 'Final');
                if (this.global[taskType + 'AccessPrivilege'] && this.global[taskType + 'AccessPrivilege'].AccessPrivilegeCode == 'R') {
                    childData[i].isEnabled = false;
                }
            }
            _this.global["COPYVERSION"] = childData[0].CopyVersion;
            _this.targetBuilderTools = _this.getHierarchicalData(childData, childData[0].ParentTaskUId);
            _this.SetEntitySubMenu(_this.targetBuilderTools);
            _this.flat = _this.getFlat(_this.targetBuilderTools, 0);
            if (_this.flat.length > 0) {
                this.isRoadMapLoaded = true;
            }
            else {
                this.isRoadMapLoaded = false;
            }
            _this.DependencyFlat = dependencyData;
            _this.global["DEPENDENCYFLAT"] = _this.DependencyFlat;
            //_this.HideDeleteButtonInDependency();
            _this.global["PROGRESSFILTER"] = _this.flat;

            //this.ResetDependencyLine();

            if (_this.flat.filter(x => x.TaskType == "Milestone").length > 0) {
                let milestoneData = _this.flat.filter(x => x.TaskType == "Milestone");
                this.rendertimeline();
                _this.MilestoneFlat = milestoneData;
                _this.global["MILESTONEFILTERFLAT"] = milestoneData;
                _this.flat = _this.flat.filter(x => x.TaskType != "Milestone");
                _this.targetBuilderTools = _this.getHierarchicalData(_this.flat, _this.flat[0].ParentTaskUId);
            }
            _this.global["FILTERRESETFLAT"] = _this.flat;
            //this.global["ISCOPIED"] = false;
            _this.ValidateSourceBuilderTools();
            _this.orderFlatJson();
            //localStorage.setItem('flatJSONData', JSON.stringify(_this.flat));            

            this.execDivResize = true;
            if (this.disableTaskUIds.length > 0) {
                this.global["DISABLETASKUIDS"] = this.disableTaskUIds;
                this.DisableContainerDrag();
            }
            //  console.log(latestRoadMap);
            this.rendertimeline();
        }
        else {

            this.roadmapAssistantService.GetRoadmapData(deliveryConstructUId, roadMapUId).subscribe((response) => {

                if (response != null) {
                    if (response.length >= 0) {
                        // this.isRoadMapLoaded = true;
                        _this.isParentRoadmap = (response[0].DeliveryConstructUId != deliveryConstructUId);
                        _this.savedRoadmapSettingsData = response[0];
                        _this.savedRoadmapSettingsData.ActionType = "Modified";
                        _this.savedRoadmapSettingsData.strObjectId = response[0]._id;
                        _this.savedRoadmapSettingsData.DisplayGrids = 2;
                        _this.savedRoadmapSettingsData.TimelineStyle = 2;
                        _this.savedRoadmapSettingsData.TimelineMonthstoDisplay = 12;
                        _this.timelineGridStartMonth = _this.savedRoadmapSettingsData.TimelineStartMonth;
                        // _this.timelineGridStartDate = _this.savedRoadmapSettingsData.TimelineStartDate;
                        //var date1 = new Date(_this.savedRoadmapSettingsData.TimelineStartDate)
                        //date1.setDate(0);
                        //this.timelineGridStartDate = this.ConvertDateTimeToString(date1.toDateString())
                        //_this.timelineGridEndDate = _this.savedRoadmapSettingsData.TimelineEndDate;
                        // _this.timelineGridStartDate = _this.savedRoadmapSettingsData.TimelineStartDate;
                        var tempDate1 = new Date(_this.savedRoadmapSettingsData.TimelineStartDate);
                        tempDate1.setDate(-1);
                        // _this.timelineGridStartDate = this.ConvertDateTimeToString(tempDate1.toDateString());
                        _this.timelinemonthdate = this.ConvertDateTimeToString(tempDate1.toDateString());

                        _this.timelineGridEndDate = _this.savedRoadmapSettingsData.TimelineEndDate;
                        this.global["ROADMAPSETTINGSFLAT"] = _this.savedRoadmapSettingsData;
                        this.settingsAppliedData = _this.savedRoadmapSettingsData;
                        this.global["TITLEFORBASE"] = _this.savedRoadmapSettingsData.Title; // added by mounika
                        _this.roadMapAssociatedDeliveryConstructId = response[0].DeliveryConstructUId;
                        this.global["ExsistingTimeLineStartDate"] = _this.savedRoadmapSettingsData.TimelineStartDate;
                        this.global["ExsistingTimelineEndDate"] = _this.savedRoadmapSettingsData.TimelineEndDate;
                        if (response[0].RoadMapMappingList != null || response[0].RoadMapMappingList != "null") {
                            var childData = response[0].RoadMapMappingList;
                        }
                        if (response[0].RoadMapDependencyList != null || response[0].RoadMapDependencyList != "null") {
                            var dependencyData = response[0].RoadMapDependencyList;
                        }
                        for (var i = 0; i < childData.length; i++) {
                            var taskType = childData[i].TaskType;
                            if (taskType == "Initiative" || taskType == "Release" || taskType == "Iteration" || taskType == "FunctionalArea" || taskType == "Phase" || taskType == "Sprint/Iteration" || taskType == "Task") {
                                childData[i].InputType = "section";
                            } else {
                                childData[i].InputType = "string";
                            }
                            if (childData[i].CreatedBy == this.cUser) {
                                childData[i].isEnabled = true;
                            }
                            else {
                                childData[i].isEnabled = false;
                                this.disableTaskUIds.push(childData[i].TaskUId);
                            }
                            if (taskType == "Initiative" || taskType == "Release" || taskType == "Iteration" || taskType == "FunctionalArea" || taskType == "Phase" || taskType == "Sprint/Iteration" || taskType == "Task") {
                                childData[i].InputType = "section";
                                if (childData[i].TaskType == "Initiative") {
                                    var associativescopeselectorName = this.global["selectedScopeLevel"] != undefined ? this.global["selectedScopeLevel"].filter(a => a.DeliveryConstructUID == childData[i].AssociativescopeselectorId) : null;
                                    childData[i].Associativescopeselector = associativescopeselectorName.length > 0 ? associativescopeselectorName[0].Name : null;
                                }
                            } else {
                                childData[i].InputType = "string";
                            }
                            if (this.global[taskType + 'AccessPrivilege'] && this.global[taskType + 'AccessPrivilege'].AccessPrivilegeCode == 'R') {
                                childData[i].isEnabled = false;
                            }
                        }
                        this.global["COPYVERSION"] = childData[0].CopyVersion;
                        _this.targetBuilderTools = _this.getHierarchicalData(childData, childData[0].ParentTaskUId);
                        _this.SetEntitySubMenu(_this.targetBuilderTools);
                        _this.flat = _this.getFlat(_this.targetBuilderTools, 0);
                        if (_this.flat.length > 0) {
                            this.isRoadMapLoaded = true;
                        }
                        $("#hiddentasks").val(JSON.stringify(_this.flat));
                        _this.DependencyFlat = dependencyData;
                        _this.global["DEPENDENCYFLAT"] = _this.DependencyFlat;
                        // _this.HideDeleteButtonInDependency();
                        _this.global["PROGRESSFILTER"] = _this.flat;
                        //this.ResetDependencyLine();

                        if (_this.flat.filter(x => x.TaskType == "Milestone").length > 0) {
                            let milestoneData = _this.flat.filter(x => x.TaskType == "Milestone");
                            this.rendertimeline();
                            _this.MilestoneFlat = milestoneData;
                            _this.global["MILESTONEFILTERFLAT"] = milestoneData;
                            _this.flat = _this.flat.filter(x => x.TaskType != "Milestone");
                            _this.targetBuilderTools = _this.getHierarchicalData(_this.flat, _this.flat[0].ParentTaskUId);
                        }
                        _this.global["FILTERRESETFLAT"] = _this.flat;
                        //this.global["ISCOPIED"] = false;
                        _this.ValidateSourceBuilderTools();
                        _this.orderFlatJson();
                        //localStorage.setItem('flatJSONData', JSON.stringify(_this.flat));
                        this.execDivResize = true;
                        if (this.disableTaskUIds.length > 0) {
                            this.global["DISABLETASKUIDS"] = this.disableTaskUIds;
                            this.DisableContainerDrag();
                        }
                        // console.log(response);
                        this.roadMapName = response[0].Title;
                    }
                }
                this.rendertimeline();
                let pageNameparams = this.activatedRoute.snapshot.params.page;
                if (pageNameparams !== undefined) {
                    this.ShowPages(pageNameparams);
                }
            }, error => {
                this.spinner.hide();
                console.log(error);
            });
        }
    }

    SetEntitySubMenu(targetBuilderTools: any) {
        var _this = this;
        targetBuilderTools.forEach(function (entity) {
            if (_this.isParentRoadmap || (_this.global[entity.TaskType + 'AccessPrivilege'] && _this.global[entity.TaskType + 'AccessPrivilege'].AccessPrivilegeCode == 'RW')) {
                entity.Submenu = ["Edit"];
            } else {
                entity.Submenu = ["Edit", "Copy", "Delete", "Baseline"];
            }

            if (_this.isParentRoadmap && entity.isEnabled) {
                if (entity.TaskType == 'Initiative') {
                    _this.isAssociated = (entity.AssociativescopeselectorId == _this.deliveryConstructUId);
                }
                entity.isEnabled = _this.isAssociated;
            }

            if (entity.Children && entity.Children.length > 0) {
                _this.SetEntitySubMenu(entity.Children);
            }
        });
    }

    GetRoadMapCount(deliveryConstructUId: any) {
        var _this = this;
        if (this.global["ROADMAPSETTINGSFLAT"] != undefined) {
            this.isDisabledButton = false;
            this.isDisabledNewButton = false;
        }
        else {
            _this.roadmapAssistantService.GetRoadmapData(deliveryConstructUId, null).subscribe((response) => {
                this.roadmapLength = response.length;
                if (!response || response.length == 0) {
                    this.isRoadMapLoaded = false;
                    this.isDisabledButton = true;

                    this.TemplateUId = "10000000-0000-0000-0000-000000000000";
                    this.NewRoadmapClick();
                    this.TemplateUId = "";
                }
                else {
                    // this.isRoadMapLoaded = true;
                    this.isDisabledButton = false;
                    this.isDisabledNewButton = false;
                    if (this.TemplateUId == "" || this.TemplateUId == undefined) {
                        this.ClearDependency();
                        this.LoadRoadmap(deliveryConstructUId, response[0].RoadmapUId, response[0]);
                        this.global["ROADMAPUID"] = response[0].RoadmapUId;
                        this.roadMapUUId = response[0].RoadmapUId;
                        this.isEdit = true;
                        this.isDisabledSaveButton = true;
                        this.isCompareButtonEnable = true;
                        this.roadMapName = response[0].Title;
                    }
                    else {
                        _this.SetEntityAccessPrivileges();
                    }
                }

            }, error => {
                this.spinner.hide();
                console.log(error);
            });
        }


    }

    GetRoadMapCountForOpen(deliveryConstructUId: any) {
        var _this = this;
        _this.roadmapAssistantService.GetRoadmapData(deliveryConstructUId, null).subscribe((response) => {
            if (!response || response.length == 0) {
                this.isRoadMapLoaded = true;
                this.isDisabledButton = true;
            }
            this.SavedRoadMapsNavigate();
        });
    }
    //ZoomOut() {
    //    console.log("sss");
    //}

    DisableContainerDrag() {
        if ($('.timeline-container').is(':visible')) { //if the container is visible on the page
            var tasks = _this.global["DISABLETASKUIDS"];
            for (let i = 0; i < tasks.length; i++) {
                $("#div_" + tasks[i]).parent().css("pointer-events", "none");
            }
        } else {
            var _this = this;
            setTimeout(this.DisableContainerDrag, 50); //wait 50 ms, then try again
        }
    }

    NewRoadmapClick() {
        //$('.ngx-dnd-container.gu-empty').css('height', '100%!important');        
        //this.RoadMapFilterComponent.FilterDisable();
        var _this = this;
        //this.modalOption.backdrop = false;
        //this.modalOption.size = 'lg';
        //this.modalOption.keyboard = false;
        //const modalRef = this.modalService.open(RoadmapTemplates, this.modalOption);
        //const modalRef = this.modalService.open(RoadmapTemplates, { windowClass: "xlmyClass" });


        //modalRef.result.then((result: any) => {
        if (this.TemplateUId == "10000000-0000-0000-0000-000000000000") {
            this.roadMapUUId = UUID.UUID();
            _this.targetBuilderTools = [];
            _this.flat = [];
            this.ClearDependency();
            this.global["ROADMAPUID"] = this.roadMapUUId;
            this.savedRoadmapSettingsData = null;
            this.global["ACTIONTYPE"] = "Added";
            this.global["INITIATIVEFLAT"] = null;
            this.global["RELEASEFLAT"] = null;
            this.global["ITERATIONFLAT"] = null;
            this.global["PHASEFLAT"] = null;
            this.global["TASKFLAT"] = null;
            this.global["SPRINTFLAT"] = null;
            this.global["ROADMAPSETTINGSFLAT"] = null;
            this.global["FUNCTIONALFLAT"] = null;
            this.global["MILESTONEFLAT"] = null;
            this.global["BASELINEFLAT"] = null;
            this.global["DEPENDENCYFLAT"] = null;            
            this.global["PROGRESSFILTER"] = null;
            this.global["COPYVERSION"] = null;
            if (this.settingComp != undefined) {
                this.settingComp.isError = false;
                this.settingComp.isSaved = false;
            }
        }
        // });
        this.showHistory = false;
        this.showBaselineTab = false;
        //this.showBaselineInitiativeTab = false;
        this.showEditInitiative = false;
        this.showEditRelease = false;
        this.showEditPhase = false;
        this.showEditTask = false;
        this.showEditIteration = false;
        this.showAddEditSprint = false;
        this.showEditMilestone = false;
        this.showExport = false;
    }

    NewRoadmapButtonClick(): void {
        if (this.isDisabledNewButton == true) {
            return;
        }
        this.global["TITLEFORBASE"] = "";
        var deliveryConstructUId = this.global['DeliveryConstructUId'];
        this.global["ISFILTERED"] = false;
        //$(".ClearFilterHide").css('pointer-events', 'none');
        //$(".ApplyFilterHide").css('pointer-events', 'none');
        //$(".filterAppliedIcon").hide();
        if (deliveryConstructUId != "" && deliveryConstructUId != undefined && deliveryConstructUId != '') {
            this.router.navigate(['/DeliveryConstruct', deliveryConstructUId, 'NewRoadMap']);
        }
        else {
            let modalOption: NgbModalOptions = {};
            modalOption.backdrop = 'static';
            modalOption.size = 'lg';
            modalOption.keyboard = false;
            modalOption.centered = true;

            const modalRef = this.modalService.open(RoadmapPromptTemplates, modalOption);
            modalRef.componentInstance.headerText = "Alert"
            modalRef.componentInstance.promptModalMessage = "Please select any Delivery Construct from the scope selector";
        }
    }

    canDeactivate(clickType: any): Promise<boolean> | boolean {
        ////if (this.savedRoadmapSettingsData != null && ($('#Title').hasClass('ng-dirty') || $('#Description').hasClass('ng-dirty')||
        ////                   $('input[name="BarColor"]').hasClass('ng-dirty') || $('input[name="BarSize"]').hasClass('ng-dirty')||
        ////                   $('#BarFontSize').hasClass('ng-dirty')) || $('input[name="LineSize"]').hasClass('ng-dirty')) {
        ////    return this.dialogService.confirm('Are you sure you want to continue? Any unsaved changes will be lost.');
        ////}
        this.toastrService.dismissAllToastr();
        if (this.ProgressFilterComponent != undefined) {
            this.ProgressFilterComponent.CloseFilter();
        }
        $('.filterAppliedIcon').hide();
        if (this.global["isUnSavedData"]) {
            let modalOption: NgbModalOptions = {};
            modalOption.backdrop = 'static';
            modalOption.size = 'lg';
            modalOption.keyboard = false;
            modalOption.centered = true;
            const modalRef = this.modalService.open(ConfirmPromptModal, modalOption);
            modalRef.componentInstance.headerText = "Navigation without save";
            modalRef.componentInstance.confirmationMessage = "The roadmap is not saved yet, would you like to navigate without saving roadmap? Please confirm";
            let result = false;
            modalRef.result.then((isConfirmed: any) => {
                if (isConfirmed) {
                    this.global["isUnSavedData"] = false;

                    switch (clickType) {
                        case "New": {
                            this.ClearDependency();
                            this.NewRoadmapButtonClick();
                            break;
                        }

                        case "Open": {
                            this.ClearDependency();
                            this.GetRoadMapCountForOpen(this.deliveryConstructUId);
                            break;
                        }

                        //case "Baseline": {
                        //    this.ShowBaseline();
                        //    break;
                        //}

                        case "Export": {
                            this.ClearDependency();
                            this.SavedRoadMapsExport();
                            break;
                        }

                        case "History": {
                            this.ShowHistory();
                            break;
                        }

                        case "Compare": {
                            this.ClearDependency();
                            this.OpenCompare();
                            break;
                        }

                        case "Home": {
                            this.ClearDependency();
                            this.NavigateToMainPage();
                            break;
                        }

                        case "ProgressBarTab": {
                            this.ClearDependency();
                            this.ShowPages('ProgressBarTab');
                            break;
                        }

                        case "ForecastTab": {
                            this.ClearDependency();
                            this.ShowPages('ForecastTab');
                            break;
                        }
                    }
                }
                else {
                    result = false;
                }

            });

            return result;
        }
        else {
            switch (clickType) {
                case "New": {
                    this.ClearDependency();
                    this.NewRoadmapButtonClick();
                    break;
                }

                case "Open": {
                    this.ClearDependency();
                    this.SavedRoadMapsNavigate();
                    break;
                }

                //case "Baseline": {
                //    this.ShowBaseline();
                //    break;
                //}

                case "Export": {
                    this.ClearDependency();
                    this.SavedRoadMapsExport();
                    break;
                }

                case "History": {
                    this.ShowHistory();
                    break;
                }

                case "Compare": {
                    this.ClearDependency();
                    this.OpenCompare();
                    break;
                }

                case "Home": {
                    this.ClearDependency();
                    this.NavigateToMainPage();
                    break;
                }

                case "ProgressBarTab": {
                    this.ClearDependency();
                    this.ShowPages('ProgressBarTab');
                    break;
                }

                case "ForecastTab": {
                    this.ClearDependency();
                    this.ShowPages('ForecastTab');
                    break;
                }
            }

        }
    }

    confirmMessage(message?: string) {
        if (confirm(message)) {
            this.global["isUnSavedData"] = false;
            return true;
        }
        else {
            return false;
        }
        //const m = this.ngbModal.open(Confirmation);
        //m.componentInstance.confMessage = message || 'Is it OK?';
        //return m.result;
    };

    SavedRoadMapsNavigate() {
        if (this.isDisabledButton == true && this.global['DeliveryConstructUId']) {
            let modalOption: NgbModalOptions = {};
            modalOption.backdrop = 'static';
            modalOption.size = 'lg';
            modalOption.keyboard = false;
            modalOption.centered = true;

            const modalRef = this.modalService.open(RoadmapPromptTemplates, modalOption);
            modalRef.componentInstance.headerText = "Alert";
            modalRef.componentInstance.promptModalMessage = "No Roadmaps to be displayed";
        }
        else {
            var deliveryConstructUId = this.global['DeliveryConstructUId'];
            if (deliveryConstructUId != "" && deliveryConstructUId != undefined && deliveryConstructUId != '') {
                this.global["ISFILTERED"] = false;
                this.router.navigate(['/DeliveryConstruct', deliveryConstructUId, 'SavedRoadMaps']);
            }
            else {
                let modalOption: NgbModalOptions = {};
                modalOption.backdrop = 'static';
                modalOption.size = 'lg';
                modalOption.keyboard = false;
                modalOption.centered = true;

                const modalRef = this.modalService.open(RoadmapPromptTemplates, modalOption);
                modalRef.componentInstance.headerText = "Alert"
                modalRef.componentInstance.promptModalMessage = "Please select any Delivery Construct from the scope selector";
            }

            //if (deliveryConstructUId != "" ) {
            //    this.router.navigate(['/DeliveryConstructUId', deliveryConstructUId, 'SavedRoadMaps']);
            //}
            //else {
            //    this.router.navigate(['SavedRoadMaps']);
            //}
        }
        //var deliveryConstructUId = this.global['DELIVERYCONSTRUCTUID'] != null ? this.global['DELIVERYCONSTRUCTUID'] : "";
        //this.router.navigate(['SavedRoadMaps']);

        //if (deliveryConstructUId != "" ) {
        //    this.router.navigate(['/DeliveryConstructUId', deliveryConstructUId, 'SavedRoadMaps']);
        //}
        //else {
        //    this.router.navigate(['SavedRoadMaps']);
        //}
    }


    SavedRoadMapsExport() {
        if (this.isDisabledButton == true) {
            let modalOption: NgbModalOptions = {};
            modalOption.backdrop = 'static';
            modalOption.size = 'lg';
            modalOption.keyboard = false;
            modalOption.centered = true;

            const modalRef = this.modalService.open(RoadmapPromptTemplates, modalOption);
            //modalRef.componentInstance.headerText = "Alert";
            modalRef.componentInstance.promptModalMessage = "No Roadmaps to be displayed";
        }
        else {
            var deliveryConstructUId = this.global['DeliveryConstructUId'];
            if (deliveryConstructUId != "" && deliveryConstructUId != undefined && deliveryConstructUId != '') {
                this.global["ISFILTERED"] = false;
                this.router.navigate(['/DeliveryConstruct', deliveryConstructUId, 'ExportRoadMaps']);
            }
            else {
                let modalOption: NgbModalOptions = {};
                modalOption.backdrop = 'static';
                modalOption.size = 'lg';
                modalOption.keyboard = false;
                modalOption.centered = true;

                const modalRef = this.modalService.open(RoadmapPromptTemplates, modalOption);
                modalRef.componentInstance.headerText = "Alert"
                modalRef.componentInstance.promptModalMessage = "Please select any Delivery Construct from the scope selector";
            }

            //if (deliveryConstructUId != "" ) {
            //    this.router.navigate(['/DeliveryConstructUId', deliveryConstructUId, 'SavedRoadMaps']);
            //}
            //else {
            //    this.router.navigate(['SavedRoadMaps']);
            //}
        }
        //var deliveryConstructUId = this.global['DELIVERYCONSTRUCTUID'] != null ? this.global['DELIVERYCONSTRUCTUID'] : "";
        //this.router.navigate(['SavedRoadMaps']);

        //if (deliveryConstructUId != "" ) {
        //    this.router.navigate(['/DeliveryConstructUId', deliveryConstructUId, 'SavedRoadMaps']);
        //}
        //else {
        //    this.router.navigate(['SavedRoadMaps']);
        //}
    }

    OpenCompare() {
        if (this.isDisabledButton == true) {
            let modalOption: NgbModalOptions = {};
            modalOption.backdrop = 'static';
            modalOption.size = 'lg';
            modalOption.keyboard = false;
            modalOption.centered = true;

            const modalRef = this.modalService.open(RoadmapPromptTemplates, modalOption);
            modalRef.componentInstance.promptModalMessage = "No Roadmaps to be displayed";
        }
        else {
            var deliveryConstructUId = this.global['DeliveryConstructUId'];
            if (deliveryConstructUId != "" && deliveryConstructUId != undefined && deliveryConstructUId != '') {
                this.router.navigate(['/DeliveryConstruct', deliveryConstructUId, 'CompareRoadMaps']);
            }
            else {
                let modalOption: NgbModalOptions = {};
                modalOption.backdrop = 'static';
                modalOption.size = 'lg';
                modalOption.keyboard = false;
                modalOption.centered = true;

                const modalRef = this.modalService.open(RoadmapPromptTemplates, modalOption);
                modalRef.componentInstance.headerText = "Alert"
                modalRef.componentInstance.promptModalMessage = "Please select any Delivery Construct from the scope selector";
            }

        }

    }

    SaveRoadMapData() {
        this.toastrService.dismissAllToastr();
        this.isBaselineAutoSave = true;
        var deliveryConstructUId = this.global['DeliveryConstructUId'];
        if (deliveryConstructUId == "" || deliveryConstructUId == undefined || deliveryConstructUId == '') {
            return;
        }
        else if (this.isDisabledButton == true || this.isDisabledSaveButton == true) {
            return;
        }
        var _this = this;
        this.showHistory = false;
        //Checks duplicate titles
        if (this.ValidationChecktoSaveRoadmap()) {
            return;
        }
        this.SaveWarningMessage = false;
        var isBuiltEntity = this.global["ISROADMAPBUILT"];


        //this.GetPlannedStartEnd(this.flat);
        //this.isNotSaved = false;
        var inputdata = this.flat;
        this.ShowSettings();
        var roadMapTitle = "";
        var saveStatus = this.global["SAVESTATUS"];
        var rmUID = this.roadMapUUId;

        //Newly Created Contract
        if (isBuiltEntity == true && rmUID == undefined) {

            this.roadMapUUId = UUID.UUID();
            this.global["ROADMAPUID"] = this.roadMapUUId;
            this.global["ACTIONTYPE"] = "Added";

        }

        //get the title
        if (this.global["ROADMAPSETTINGSFLAT"] != undefined) {
            let gblTitle = this.global["ROADMAPSETTINGSFLAT"]
            roadMapTitle = gblTitle.Title
        }

        //save accordingly
        if (roadMapTitle == undefined || roadMapTitle == "") {
            this.ShowSettings();
            //if (this.settingComp == undefined) {
            //    this.settingComp = new RoadmapSettingsMain(this.roadmapAssistantService,this.modalService,this.router,this.activeModal,this.global,this.location);
            //}
            this.settingComp.isError = true;
            this.settingComp.errorMessage = "Roadmap Name not Entered";
            this.toastrService.showWarningToastr(this.settingComp.errorMessage);
            $(function () { $("#Title").focus() });
            $("#Title").css('border', '1px solid red');

        }
        else {
            if (inputdata != null && inputdata.length > 0) {
                this.SaveWarningMessage = false;
                console.log('Title is there. Now we can add comments');
                // this.showSettings = false;
                $('.settings').hide();
                this.isCommentPopup = true;
                this.RoadMapComments = "";
                $(".commentPopup").show();
            }

            else {

                this.isSaved = false;
                this.isError = false;
                this.isNotModified = true;
                this.SaveWarningMessage = true;
                // this.showSettings = false;
                $('.settings').hide();
                this.RoadmapWarningMessage = "Blank Roadmap cannot be saved";
                this.toastrService.showErrorToastr(this.RoadmapWarningMessage);
                this.isNotSaved = true;
                console.log("Not modified");
            }
        }

    }

    SaveRoadmapComments(type: any, isbaselined: boolean = false) {
        var _this = this;
        var commentMessage = this.RoadMapComments;
        var inputdata = this.flat;
        if (this.DeletedArray != null && this.isEdit == true) {
            if (this.DeletedArray.length > 0) {
                for (let i = 0; i < this.DeletedArray.length; i++) {
                    if (this.DeletedArray[i].RoadmapMappingUId != undefined) {
                        inputdata.push(this.DeletedArray[i]);
                    }
                }
            }
        }
        if (this.MilestoneFlat != null) {
            if (this.MilestoneFlat.length > 0) {
                /*Removing unsaved deleted milestone before saving the roadmap*/
                var unSavedDeletedMilestone = this.MilestoneFlat.filter(x => x.RoadmapMappingUId == undefined && x.ActionType == "Deleted");
                if (unSavedDeletedMilestone.length > 0) {
                    var tempMilestone = this.MilestoneFlat.slice(0);
                    unSavedDeletedMilestone.forEach(function (item) {
                        for (let i = 0; i < tempMilestone.length; i++) {
                            if (tempMilestone[i].TaskUId == item.TaskUId) {
                                _this.MilestoneFlat.splice(i, 1);
                            }
                        }
                    });
                }
                if (this.MilestoneFlat.length > 0) {
                    this.MilestoneFlat.forEach(function (item) {
                        //if (_this.flat.filter(x => x.TaskUId == item.ParentTaskUId).length > 0) {
                        //    var a = _this.flat.filter(x => x.TaskUId == item.ParentTaskUId);
                        //    item.BaselinedatInitlevel = a[0].BaselinedatInitlevel;
                        //}
                        if (item.ActionType == "Deleted") {
                            item.DeletedEntity = "True";
                        }
                        inputdata.push(item);
                    });
                }
            }
        }
        if (this.DependencyFlat != null) {
            if (this.DependencyFlat.length > 0) {
                this.DependencyFlat.forEach(function (item) {
                    if (isbaselined == true) {
                        item.BaselinedatInitlevel = true;
                    }
                    if (item.ActionType == "Added") {
                        item.RoadmapUId = _this.global["ROADMAPUID"];
                    }
                });
            }
        }
        this.global["DEPENDENCYFLAT"] = this.DependencyFlat;
        //  this.roadMapMapping.RoadMapComments = commentMessage;
        //  this.lstRoadMapMapping.push(this.roadMapMapping);

        if (inputdata != null && inputdata.length > 0) {
            this.SaveWarningMessage = false;

            this.lstRoadMapMapping = new Array<RoadMapMapping>();
            for (let i = 0; i < inputdata.length; i++) {
                this.roadMapMapping = new RoadMapMapping();
                //if (baselined == true) {
                //    this.roadMapMapping.BaselinedatInitlevel = true;
                //}
                this.roadMapMapping.CreatedIn = this.loggedInUserName;
                if (isbaselined == true) {
                    this.roadMapMapping.BaselinedatInitlevel = true;
                    var date = new Date();
                    var mm = (1 + date.getMonth()).toString().padStart(2, '0');
                    var dd = date.getDate().toString().padStart(2, '0');
                    let year = date.getFullYear();
                    this.roadMapMapping.BaselinedDate = mm + '/' + dd + '/' + year;
                    // this.roadMapMapping.BaselinedDate = baselineDate.toLocaleDateString()
                } else {
                    if (inputdata[i].BaselinedatInitlevel == true && this.isbaselineMessage == true && isbaselined == false) {
                        //this.roadMapMapping.BaselinedDate = new Date();
                        this.roadMapMapping.BaselinedatInitlevel = true;
                        var date = new Date();
                        var mm = (1 + date.getMonth()).toString().padStart(2, '0');
                        var dd = date.getDate().toString().padStart(2, '0');
                        let year = date.getFullYear();
                        this.roadMapMapping.BaselinedDate = mm + '/' + dd + '/' + year;
                    }
                    else if (inputdata[i].BaselinedatInitlevel == true) {
                        this.roadMapMapping.BaselinedatInitlevel = inputdata[i].BaselinedatInitlevel;
                        this.roadMapMapping.BaselinedDate = inputdata[i].BaselinedDate;
                    }
                }
                this.roadMapMapping.BaselineStartDate = inputdata[i].BaselineStartDate != undefined ? inputdata[i].BaselineStartDate : null;
                this.roadMapMapping.LegendIcon = inputdata[i].LegendIcon != undefined ? inputdata[i].LegendIcon : null;
                this.roadMapMapping.Levels = inputdata[i].Levels;
                this.roadMapMapping.ModifiedIn = this.loggedInUserName;
                this.roadMapMapping.ParentTaskUId = inputdata[i].ParentTaskUId;
                this.roadMapMapping.RoadmapUId = this.roadMapUUId;
                this.roadMapMapping.TaskType = inputdata[i].TaskType;
                //this.roadMapMapping.RoadMapMappingId = ;
                this.roadMapMapping.TaskUId = inputdata[i].TaskUId;
                this.roadMapMapping.Title = inputdata[i].Title;
                //this.roadMapMapping.Associativescopeselector = inputdata[i].Associativescopeselector;
                this.roadMapMapping.AssociativescopeselectorId = inputdata[i].AssociativescopeselectorId;
                this.roadMapMapping.CreatedBy = this.cUser;
                this.roadMapMapping.BarColor = inputdata[i].BarColor != undefined ? inputdata[i].BarColor : "#286e99";
                this.roadMapMapping.BarFontSize = inputdata[i].BarFontSize != undefined ? inputdata[i].BarFontSize : "Medium";
                this.roadMapMapping.PlannedStart = inputdata[i].PlannedStart;
                this.roadMapMapping.PlannedFinish = inputdata[i].PlannedFinish;
                this.roadMapMapping.PlannedEfforts = inputdata[i].PlannedEfforts;
                this.roadMapMapping.RoadMapComments = commentMessage;
                this.roadMapMapping.IsEditedFromEntity = inputdata[i].IsEditedFromEntity;
                this.roadMapMapping.ReleaseMethodologyType = inputdata[i].ReleaseMethodologyType;
                this.roadMapMapping.AssociatedOverAllReleaseUId = inputdata[i].AssociatedOverAllReleaseUId;
                this.roadMapMapping.isBaselineAutoSave = this.isBaselineAutoSave;
                this.roadMapMapping.CopyVersion = this.CopyVersion;
                if (this.isEdit && inputdata[i].RoadmapMappingUId != undefined && inputdata[i].DeletedEntity != "True") {

                    this.roadMapMapping.ActionType = "Modified";
                    this.roadMapMapping.RoadmapMappingUId = inputdata[i].RoadmapMappingUId;
                    this.roadMapMapping.strObjectId = inputdata[i]._id;
                }
                else if (inputdata[i].DeletedEntity == "True" && inputdata[i].RoadmapMappingUId != undefined) {
                    this.roadMapMapping.ActionType = "Deleted";
                    this.roadMapMapping.RoadmapMappingUId = inputdata[i].RoadmapMappingUId;
                    this.roadMapMapping.strObjectId = inputdata[i]._id;
                }

                else {
                    if (this.roadMapMapping.RoadmapMappingUId == undefined && inputdata[i].DeletedEntity != "True") {
                        this.roadMapMapping.RoadmapMappingUId = UUID.UUID();
                        this.roadMapMapping.ActionType = "Added";
                    }

                }

                this.lstRoadMapMapping.push(this.roadMapMapping);

            }
        }
        var _this = this;
        let roadmapSettingsData = _this.global["ROADMAPSETTINGSFLAT"];
        roadmapSettingsData.RoadmapComments = this.RoadMapComments != undefined ? this.RoadMapComments : "";
        if (roadmapSettingsData != undefined) {
            if (roadmapSettingsData.ClientUID == "00000000-0000-0000-0000-000000000000" || roadmapSettingsData.ClientUID == undefined || roadmapSettingsData.ClientUID == "") {
                roadmapSettingsData.ClientUID = this.global['ClientUId'];
            }
            this.roadmapAssistantService.SaveRoadmap(roadmapSettingsData).subscribe((response) => {
                this.global["TITLE"] = roadmapSettingsData.Title;
                if (response != null) {
                    this.isNotSaved = true;
                    if (response.ResponseCode == "1") {
                        this.isSaved = true;
                        this.isFilterApplied = false;
                        // $('.builder-target').addClass("alertComponentPlaceholder");
                        //this.isError = false;
                        //this.isNotModified = false;  
                        if (this.isbaselineMessage == true) {
                            this.successMessage = "Baseline Saved Successfully";
                            this.toastrService.showSuccessToastr(this.successMessage);
                        } else {
                            this.successMessage = response.ResponseMesssage;
                            this.toastrService.showSuccessToastr(this.successMessage);
                            this.global["ISCOPIED"] = false;
                            this.global["ISFILTERED"] = false;
                            $('.filterAppliedIcon').hide();
                            $('.rmfilterAppliedIcon').hide();
                        }
                        //this.LoadSettings(this.deliveryConstructUId, this.roadMapUUId)
                        //this.global["SAVESTATUS"] = this.isSaved;
                        //$('.red').hide();
                        if (this.lstRoadMapMapping != undefined) {
                            //this.roadmapmapping.RoadMapComments = this.RoadMapComments;
                            this.roadmapAssistantService.SaveRoadmapMapping(this.lstRoadMapMapping).subscribe((response) => {
                                this.isBaselineAutoSave = false;
                                this.global["isUnSavedData"] = false;
                                if (response != null) {
                                    if (response.ResponseCode == "1") {
                                        this.DeletedArray = [];
                                        this.RoadMapComments = "";
                                        //this.isSaved = true;
                                        //this.isError = false;
                                        //this.isNotModified = false;
                                        //this.successMessage = response.ResponseMesssage;
                                        //_this.headerComp.SetResponseMessage(true, false, false, response.ResponseMesssage, "");
                                        //_this.responseMessages.emit({ isSuc: true, isErr: false, isNotMod: false, sucMessage: response.ResponseMesssage, errMessage: ""});
                                        //alert(response.ResponseMesssage);
                                        // _this.flat = [];
                                        _this.isEdit = true;
                                        _this.isNotSaved = true;
                                        $('.filterAppliedIcon').hide();
                                        $('.rmfilterAppliedIcon').hide();
                                        //_this.LoadRoadmap("22000000-0000-0000-0000-000000000000", this.roadMapUUId);                                        
                                        let initiativeData = _this.global["INITIATIVEFLAT"];
                                        let releaseData = _this.global["RELEASEFLAT"];
                                        let iterationGlobalData = _this.global["ITERATIONFLAT"];
                                        let globalfunctionalData = _this.global["FUNCTIONALFLAT"];
                                        let globalSprintData = _this.global["SPRINTFLAT"];
                                        let globalPhaseData = _this.global["PHASEFLAT"];
                                        let globalTaskData = _this.global["TASKFLAT"];
                                        let globalMilestoneData = _this.global["MILESTONEFLAT"];
                                        let globalBaselineData = _this.global["BASELINEFLAT"];
                                        let globalDependencyData = _this.global["DEPENDENCYFLAT"];
                                        //if (_this.DependencyFlat.filter(a => a.DeletedEntity == "True").length > 0) {
                                        //    let filterArray = _this.DependencyFlat.filter(a => a.DeletedEntity != "True");
                                        //    _this.DependencyFlat = filterArray;
                                        //    this.global["DEPENDENCYFLAT"] = _this.DependencyFlat;
                                        //}
                                        if (globalDependencyData == null || globalDependencyData.length == 0) {
                                            _this.LoadRoadmap(this.global['DeliveryConstructUId'], this.roadMapUUId, null);
                                        }

                                        this.global["isUnSavedData"] = false;
                                        if (globalBaselineData != null) {
                                            this.roadmapAssistantService.SaveBaseLine(globalBaselineData).subscribe((response) => {
                                                if (response != null) {
                                                    if (response.ResponseCode == "1") {
                                                        _this.global["BASELINEFLAT"] = null;
                                                        this.isbaselineMessage = false;
                                                    }
                                                    else if (response.ResponseCode == "-1") {
                                                        _this.global["BASELINEFLAT"] = null;
                                                        this.isbaselineMessage = false;
                                                    }
                                                }
                                            });
                                        }
                                        if (initiativeData != null) {
                                            this.roadmapAssistantService.SaveInitiative(initiativeData).subscribe((response) => {
                                                this.global["isUnSavedData"] = false;
                                                if (response != null) {
                                                    if (response.ResponseCode == "1") {
                                                        _this.global["INITIATIVEFLAT"] = null;
                                                        //this.isSaved = true;
                                                        //this.isError = false;
                                                        //this.isNotModified = false;
                                                        //this.successMessage = response.ResponseMesssage;
                                                        //this.GetInitativeData(this.initiativeUId);
                                                    }
                                                    else {
                                                        //this.isSaved = false;
                                                        //this.isError = true;
                                                        //this.isNotModified = false;
                                                        //console.log(response.ResponseMesssage);
                                                        //this.errorMessage = "Error while processing data";
                                                    }
                                                }
                                            });
                                        }
                                        if (releaseData != null) {
                                            this.roadmapAssistantService.SaveRelease(releaseData).subscribe((response) => {
                                                this.global["isUnSavedData"] = false;
                                                if (response != null) {
                                                    if (response.ResponseCode == "1") {                                                       
                                                        /*Saving Program(Over-All) Release hard dependency data*/
                                                        let hardDependencies: Array<any> = [];
                                                        releaseData.forEach(release => {
                                                            if (release.HardDependencyDetails != undefined && releaseData.HardDependencyDetails != "") {
                                                                release.HardDependencyDetails.forEach(dependency => {
                                                                    hardDependencies.push(dependency);
                                                                });                                                                
                                                            }
                                                        });
                                                        if (hardDependencies.length > 0) {
                                                            _this.roadmapAssistantService.SaveProgramReleaseHardDependency(hardDependencies).subscribe((response) => {
                                                                if (response != null) {
                                                                    if (response.ResponseCode == "1") {

                                                                    }
                                                                }
                                                            });
                                                        }
                                                        /*End*/
                                                        _this.global["RELEASEFLAT"] = null;
                                                    }
                                                    else {                                                       
                                                    }
                                                }
                                            });
                                        }
                                        // console.log(releaseData);
                                        if (iterationGlobalData != null) {
                                            this.roadmapAssistantService.SaveIterationData(iterationGlobalData).subscribe((response) => {
                                                this.global["isUnSavedData"] = false;
                                                if (response != null) {
                                                    if (response.ResponseCode == "1") {
                                                        _this.global["ITERATIONFLAT"] = null;
                                                        // this.isSaved = true;

                                                    }
                                                    else {
                                                        // this.isSaved = false;
                                                        // this.isError = true;

                                                    }
                                                }
                                            });
                                        }
                                        if (globalSprintData != null) {
                                            this.roadmapAssistantService.SaveSprintData(globalSprintData).subscribe((response) => {
                                                if (response != null) {
                                                    if (response.ResponseCode == "1") {
                                                        _this.global["SPRINTFLAT"] = null;
                                                        //this.isSaved = true;
                                                        //this.isError = false;

                                                    }
                                                    else {
                                                        //this.isSaved = false;
                                                        //this.isError = true;
                                                        //this.errorMessage = "Error while processing data";
                                                    }
                                                }
                                            });
                                        }
                                        if (globalfunctionalData != null) {
                                            this.roadmapAssistantService.SavefunctionalData(globalfunctionalData).subscribe((response) => {

                                                // console.log(response);
                                                if (response != null) {
                                                    if (response.ResponseCode == "1") {
                                                        _this.global["FUNCTIONALFLAT"] = null;
                                                        //this.isSaved = true;
                                                        //this.isError = false;

                                                    }
                                                    else {
                                                        //this.isSaved = false;
                                                        //this.isError = true;

                                                    }
                                                }
                                            });
                                        }
                                        if (globalPhaseData != null) {
                                            this.roadmapAssistantService.SavePhase(globalPhaseData).subscribe((response) => {

                                                // console.log(response);
                                                if (response != null) {
                                                    if (response.ResponseCode == "1") {
                                                        _this.global["PHASEFLAT"] = null;
                                                        //this.isSaved = true;
                                                        //this.isError = false;

                                                    }
                                                    else {
                                                        //this.isSaved = false;
                                                        //this.isError = true;

                                                    }
                                                }
                                            });
                                        }

                                        if (globalTaskData != null) {
                                            this.roadmapAssistantService.SaveTask(globalTaskData).subscribe((response) => {

                                                // console.log(response);
                                                if (response != null) {
                                                    if (response.ResponseCode == "1") {
                                                        _this.global["TASKFLAT"] = null;
                                                        //this.isSaved = true;
                                                        //this.isError = false;

                                                    }
                                                    else {
                                                        //this.isSaved = false;
                                                        //this.isError = true;

                                                    }
                                                }
                                            });
                                        }
                                        if (globalMilestoneData != null) {
                                            this.roadmapAssistantService.SaveMilestone(globalMilestoneData).subscribe((response) => {
                                                // console.log(response);
                                                if (response != null) {
                                                    if (response.ResponseCode == "1") {
                                                        _this.global["MILESTONEFLAT"] = null;
                                                        //this.isSaved = true;
                                                        //this.isError = false;
                                                    }
                                                    else {
                                                        //this.isSaved = false;
                                                        //this.isError = true;
                                                    }
                                                }
                                            });
                                            _this.MilestoneFlat = [];
                                        }
                                        if (globalDependencyData != null && globalDependencyData.length > 0) {
                                            this.roadmapAssistantService.SaveDependency(globalDependencyData).subscribe((response) => {
                                                // console.log(response);
                                                if (response != null) {
                                                    if (response.ResponseCode == "1") {
                                                        _this.global["DEPENDENCYFLAT"] = null;
                                                        _this.LoadRoadmap(this.global['DeliveryConstructUId'], this.roadMapUUId, null);
                                                        //this.isSaved = true;
                                                        //this.isError = false;
                                                    }
                                                    else {
                                                        //this.isSaved = false;
                                                        //this.isError = true;
                                                        _this.LoadRoadmap(this.global['DeliveryConstructUId'], this.roadMapUUId, null);
                                                    }
                                                }
                                            });
                                            _this.DependencyFlat = [];
                                        }

                                        _this.flat = [];
                                    }
                                    else {
                                        //this.isSaved = false;
                                        //this.isError = true;
                                        //this.isNotModified = false;
                                        this.isNotSaved = true;
                                        console.log("SaveRoadmapMapping API error: " + response.ResponseMesssage);
                                        //this.errorMessage = "Error while processing data";
                                        //alert("Error while processing data");
                                        //_this.headerComp.SetResponseMessage(false, true, false, "", "Error while processing data");
                                        //_this.responseMessages.emit({ isSuc: false, isErr: true, isNotMod: false, sucMessage: "", errMessage: "Error while processing data" });
                                    }
                                }
                            });
                        }
                        this.global["ACTIONTYPE"] = "Modified";
                    }
                    else if (response.ResponseCode == "2") {
                        this.SaveWarningMessage = true;
                        // $('.builder-target').addClass("alertComponentPlaceholder");
                        this.RoadmapWarningMessage = response.ResponseMesssage;
                        this.toastrService.showWarningToastr(this.RoadmapWarningMessage);
                    }
                    else {
                        //this.isSaved = false;
                        //this.isError = true;
                        //this.isNotModified = false;
                        this.SaveWarningMessage = false;
                        console.log("SaveRoadmap API error: " + response.ResponseMesssage);
                        this.errorMessage = "Error while processing data";
                    }
                }
            });
        }


        //else {
        //    this.isSaved = false;
        //    this.isError = false;
        //    this.isNotModified = true;
        //    this.SaveWarningMessage = true;
        //    this.RoadmapWarningMessage = "Roadmap should contains atleast one initiative."
        //    this.isNotSaved = true;
        //    console.log("Not modified");
        //}

        this.execDivResize = true;
        this.CloseComments();
    }

    CloseComments() {
        console.log('Inside close comment popup function');
        // this.showCommentPopUpEvent.emit(false);
        $(".commentPopup").hide();

    }
    WarningMessage() {
        this.SaveWarningMessage = false;
        //$('.builder-target').removeClass("alertComponentPlaceholder");
    }

    IsSavedSuccess() {
        this.isSaved = false;
        //$('.builder-target').removeClass("alertComponentPlaceholder");
    }

    droppableItemClass = (item: any) => `${item.class} ${item.inputType}`;

    builderDrag(e: any) {
        const item = e.value;
        item.data =
            item.inputType === 'number'
                ? (Math.random() * 100) | 0
                : Math.random()
                    .toString(36)
                    .substring(20);
    }

    log(e: any) {
        this.global["isUnSavedData"] = true;
        this.panX = 1;
        if (e.type == "drop") {
            this.global["ISROADMAPBUILT"] = true;
            this.isDisabledButton = false;
            this.isDisabledSaveButton = false;
            this.isDisabledNewButton = false;
            this.isRoadMapLoaded = true;
            this.targetBuilderTools.forEach(this.GenerateUniqueId());
            if (this.targetBuilderTools[e.dropIndex] != undefined && !this.targetBuilderTools[e.dropIndex].Associativescopeselector) {
                this.targetBuilderTools[e.dropIndex].Associativescopeselector = this.global["ScopeselectorName"];
            }

            //console.log(this.targetBuilderTools);
            this.flat = this.getFlat(this.targetBuilderTools, 0);
            $("#hiddentasks").val(JSON.stringify(this.flat));
            //console.log(this.flat);
            //localStorage.setItem('flatJSONData', JSON.stringify(this.flat));

            this.rendertimeline();
            if (this.settingsAppliedData != undefined) {
                this.SettingsApply(this.settingsAppliedData);
            }

            if (e.value != undefined) {
                this.ValidateTargetBuilderTools(e.value.TaskUId);
                if (e.value.TaskType == "Phase") {
                    this.SetPhaseEntitySplitPercentageWidth(e.value.TaskUId);
                }
            }

            this.setEachEntityDate();
            //console.log(this.flat);
            this.orderFlatJson();
            //this.ResetDependencyLine();
            this.execDivResize = true;
            //this.setContainerAxis();
            //this.getTimelineDate();             

        }
        if (e.type == "drag") {
            //$("#div_scroll").scrollLeft(0);
            this.inTransitTargetFlat = this.flat.slice(0);
        }
        if (e.type == "remove") {
            if (e.value != undefined) {
                this.ValidateTargetBuilderTools(e.value.TaskUId);
            }
        }
    }

    SetPhaseEntitySplitPercentageWidth(entityTaskUId) {
        var _this = this;
        var droppedPhase = _this.flat.filter(x => x.TaskUId == entityTaskUId);
        if (droppedPhase.length > 0) {
            var parentData = _this.flat.filter(x => x.TaskUId == droppedPhase[0].ParentTaskUId)[0];
            if (parentData.ParentTaskUId != 0 && parentData.TaskType == "Release") {
                if (droppedPhase[0].PlannedStart == undefined && droppedPhase[0].PlannedFinish == undefined) {
                    var phaseChildren = _this.flat.filter(x => x.ParentTaskUId == droppedPhase[0].ParentTaskUId && x.TaskType == 'Phase' && x.TaskUId != entityTaskUId);
                    if (phaseChildren.length > 5) {
                        return;
                    }
                    var title, splitPercentage;
                    switch (phaseChildren.length) {
                        case 0:
                            title = "Plan";
                            splitPercentage = 4;
                            break;
                        case 1:
                            title = "Analyze";
                            splitPercentage = 11;
                            break;
                        case 2:
                            title = "Design";
                            splitPercentage = 17;
                            break;
                        case 3:
                            title = "Build";
                            splitPercentage = 30;
                            break;
                        case 4:
                            title = "Test";
                            splitPercentage = 25;
                            break;
                        case 5:
                            title = "Deploy";
                            splitPercentage = 13;
                            break;
                    }
                    var parentStartDate = new Date(parentData.PlannedStart);
                    var parentEndDate = new Date(parentData.PlannedFinish);
                    var dateDifference = Math.floor(Math.abs(parentStartDate.getTime() - parentEndDate.getTime()) / (1000 * 3600 * 24)) + 1;
                    //var childPhaseDays = Math.round((dateDifference * splitPercentage / 100));
                    //var childPhaseDays = Math.floor(dateDifference * splitPercentage / 100);
                    var childPhaseDays = dateDifference * splitPercentage / 100;
                    var newPhaseStartDate, newPhaseEndDate;

                    //var maxOrderId = _this.getMax(phaseChildren, "Orderid");                    
                    //var prevPhaseEntity = $.grep(phaseChildren, function (e: any) { return e.Orderid == maxOrderId });
                    var maxdate = new Date(Math.max.apply(null, phaseChildren.map(function (e) {
                        return new Date(e.PlannedFinish);
                    })));
                    var maxdate1 = moment(maxdate).format('YYYY-MM-DD');
                    var prevPhaseEntity = $.grep(phaseChildren, function (e: any) { return Date.parse(moment(e.PlannedFinish).format('YYYY-MM-DD')) == Date.parse(maxdate1); });

                    if (prevPhaseEntity.length > 0) {
                        var prevPhaseEndDate = new Date(prevPhaseEntity[0].PlannedFinish);
                        newPhaseStartDate = new Date(prevPhaseEndDate.setDate(prevPhaseEndDate.getDate() + 1));
                        var endDate = new Date(newPhaseStartDate);
                        newPhaseEndDate = new Date(endDate.setDate((Math.ceil(endDate.getDate() + childPhaseDays)) - 1));                        
                        if (newPhaseStartDate > parentEndDate || newPhaseEndDate > parentEndDate) {
                            return;
                        }
                    }
                    else {
                        newPhaseStartDate = new Date(parentStartDate.setDate(parentStartDate.getDate()));
                        var endDate = new Date(newPhaseStartDate);
                        newPhaseEndDate = new Date(endDate.setDate((Math.ceil(endDate.getDate() + childPhaseDays)) - 1));                        
                    }

                    for (let i = 0; i < _this.flat.length; i++) {
                        if (_this.flat[i].TaskUId == entityTaskUId) {
                            _this.flat[i].Title = title;
                            _this.flat[i].PlannedStart = newPhaseStartDate.toJSON().split("T")[0];
                            _this.flat[i].PlannedFinish = newPhaseEndDate.toJSON().split("T")[0];
                        }
                    }
                    _this.targetBuilderTools = _this.getHierarchicalData(_this.flat, _this.flat[0].ParentTaskUId);
                }
            }
        }
    }

    //ZoomOut() {
    //    console.log('test');
    //    //var svg = d3.select("svg");
    //    //svg.call(zoom);
    //}


    dataReload(e: any) {
        console.log(e.type, e);
        if (e.type == "drop") {
            this.targetBuilderTools.forEach(this.GenerateUniqueId());
            this.flat = this.getFlat(this.targetBuilderTools, 0);
            //console.log(this.flat);
            //this.rendertimeline();
        }
        if (e.type == "drag") {
            this.inTransitTargetFlat = this.flat.slice(0);
        }
    }

    canMove(e: any): boolean {
        return e.indexOf('Disabled') === -1;
    }

    restricData(entityTaskUId: any, parentData: any) {
        var _this = this;
        var entityData = parentData.filter(x => x.TaskUId == entityTaskUId);
        if (entityData[0].ParentTaskUId != undefined && entityData[0].ParentTaskUId != null) {
            _this.recursivechilddata(entityData, parentData);
        }

    }

    recursivechilddata(items, parentItems) {
        var _this = this;
        console.log(items);
        if (items[0].ParentTaskUId != undefined && items[0].ParentTaskUId != 0) {
            var parenttaskUID = items[0].ParentTaskUId;
            var currentParentData = parentItems.filter(x => x.TaskUId == parenttaskUID);
            this.recursivechilddata(currentParentData, parentItems)
        }
        else {
            _this.isEnabledEntity = items[0].isEnabled;
        }
    }

    ValidateTargetBuilderTools(entityTaskUId: any) {
        var _this = this;
        if (_this.flat.length > 0) {

            for (var i = 0; i < _this.flat.length; i++) {
                if (_this.flat[i].TaskUId == entityTaskUId) {

                    if (_this.isParentRoadmap && (_this.flat[i].TaskType == "Initiative" || _this.flat[i].TaskType == "Release")) {
                        _this.flat.splice(i, 1);
                        /*After cancelling invalid movement of entity, retaining its previouse location*/
                        if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                            _this.flat = _this.inTransitTargetFlat.slice(0);
                        }
                        break;
                    }
                    if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0 && _this.flat[i].TaskType != "Initiative") {
                        var entityData = _this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId);
                        this.restricData(entityTaskUId, _this.inTransitTargetFlat);
                        if (_this.isEnabledEntity == false) {
                            _this.flat.splice(i, 1);
                            _this.flat = _this.inTransitTargetFlat.slice(0);
                            break;
                        }
                        else {

                            _this.isEnabledEntity = false;
                            this.restricData(entityTaskUId, _this.flat);
                            if (_this.isEnabledEntity == false) {
                                _this.flat.splice(i, 1);
                                _this.flat = _this.inTransitTargetFlat.slice(0);
                                break;
                            }
                        }
                    }
                    else {
                        if (_this.flat[i].ParentTaskUId != undefined && _this.flat[i].ParentTaskUId != 0) {
                            this.restricData(entityTaskUId, _this.flat);
                            if (_this.isEnabledEntity == false) {
                                _this.flat.splice(i, 1);
                                if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                                    _this.flat = _this.inTransitTargetFlat.slice(0);
                                }
                                break;
                            }
                        }
                    }
                    let entityName = _this.flat[i].Title.split('Add ')[1] == undefined ? _this.flat[i].Title : _this.flat[i].Title.split('Add ')[1];
                    if (_this.flat[i].ParentTaskUId == 0 && _this.flat[i].TaskType != "Initiative" && _this.flat[i].TaskType != "Release") {
                        /*Cancelling invalid movement*/
                        _this.flat.splice(i, 1);
                        /*After cancelling invalid movement of entity, retaining its previouse location*/
                        if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                            _this.flat = _this.inTransitTargetFlat.slice(0);
                        }
                        break;
                    }
                    else if (_this.flat[i].TaskType == "Initiative") {
                        if (_this.flat[i].ParentTaskUId != 0) {
                            /*Cancelling invalid movement*/
                            _this.flat.splice(i, 1);
                            /*After cancelling invalid movement of entity, retaining its previouse location*/
                            if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                                _this.flat = _this.inTransitTargetFlat.slice(0);
                            }
                        }
                        break;
                    }
                    else if (_this.flat[i].TaskType == "Release") {
                        var oldParentTaskUId = 0;
                        /*Checking and restricting cross movement of Over All release*/
                        if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                            oldParentTaskUId = _this.inTransitTargetFlat.filter(function (a) { return a.TaskUId == entityTaskUId; })[0].ParentTaskUId;
                            /*If Program(OverAll Release)*/
                            if (oldParentTaskUId == 0) {
                                /*Cancelling cross movement*/
                                _this.flat.splice(i, 1);
                                /*After cancelling invalid movement of entity, retaining its previouse location*/
                                if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                                    _this.flat = _this.inTransitTargetFlat.slice(0);
                                }
                                break;
                            }
                        }
                        var parentTaskUId = _this.flat[i].ParentTaskUId;
                        if (parentTaskUId != 0) {//For Project Release
                            var parentTaskType = _this.flat.filter(i => i.TaskUId == parentTaskUId)[0].TaskType;
                            if (parentTaskType != "Initiative") {
                                /*Cancelling invalid movement*/
                                _this.flat.splice(i, 1);
                                /*After cancelling invalid movement of entity, retaining its previouse location*/
                                if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                                    _this.flat = _this.inTransitTargetFlat.slice(0);
                                }
                            }
                            else {
                                /*Cross movement validation check for valid drag an drop of entity*/
                                if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                                    /*Calling cross movement validation only if the child entity is moving from one parent to another*/
                                    if (_this.flat[i].ParentTaskUId != _this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId)[0].ParentTaskUId) {
                                        this.ValidateEntityCrossMovement(entityTaskUId, _this.flat[i].ParentTaskUId, entityName, i);
                                    }
                                }
                            }
                        }
                        break;
                    }
                    else if (_this.flat[i].TaskType == "Iteration") {
                        var parentTaskUId = _this.flat[i].ParentTaskUId;
                        var parentTaskType = _this.flat.filter(i => i.TaskUId == parentTaskUId)[0].TaskType;
                        var parentParentTaskUId = _this.flat.filter(i => i.TaskUId == parentTaskUId)[0].ParentTaskUId;
                        //if (parentParentTaskUId == 0) {//Restricting for Program(Over All)Release
                        //    _this.flat.splice(i, 1);
                        //    if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                        //        _this.flat = _this.inTransitTargetFlat.slice(0);
                        //    }
                        //}
                        // else {
                        if (parentTaskType != "Release") {
                            _this.flat.splice(i, 1);
                            if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                                _this.flat = _this.inTransitTargetFlat.slice(0);
                            }
                        }
                        else {
                            if (_this.helperService.CheckIfTopParentIsProgramRelease(_this.flat, entityTaskUId)) {
                                if (_this.flat[i].Title == 'Add Iteration') {
                                    _this.flat[i].Title = 'E2E Add Iteration';
                                }
                            }
                            /*Cross movement validation check for valid drag an drop of entity*/
                            if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                                /*Calling cross movement validation only if the child entity is moving from one parent to another*/
                                if (_this.flat[i].ParentTaskUId != _this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId)[0].ParentTaskUId) {
                                    this.ValidateEntityCrossMovement(entityTaskUId, _this.flat[i].ParentTaskUId, entityName, i);
                                }
                            }
                        }
                        //}
                        break;
                    }
                    else if (_this.flat[i].TaskType == "Phase") {
                        var parentTaskUId = _this.flat[i].ParentTaskUId;
                        var parentTaskType = _this.flat.filter(i => i.TaskUId == parentTaskUId)[0].TaskType;
                        if (parentTaskType != "Release" && parentTaskType != "Iteration" && parentTaskType != "FunctionalArea") {
                            _this.flat.splice(i, 1);
                            if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                                _this.flat = _this.inTransitTargetFlat.slice(0);
                            }
                        }
                        else {
                            if (_this.helperService.CheckIfTopParentIsProgramRelease(_this.flat, entityTaskUId)) {
                                if (_this.flat[i].Title == 'Add Phase') {
                                    _this.flat[i].Title = 'E2E Add Phase';
                                }
                            }
                            if ((this.global["RELEASEFLAT"] != undefined) && (_this.global["RELEASEFLAT"].filter(i => i.ReleaseUId == parentTaskUId).length > 0)) {
                                var selectedMethodologyUId = _this.global["RELEASEFLAT"].filter(i => i.ReleaseUId == parentTaskUId)[0].MethodologyUId;
                                var selectedMethodologyName = _this.global["RELEASEFLAT"].filter(i => i.ReleaseUId == parentTaskUId)[0].MethodologyName;
                                /*Release methodology check*/
                                if (selectedMethodologyName == "Agile") {
                                    _this.flat.splice(i, 1);
                                    if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                                        _this.flat = _this.inTransitTargetFlat.slice(0);
                                    }
                                }
                                else {
                                    /*Cross movement validation check for valid drag an drop of entity*/
                                    if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                                        /*Calling cross movement validation only if the child entity is moving from one parent to another*/
                                        if (_this.flat[i].ParentTaskUId != _this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId)[0].ParentTaskUId) {
                                            this.ValidateEntityCrossMovement(entityTaskUId, _this.flat[i].ParentTaskUId, entityName, i);
                                        }
                                    }
                                }
                            }
                            else {
                                /*Cross movement validation check for valid drag an drop of entity*/
                                if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                                    /*Calling cross movement validation only if the child entity is moving from one parent to another*/
                                    if (_this.flat[i].ParentTaskUId != _this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId)[0].ParentTaskUId) {
                                        this.ValidateEntityCrossMovement(entityTaskUId, _this.flat[i].ParentTaskUId, entityName, i);
                                    }
                                }
                            }
                        }
                        break;
                    }
                    else if (_this.flat[i].TaskType == "FunctionalArea") {
                        var parentTaskUId = _this.flat[i].ParentTaskUId;
                        var parentTaskType = _this.flat.filter(i => i.TaskUId == parentTaskUId)[0].TaskType;
                        var parentParentTaskUId = _this.flat.filter(i => i.TaskUId == parentTaskUId)[0].ParentTaskUId;
                        if (_this.helperService.CheckIfTopParentIsProgramRelease(_this.flat,entityTaskUId)) {//Restricting for Program(Over All)Release 
                            _this.flat.splice(i, 1);
                            if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                                _this.flat = _this.inTransitTargetFlat.slice(0);
                            }
                        }
                        else {
                            if (parentTaskType != "Release" && parentTaskType != "Iteration") {
                                _this.flat.splice(i, 1);
                                if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                                    _this.flat = _this.inTransitTargetFlat.slice(0);
                                }
                            }
                            else {
                                /*Cross movement validation check for valid drag an drop of entity*/
                                if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                                    /*Calling cross movement validation only if the child entity is moving from one parent to another*/
                                    if (_this.flat[i].ParentTaskUId != _this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId)[0].ParentTaskUId) {
                                        this.ValidateEntityCrossMovement(entityTaskUId, _this.flat[i].ParentTaskUId, entityName, i);
                                    }
                                }
                            }
                        }
                        break;
                    }
                    else if (_this.flat[i].TaskType == "Task") {

                        var parentTaskUId = _this.flat[i].ParentTaskUId;
                        var parentTaskType = _this.flat.filter(i => i.TaskUId == parentTaskUId)[0].TaskType;
                        var parentParentTaskUId = _this.flat.filter(i => i.TaskUId == parentTaskUId)[0].ParentTaskUId;
                        if (parentTaskType != "Phase" && parentTaskType != "Sprint/Iteration") {
                            _this.flat.splice(i, 1);
                            if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                                _this.flat = _this.inTransitTargetFlat.slice(0);
                            }
                        }
                        else {
                            if (_this.helperService.CheckIfTopParentIsProgramRelease(_this.flat, entityTaskUId)) {
                                if (_this.flat[i].Title == 'Add Activity') {
                                    _this.flat[i].Title = 'E2E Add Activity';
                                }
                            }
                            /*Cross movement validation check for valid drag an drop of entity*/
                            if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                                /*Calling cross movement validation only if the child entity is moving from one parent to another*/
                                if (_this.flat[i].ParentTaskUId != _this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId)[0].ParentTaskUId) {
                                    this.ValidateEntityCrossMovement(entityTaskUId, _this.flat[i].ParentTaskUId, entityName, i);
                                }
                            }
                        }

                        break;
                    }
                    else if (_this.flat[i].TaskType == "Sprint/Iteration") {
                        var peerSprints = _this.flat.filter(x => x.ParentTaskUId == _this.flat[i].ParentTaskUId && _this.flat[i].TaskType == "Sprint/Iteration");
                        var isLastSprintPlaced = false;
                        var parentData1 = _this.flat.filter(x => x.TaskUId == _this.flat[i].ParentTaskUId);
                        if (parentData1.length > 0) {
                            if (parentData1[0].ReleaseMethodologyType != undefined) {
                                if (parentData1[0].ReleaseMethodologyType.toLowerCase() == "agile") {
                                    if (peerSprints.length > 1) {
                                        var parentData = _this.flat.filter(x => x.TaskUId == _this.flat[i].ParentTaskUId);
                                        var parentFinish = parentData[0].PlannedFinish;
                                        var sprintfilter = peerSprints.filter(x => x.Title != "Add Sprint")
                                        var maxdate = new Date(Math.max.apply(null, sprintfilter.map(function (e) {
                                            return new Date(e.PlannedFinish);
                                        })));
                                        var maxdate1 = moment(maxdate).format('YYYY-MM-DD');
                                        var prevSprint = $.grep(peerSprints, function (e: any) { return Date.parse(moment(e.PlannedFinish).format('YYYY-MM-DD')) == Date.parse(maxdate1); });

                                        if (prevSprint.length > 0) {
                                            var s = prevSprint[0].PlannedStart.split("-");
                                            var e = prevSprint[0].PlannedFinish.split("-");
                                            var mdystart = new Date(s[0], s[1] - 1, s[2]);
                                            var mdyend = new Date(e[0], e[1] - 1, e[2]);
                                            var diff = Math.abs(mdyend.getTime() - mdystart.getTime());
                                            var d = Math.ceil(diff / (1000 * 3600 * 24));

                                            var date1 = mdyend.setDate(mdyend.getDate() + d + 1);
                                            var date2 = new Date(date1);
                                            if (date2.toJSON().split("T")[0] > parentFinish) {
                                                isLastSprintPlaced = true;
                                            }
                                        }
                                    }
                                }

                            }
                        }
                        var parentTaskUId = _this.flat[i].ParentTaskUId;
                        var parentTaskType = _this.flat.filter(i => i.TaskUId == parentTaskUId)[0].TaskType;
                        var parentParentTaskUId = _this.flat.filter(i => i.TaskUId == parentTaskUId)[0].ParentTaskUId;
                        if (_this.helperService.CheckIfTopParentIsProgramRelease(_this.flat, entityTaskUId)) {//Restricting for Program(Over All)Release
                            _this.flat.splice(i, 1);
                            if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                                _this.flat = _this.inTransitTargetFlat.slice(0);
                            }
                        }
                        else {
                            if (parentTaskType != "Release" && parentTaskType != "Iteration") {
                                _this.flat.splice(i, 1);
                                /*After cancelling invalid movement of entity, retaining its previouse location*/
                                if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                                    _this.flat = _this.inTransitTargetFlat.slice(0);
                                }
                            }
                            else if (isLastSprintPlaced) {
                                _this.flat.splice(i, 1);
                                /*After cancelling invalid movement of entity, retaining its previouse location*/
                                if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                                    _this.flat = _this.inTransitTargetFlat.slice(0);
                                }
                            }
                            else {
                                if ((this.global["RELEASEFLAT"] != undefined) && (_this.global["RELEASEFLAT"].filter(i => i.ReleaseUId == parentTaskUId).length > 0)) {
                                    var selectedMethodologyUId = _this.global["RELEASEFLAT"].filter(i => i.ReleaseUId == parentTaskUId)[0].MethodologyUId;
                                    var selectedMethodologyName = _this.global["RELEASEFLAT"].filter(i => i.ReleaseUId == parentTaskUId)[0].MethodologyName;
                                    /*Release methodology check*/
                                    if (selectedMethodologyName == "Waterfall") {
                                        _this.flat.splice(i, 1);
                                        if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                                            _this.flat = _this.inTransitTargetFlat.slice(0);
                                        }
                                    }
                                    else {
                                        /*Cross movement validation check for valid drag an drop of entity*/
                                        if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                                            /*Calling cross movement validation only if the child entity is moving from one parent to another*/
                                            if (_this.flat[i].ParentTaskUId != _this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId)[0].ParentTaskUId) {
                                                this.ValidateEntityCrossMovement(entityTaskUId, _this.flat[i].ParentTaskUId, entityName, i);
                                            }
                                        }
                                    }
                                }
                                else {
                                    /*Cross movement validation check for valid drag an drop of entity*/
                                    if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                                        /*Calling cross movement validation only if the child entity is moving from one parent to another*/
                                        if (_this.flat[i].ParentTaskUId != _this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId)[0].ParentTaskUId) {
                                            this.ValidateEntityCrossMovement(entityTaskUId, _this.flat[i].ParentTaskUId, entityName, i);
                                        }
                                    }
                                }
                            }
                        }
                        break;
                    }
                    else if (_this.flat[i].TaskType == "Milestone") {
                        var parentTaskUId = _this.flat[i].ParentTaskUId;
                        var parentTaskType = _this.flat.filter(i => i.TaskUId == parentTaskUId)[0].TaskType;
                        /*Except Functional Area and Tasks, milestone can be linked to all other entities*/
                        if (parentTaskType != "FunctionalArea" && parentTaskType != "Task") {
                            if (_this.helperService.CheckIfTopParentIsProgramRelease(_this.flat, entityTaskUId)) {
                                if (_this.flat[i].Title == 'Add Milestone') {
                                    _this.flat[i].Title = 'E2E Add Milestone';
                                }
                            }
                            if (_this.MilestoneFlat.length > 0) {
                                if (_this.MilestoneFlat.filter(a => a.TaskUId == _this.flat[i].TaskUId).length == 0) {
                                    _this.MilestoneFlat.push(_this.flat[i]);
                                }
                            }
                            else {
                                _this.MilestoneFlat.push(_this.flat[i]);
                            }
                        }
                        _this.flat.splice(i, 1);
                    }
                }
            }
            //_this.global["MILESTONEFILTERFLAT"] = this.MilestoneFlat;
            _this.targetBuilderTools = _this.getHierarchicalData(_this.flat, _this.flat[0].ParentTaskUId);
            this.execDivResize = true;
        }
        this.ValidateSourceBuilderTools();
    }

    ValidateSourceBuilderTools() {
        var _this = this;
        if (_this.targetBuilderTools.length == 0) {            
            if (_this.deliveryConstructUId == undefined || _this.deliveryConstructUId == "" ||
                _this.deliveryConstructUId == '00000000-0000-0000-0000-000000000000') {                
                _this.sourceBuilderTools.forEach(function (entity) {
                    entity.IsEnabled = false;
                });
            } else {
                _this.sourceBuilderTools.forEach(function (entity) {
                    if (entity.TaskType == 'Initiative' || entity.TaskType == 'Release') {
                        entity.IsEnabled = true;
                    }
                    if (entity.TaskType != 'Initiative' && entity.TaskType != 'Release') {
                        entity.IsEnabled = false;
                    }
                    entity.Submenu = ["Edit", "Copy", "Delete", "Baseline"];
                    // entity.TaskUId = '';
                });
            }
            //if (_this.global["ROADMAPUID"] == undefined) {
            //    setTimeout(() => {
            //        _this.spinner.hide();
            //    }, 4000);
            //}
            // _this.SetEntitySubMenu(_this.sourceBuilderTools);
        }
        else {

            if (_this.flat.filter(i => i.TaskType == "Initiative").length > 0) {
                _this.sourceBuilderTools.forEach(function (entity) {
                    if (entity.TaskType == 'Release' || entity.TaskType == 'Milestone') {
                        entity.IsEnabled = true;
                    }
                });
            }
            if (_this.flat.filter(i => i.TaskType == "Release").length > 0) {
                _this.sourceBuilderTools.forEach(function (entity) {
                    if (entity.TaskType != 'Dependency')
                        entity.IsEnabled = true;
                });
            }
            else {
                _this.sourceBuilderTools.forEach(function (entity) {
                    if (entity.TaskType != 'Initiative' && entity.TaskType != 'Release' && entity.TaskType != 'Milestone') {
                        entity.IsEnabled = false;
                    }
                });
            }
            this.SetEntityAccessPrivileges();
        }
    }

    SetEntityAccessPrivileges() {
        var _this = this;
        this.sourceBuilderTools.forEach(function (entity) {
            if (entity.TaskType == 'Initiative' && _this.global['InitiativeAccessPrivilege'] && _this.global['InitiativeAccessPrivilege'].AccessPrivilegeCode != 'RWD') {
                entity.IsEnabled = false;
            } else if (entity.TaskType == 'Release' && _this.global['ReleaseAccessPrivilege'] && _this.global['ReleaseAccessPrivilege'].AccessPrivilegeCode != 'RWD') {
                entity.IsEnabled = false;
            } else if (entity.TaskType == 'Milestone' && _this.global['MilestoneAccessPrivilege'] && _this.global['MilestoneAccessPrivilege'].AccessPrivilegeCode != 'RWD') {
                entity.IsEnabled = false;
            } else if (entity.TaskType == 'Phase' && _this.global['PhaseAccessPrivilege'] && _this.global['PhaseAccessPrivilege'].AccessPrivilegeCode != 'RWD') {
                entity.IsEnabled = false;
            } else if (entity.TaskType == 'Task' && _this.global['TaskAccessPrivilege'] && _this.global['TaskAccessPrivilege'].AccessPrivilegeCode != 'RWD') {
                entity.IsEnabled = false;
            } else if (entity.TaskType == 'Iteration' && _this.global['IterationAccessPrivilege'] && _this.global['IterationAccessPrivilege'].AccessPrivilegeCode != 'RWD') {
                entity.IsEnabled = false;
            } else if (entity.TaskType == 'Sprint/Iteration' && _this.global['Sprint/IterationAccessPrivilege'] && _this.global['Sprint/IterationAccessPrivilege'].AccessPrivilegeCode != 'RWD') {
                entity.IsEnabled = false;
            } else if (entity.TaskType == 'FunctionalArea' && _this.global['FunctionalAreaAccessPrivilege'] && _this.global['FunctionalAreaAccessPrivilege'].AccessPrivilegeCode != 'RWD') {
                entity.IsEnabled = false;
            }
        });
    }

    ValidateEntityCrossMovement(entityTaskUId: any, parentTaskUId: any, entityName: any, index: any) {
        let _this = this;

        let modalOption: NgbModalOptions = {};
        modalOption.backdrop = 'static';
        modalOption.size = 'lg';
        modalOption.keyboard = false;
        modalOption.centered = true;

        const modalRef = this.modalService.open(ConfirmPromptModal, modalOption);
        modalRef.componentInstance.headerText = entityName + " Timelines changed";
        modalRef.componentInstance.confirmationMessage = "Do you confirm to change the timelines of " + entityName + " and its child entities to be changed";
        modalRef.result.then((isConfirmed: any) => {
            if (isConfirmed) {//confirmed
                this.SetChildrenTimeline(parentTaskUId, _this.flat.filter(i => i.TaskUId == parentTaskUId)[0])
                this.execDivResize = true;
            }
            else {//cancelled
                _this.flat.splice(index, 1);
                if (_this.inTransitTargetFlat.filter(a => a.TaskUId == entityTaskUId).length > 0) {
                    _this.flat = _this.inTransitTargetFlat.slice(0);
                    _this.targetBuilderTools = _this.getHierarchicalData(_this.flat, _this.flat[0].ParentTaskUId);
                    this.execDivResize = true;
                }
            }
        });
    }

    SetChildrenTimeline(entityTaskUId: any, parentData: any) {
        //Setting the timeline of all children with respect to its parent entity timeline 
        let _this = this;
        if (_this.flat.filter(x => x.ParentTaskUId == entityTaskUId).length > 0) {
            _this.flat.filter(x => x.ParentTaskUId == entityTaskUId).forEach(function setTimeline(item) {

                if (item.PlannedStart != undefined && item.PlannedFinish != undefined) {
                    let childStartDate = item.PlannedStart.length == undefined ? item.PlannedStart.toJSON().split('T')[0] : item.PlannedStart;
                    let childEndDate = item.PlannedFinish.length == undefined ? item.PlannedFinish.toJSON().split('T')[0] : item.PlannedFinish;
                    if ((childStartDate < parentData.PlannedStart) || (childEndDate > parentData.PlannedFinish)) {
                        item.PlannedStart = parentData.PlannedStart;
                        item.PlannedFinish = parentData.PlannedFinish;
                        if (item.TaskType == "Release") {
                            if (_this.global["RELEASEFLAT"] != undefined) {
                                for (let i = 0; i < _this.global["RELEASEFLAT"].length; i++) {
                                    if (_this.global["RELEASEFLAT"][i].ReleaseUId == item.TaskUId) {
                                        _this.global["RELEASEFLAT"][i].PlannedStartDate = item.PlannedStart;
                                        _this.global["RELEASEFLAT"][i].PlannedEndDate = item.PlannedFinish;
                                    }
                                }
                            }
                        }
                        if (item.TaskType == "Iteration") {
                            if (_this.global["ITERATIONFLAT"] != undefined) {
                                for (let i = 0; i < _this.global["ITERATIONFLAT"].length; i++) {
                                    if (_this.global["ITERATIONFLAT"][i].IterationUId == item.TaskUId) {
                                        _this.global["ITERATIONFLAT"][i].PlannedStartDate = item.PlannedStart;
                                        _this.global["ITERATIONFLAT"][i].PlannedEndDate = item.PlannedFinish;
                                    }
                                }
                            }
                        }
                        if (item.TaskType == "Phase") {
                            if (_this.global["PHASEFLAT"] != undefined) {
                                for (let i = 0; i < _this.global["PHASEFLAT"].length; i++) {
                                    if (_this.global["PHASEFLAT"][i].PhaseUId == item.TaskUId) {
                                        _this.global["PHASEFLAT"][i].PlannedStartDate = item.PlannedStart;
                                        _this.global["PHASEFLAT"][i].PlannedEndDate = item.PlannedFinish;
                                    }
                                }
                            }
                        }
                        if (item.TaskType == "Task") {
                            if (_this.global["TASKFLAT"] != undefined) {
                                for (let i = 0; i < _this.global["TASKFLAT"].length; i++) {
                                    if (_this.global["TASKFLAT"][i].ActivityUId == item.TaskUId) {
                                        _this.global["TASKFLAT"][i].PlannedStartDate = item.PlannedStart;
                                        _this.global["TASKFLAT"][i].PlannedEndDate = item.PlannedFinish;
                                    }
                                }
                            }
                        }
                        if (item.TaskType == "FunctionalArea") {
                            if (_this.global["FUNCTIONALFLAT"] != undefined) {
                                for (let i = 0; i < _this.global["FUNCTIONALFLAT"].length; i++) {
                                    if (_this.global["FUNCTIONALFLAT"][i].FunctionalAreaUId == item.TaskUId) {
                                        _this.global["FUNCTIONALFLAT"][i].PlannedStartDate = item.PlannedStart;
                                        _this.global["FUNCTIONALFLAT"][i].PlannedEndDate = item.PlannedFinish;
                                    }
                                }
                            }
                        }
                        if (item.TaskType == "Sprint/Iteration") {
                            if (_this.global["SPRINTFLAT"] != undefined) {
                                for (let i = 0; i < _this.global["SPRINTFLAT"].length; i++) {
                                    if (_this.global["SPRINTFLAT"][i].SprintUId == item.TaskUId) {
                                        _this.global["SPRINTFLAT"][i].PlannedStartDate = item.PlannedStart;
                                        _this.global["SPRINTFLAT"][i].PlannedEndDate = item.PlannedFinish;
                                    }
                                }
                            }
                        }
                    }

                    /*Checking if inner child exists*/
                    if (_this.flat.filter(x => x.ParentTaskUId == item.TaskUId).length > 0) {
                        _this.flat.filter(x => x.ParentTaskUId == item.TaskUId).forEach(setTimeline);
                    }
                }
            });
        }
        _this.orderFlatJson();
        if (_this.flat.length > 0) {
            _this.targetBuilderTools = this.getHierarchicalData(this.flat, this.flat[0].ParentTaskUId);
        } else {
            _this.targetBuilderTools = this.getHierarchicalData(this.flat, 0);
        }
    }
    ConvertDateTimeToString(date) {
        var d = new Date(date),
            month = '' + (d.getMonth() + 1),
            day = '' + d.getDate(),
            year = d.getFullYear();

        if (month.length < 2) month = '0' + month;
        if (day.length < 2) day = '0' + day;

        return [year, month, day].join('-');
    }

    renderCompareTimeLine() {
        var team_member_ids = [
            '1',
            '2',
            '3',
            '4',
            '5'
        ];
        var _this = this;
        var data = this.flat;
        var svg = d3.select("svg");
        svg.selectAll("*").remove();

        //Dynamically added the height of builder-container and set to the canvas
        var renderCompareHgtForCanvas = $('.builder-container').length > 0 ? $('.builder-container').height() : 200;
        var setRenderCompareCanvasHeight = renderCompareHgtForCanvas + 100;

        //var width = 1366,
        //    height = 670,
        //    panX = 0;
        if ($(window).width() < 768) {
            console.log("Handheld devices");
            //height = 670,
            var width = 1349,//= 1366,
                height = setRenderCompareCanvasHeight,
                panX = 0;
        }
        else if ($(window).width() > 768 && $(window).width() < 1199) {
            //height = 670,
            var width = 1150,
                height = setRenderCompareCanvasHeight,
                panX = 0;
        }
        else if ($(window).width() > 1200) {
            //height = 670,
            var width = 1250,
                height = setRenderCompareCanvasHeight,
                panX = 0;
        }

        this.send_date = new Date();
        var timelineStartDate = this.send_date;
        timelineStartDate.setMonth(timelineStartDate.getMonth());
        timelineStartDate.setDate(-1);
        if (this.timelineGridStartDate == null) {
            this.timelineGridStartDate = timelineStartDate.toISOString().slice(0, 10);
            _this.timelinemonthdate = this.timelineGridStartDate;

        }
        this.send_date.setMonth(this.send_date.getMonth() + 12);
        if (this.timelineGridEndDate == null)
            this.timelineGridEndDate = this.send_date.toISOString().slice(0, 10);
        var ticksCount = (this.monthDiff(new Date(this.timelinemonthdate), new Date(this.timelineGridEndDate)));
        var xScale: any = d3.time.scale().domain([new Date(this.timelinemonthdate), new Date(this.timelineGridEndDate)]).range([0, this.timeLineGridWidth]),
            yScale = d3.scale.ordinal().domain(team_member_ids).rangeRoundBands([0, height], 0, 0),
            xAxis = d3.svg.axis().scale(xScale).ticks(ticksCount).orient('top').tickFormat(d3.time.format("%b %Y"));
        console.log(xScale);
        var zoom = d3.behavior.zoom().scaleExtent([.5, 1]).x(xScale)
            .on('zoom', function () {
                render();
                // zoomed();
            })
            .on('zoomend', function () {
                if (xScale.domain()[1] > d3.time.day.offset(d3.max(data.map(function (d) { return (new Date(d.PlannedFinish)); })), 4)) {
                    // data = data.concat(later_data);
                    render();

                }
            });
        var canvas = d3.select('#testsvg0')
            // var canvas = d3.select('#timeline1').append('.ca')
            .attr('height', height)
            .attr('width', width)
            .call(zoom)
            .on("wheel.zoom", null);
        //Timeline positioning 
        var xAxisSelection = canvas.append('g')
            .attr('class', 'x axis')
            .attr('transform', 'translate(0, 30)')
            .attr('word-spacing', '5');

        var canvasGroup = canvas.append('g')
            .attr('class', 'canvasGroup')
            .attr('transform', 'translate(0,60)');
        //var todayline = canvasGroup.append("line");
        var Rectline = canvasGroup.append("line");
        var todayImage = canvasGroup.append("image");

        var render = function () {
            xAxisSelection.call(xAxis).selectAll("text")
                .attr("x", "53");
            xAxisSelection.selectAll("line")
                .attr("y2", "-30")
                .attr("y1", "2");

            todayImage.attr("x", function (d) {
                var startDate = d3.time.day.floor(new Date());
                var xposition = xScale(startDate);
                return (parseFloat(xposition) - 12);
            })
                .attr("xlink:href", "../images/output-onlinepngtools.png")
                .attr("y", -25)
                .attr('height', 20)
                .attr('width', 25);
            var startDateVL = d3.time.day.floor(new Date());
            //Change the position of timeline dotted line left and top 
            $('#CurrentDateVL').offset({ left: xScale(startDateVL) });
            $('#CurrentDateVL').offset({ top: 140 });
            Rectline.attr("x1", 0)
                .attr("y1", -5)
                .attr("x2", "100%")
                .attr("y2", -5)
                .attr("stroke-width", 0.5)
                .attr("stroke", "Black")
                .attr("stroke-style", "dotted");

            var tasks = canvasGroup.selectAll('.task').data(data);

            tasks.enter()
                //.append('svg:rect')delsy
                .append(function (d) {
                    if (d.TaskType == 'Milestone') {
                        var p = document.getElementById("milestoneTasksRelease");
                        console.log(_this.MilestoneFlat, 'Rendertimeline');

                        if (document.getElementById("div_" + d.TaskUId) == null || document.getElementById("div_" + d.TaskUId) == undefined) {
                            if (d.ParentTaskUId != 0) {
                                var parentTaskType = _this.flat.filter(i => i.TaskUId == d.ParentTaskUId)[0].TaskType;
                                /*Except Functional Area and Tasks, milestone can be linked to all other entities*/
                                if (parentTaskType != "FunctionalArea" && parentTaskType != "Task") {
                                    if (_this.MilestoneFlat.length > 0) {
                                        //if (_this.MilestoneFlat.filter(a => a.ParentTaskUId == d.ParentTaskUId).length == 0) {
                                        var newElement = document.createElement('div');
                                        newElement.setAttribute('id', "div_" + d.TaskUId);
                                        newElement.innerHTML = '<img class="flag-on-main-scr" id = "img_' + d.TaskUId + '" src="./images/redflag.png" style="height:20px; width:20px;"/>';
                                        newElement.style.position = 'absolute';
                                        newElement.style.zIndex = "1";
                                        newElement.onclick = function () { _this.ShowEntityPopUp('Milestone', '', "div_" + d.TaskUId); }
                                        p.appendChild(newElement);
                                        //}
                                    }
                                    else {
                                        var newElement = document.createElement('div');
                                        newElement.setAttribute('id', "div_" + d.TaskUId);
                                        newElement.innerHTML = '<img class="flag-on-main-scr" id = "img_' + d.TaskUId + '" src="./images/redflag.png" style="height:20px; width:20px;"/>';
                                        newElement.style.position = 'absolute';
                                        newElement.style.zIndex = "1";
                                        newElement.onclick = function () { _this.ShowEntityPopUp('Milestone', '', "div_" + d.TaskUId); }
                                        p.appendChild(newElement);
                                    }
                                }
                            }
                            //$("#img_" + d.TaskUId).position({
                            //    my: 'right top-20', at: 'right+25 top', of: '#div_' + d.ParentTaskUId
                            //});
                        }
                    }
                    return document.createElementNS('http://www.w3.org/2000/svg', 'rect');
                })
                .attr('class', 'task')
                .transition()
                .duration(500)
                .attr("id", function (d) { return 'svg_' + d.TaskUId })
            //.attr('opacity', 0.75); //commented

            tasks
                .attr('fill', "#F2F2F2") //commented
                //.attr('fill', "red") //Uncommented
                .attr('x', function (d) {
                    var startDate = d3.time.day.floor(new Date(d.PlannedStart));
                    return xScale(startDate);
                })
                .attr('y', function (d) {
                    return yScale(d.TaskUId);
                })
                .attr('height', 25)
                .attr('width', function (d) {
                    var startDate = d3.time.day.floor(new Date(d.PlannedStart));
                    var endDate = d3.time.day.ceil(new Date(d.PlannedFinish));
                    return xScale(endDate) - xScale(startDate);
                });
        };

        ////////////////////////////////////
        var canvas1 = d3.select('#testsvg1')
            // var canvas = d3.select('#timeline1').append('.ca')
            .attr('height', height)
            .attr('width', width)

        //Timeline positioning 
        var xAxisSelection1 = canvas1.append('g')
            .attr('class', 'x axis')
            .attr('transform', 'translate(0, 30)')
            .attr('word-spacing', '5');
        var canvasGroup1 = canvas1.append('g')
            .attr('class', 'canvasGroup')
            .attr('transform', 'translate(0,60)');
        //var todayline = canvasGroup.append("line");
        var Rectline1 = canvasGroup1.append("line");
        var todayImage1 = canvasGroup1.append("image");

        var render1 = function () {
            xAxisSelection1.call(xAxis).selectAll("text")
                .attr("x", "53");
            xAxisSelection1.selectAll("line")
                .attr("y2", "-30")
                .attr("y1", "2");

            todayImage1.attr("x", function (d) {
                var startDate = d3.time.day.floor(new Date());
                var xposition = xScale(startDate);
                return (parseFloat(xposition) - 12);
            })
                .attr("xlink:href", "../images/output-onlinepngtools.png")
                .attr("y", -25)
                .attr('height', 20)
                .attr('width', 25);
            var startDateVL = d3.time.day.floor(new Date());

            //Change the position of timeline dotted line left and top 
            $('#CurrentDateVL').offset({ left: xScale(startDateVL) });
            $('#CurrentDateVL').offset({ top: 140 });
            Rectline1.attr("x1", 0)
                .attr("y1", -5)
                .attr("x2", "100%")
                .attr("y2", -5)
                .attr("stroke-width", 0.5)
                .attr("stroke", "Black")
                .attr("stroke-style", "dotted");

            var tasks1 = canvasGroup1.selectAll('.task').data(data);

            tasks1.enter()
                //.append('svg:rect')delsy
                .append(function (d) {
                    if (d.TaskType == 'Milestone') {
                        var p = document.getElementById("timeline1");
                        console.log(_this.MilestoneFlat, 'Rendertimeline');

                        if (document.getElementById("div_" + d.TaskUId) == null || document.getElementById("div_" + d.TaskUId) == undefined) {
                            if (d.ParentTaskUId != 0) {
                                var parentTaskType = _this.flat.filter(i => i.TaskUId == d.ParentTaskUId)[0].TaskType;
                                /*Except Functional Area and Tasks, milestone can be linked to all other entities*/
                                if (parentTaskType != "FunctionalArea" && parentTaskType != "Task") {
                                    if (_this.MilestoneFlat.length > 0) {
                                        //if (_this.MilestoneFlat.filter(a => a.ParentTaskUId == d.ParentTaskUId).length == 0) {
                                        var newElement = document.createElement('div');
                                        newElement.setAttribute('id', "div_" + d.TaskUId);
                                        newElement.innerHTML = '<img class="flag-on-main-scr" id = "img_' + d.TaskUId + '" src="./images/redflag.png" style="height:20px; width:20px;"/>';
                                        newElement.style.position = 'absolute';
                                        newElement.style.zIndex = "2";
                                        newElement.onclick = function () { _this.ShowEntityPopUp('Milestone', '', "div_" + d.TaskUId); }
                                        p.appendChild(newElement);
                                        //}
                                    }
                                    else {
                                        var newElement = document.createElement('div');
                                        newElement.setAttribute('id', "div_" + d.TaskUId);
                                        newElement.innerHTML = '<img class="flag-on-main-scr" id = "img_' + d.TaskUId + '" src="./images/redflag.png" style="height:20px; width:20px;"/>';
                                        newElement.style.position = 'absolute';
                                        newElement.style.zIndex = "2";
                                        newElement.onclick = function () { _this.ShowEntityPopUp('Milestone', '', "div_" + d.TaskUId); }
                                        p.appendChild(newElement);
                                    }
                                }
                            }
                            //$("#img_" + d.TaskUId).position({
                            //    my: 'right top-20', at: 'right+25 top', of: '#div_' + d.ParentTaskUId
                            //});
                        }
                    }
                    return document.createElementNS('http://www.w3.org/2000/svg', 'rect');
                })
                .attr('class', 'task')
                .transition()
                .duration(500)
                .attr("id", function (d) { return 'svg_' + d.TaskUId })
            //.attr('opacity', 0.75); //commented

            tasks1
                .attr('fill', "#F2F2F2") //commented
                //.attr('fill', "red") //Uncommented
                .attr('x', function (d) {
                    var startDate = d3.time.day.floor(new Date(d.PlannedStart));
                    return xScale(startDate);
                })
                .attr('y', function (d) {
                    return yScale(d.TaskUId);
                })
                .attr('height', 25)
                .attr('width', function (d) {
                    var startDate = d3.time.day.floor(new Date(d.PlannedStart));
                    var endDate = d3.time.day.ceil(new Date(d.PlannedFinish));
                    return xScale(endDate) - xScale(startDate);
                });
        };


        ///////////////////
        var separationline = d3.select('#separationline')
            .attr('height', 70)
            .attr('width', width)

        var separationlineGroup = separationline.append('g')
            .attr('class', 'canvasGroup')

        var separationline1 = separationlineGroup.append("line");

        var renderSL = function () {

            separationline1.attr("x1", 0)
                .attr("y1", -5)
                .attr("x2", "100%")
                .attr("y2", -5)
                .attr("stroke-width", 30)
                .attr("stroke", "Grey")
                .attr("stroke-style", "dotted")
        };

        render();
        render1();
        renderSL();
    }

    getMonthsArray(start, end) {
        //var endDate = end.split('-');
        //var endDate1 = parseInt(endDate[1]) + 1;
        //endDate1.toString();
        //endDate[1] = endDate1;
        //end = endDate[0] + "-" + endDate[1] +"-"+ endDate[2];   
        var QuarterTicks2 = new Array(),
            dt = new Date(start);
        end = new Date(end);
        dt.setDate(1);
        while (dt <= end) {
            QuarterTicks2.push({
                "date": new Date(dt.setDate(1))
            });
            //  dt.setDate(dt.getMonth() + 1);
            dt.setMonth(dt.getMonth() + 1)
        }
        return QuarterTicks2;

    }

    rendertimeline() {
        var team_member_ids = [
            '1',
            '2',
            '3',
            '4',
            '5'
        ];
        var _this = this;
        var data = this.flat;
        var milestonedata = this.MilestoneFlat;
        var svg = d3.select("svg");
        svg.selectAll("*").remove();
        //Dynamically added the height of builder-container and set to the canvas
        var renderHgtForCanvas = $('.builder-container').length > 0 ? $('.builder-container').height() : 200;
        var setRenderCanvasHeight = renderHgtForCanvas + 100;

        //var width = 1366,
        //    height = 670,
        //    panX = 1;
        if ($(window).width() < 768) {
            console.log("Handheld devices");
            //height = 670,
            var width = 1349,//= 1366,
                height = setRenderCanvasHeight;
            //panX = 1;
        }
        else if ($(window).width() > 768 && $(window).width() < 1199) {
            //height = 670,
            var width = 1150,
                height = setRenderCanvasHeight;
            //panX = 1;
        }
        else if ($(window).width() > 1200) {
            //height = 670,
            var width = 1250,
                height = setRenderCanvasHeight;
            //panX = 1;
        }

        if (this.panX == undefined)
            this.panX = 1;

        this.send_date = new Date();

        var date = new Date();

        this.send_date = new Date(date.getFullYear(), date.getMonth(), 1);

        //this.send_date.setDate(-1);
        var tempdate = this.ConvertDateTimeToString(this.send_date.toDateString());

        if (this.timelineGridStartDate == null) {
            this.timelineGridStartDate = tempdate;
            var formattedTimelineStart = new Date(this.timelineGridStartDate).setDate(-1);
            this.timelinemonthdate = this.ConvertDateTimeToString(new Date(formattedTimelineStart).toDateString());
            this.timelineGridStartMonth = new Date(this.timelineGridStartDate).getMonth();
        }

        this.send_date.setMonth(this.send_date.getMonth() + 12);

        if (this.timelineGridEndDate == null)

            this.timelineGridEndDate = this.send_date.toISOString().slice(0, 10);

        var ticksCount = (this.monthDiff(new Date(this.timelinemonthdate), new Date(this.timelineGridEndDate)));

        var timelineWidth = $("#div_scroll").css('width');
        width = parseFloat(timelineWidth);
        var eachMonthWidth;
        if (ticksCount >= 12) {
            eachMonthWidth = width / 12;
        }
        else {
            eachMonthWidth = width / (ticksCount + 1);
        }
        var eachMonthQWidth = 0;
        if (this.panX == 1)
            eachMonthQWidth = eachMonthWidth;
        if (this.panX == 1.25)
            eachMonthQWidth = eachMonthWidth + (eachMonthWidth / 4);
        if (this.panX == 1.5)
            eachMonthQWidth = eachMonthWidth + (eachMonthWidth / 4) * 2;
        if (this.panX == 1.75)
            eachMonthQWidth = eachMonthWidth + (eachMonthWidth / 4) * 3;

        width = eachMonthQWidth * parseInt(ticksCount + 1);
        //}
        //$("#CurrentDateVL").attr('width', width + "px");
        $("#timeline").css('width', width + "px");
        //$(".builder-container").css('width', width + "px");
        $(".ngx-dnd-container.parentDNDContainer, .root-container, .builder-container").css('width', width + "px");
        this.timeLineGridWidth = width;
        var QuarterTicks3 = this.getMonthsArray(this.timelinemonthdate, this.timelineGridEndDate);

        //var xScale: any = d3.time.scale().domain([new Date(this.timelinemonthdate), new Date(this.timelineGridEndDate)]).nice().range([0, this.timeLineGridWidth]),
        var xScale: any = d3.time.scale().domain([new Date(this.timelinemonthdate), new Date(this.timelineGridEndDate)]).range([0, width]),
            yScale = d3.scale.ordinal().domain(team_member_ids).rangeRoundBands([0, height], 0, 0),
            xAxis = d3.svg.axis().scale(xScale).ticks(ticksCount).orient('top').tickFormat(d3.time.format("%b"));
        console.log(xScale);
        var QuarterTicks = [];
        QuarterTicks[0] = _this.timelineGridStartMonth;
        for (let i = 1; i < 4; i++) {
            QuarterTicks[i] = (QuarterTicks[i - 1] + 3) < 13 ? ((QuarterTicks[i - 1] + 3) == 12 ? 0 : (QuarterTicks[i - 1] + 3)) : (QuarterTicks[i - 1] + 3) - 12;//QuarterTicks[i-1] + 3 : 
        }

        //var QuarterTicks3 = this.getMonthsArray(this.timelinemonthdate, this.timelineGridEndDate);
        var QuarterTicks4 = [];
        for (let i = 0; i < QuarterTicks3.length; i++) {
            for (let j = 0; j < QuarterTicks.length; j++) {
                if (QuarterTicks3[i].date.getMonth() == QuarterTicks[j]) {
                    QuarterTicks4.push(QuarterTicks3[i]);
                }
            }
        }
        //var xScale1: any = d3.time.scale().domain([new Date(this.timelineGridStartDate), new Date(this.timelineGridEndDate)]).range([0, this.timeLineGridWidth]);
        var xAxis3 = d3.svg.axis()
            .scale(xScale)
            .orient("bottom")
            .tickValues(QuarterTicks4.map(function (d) {
                return d.date;
            })
            )
            // .ticks()
            // .ticks(2)
            // .tickSize(5, 0)
            .tickFormat(
                function (xScale) {
                    // get the milliseconds since Epoch for the date
                    var m = (xScale.getTime());
                    var v = new Date(m);
                    var mon = v.getMonth();
                    var yr = v.getFullYear();
                    if (mon >= QuarterTicks[0] && mon < QuarterTicks[1]) {
                        return "Q1 - " + yr;
                    }
                    else if (mon >= QuarterTicks[0] && QuarterTicks[1] == 0) {
                        return "Q1 - " + yr;
                    }
                    else if (mon >= QuarterTicks[0] && mon == QuarterTicks[0]) {
                        return "Q1 - " + yr;
                    }

                    else if (mon >= QuarterTicks[1] && mon < QuarterTicks[2]) {
                        return "Q2 - " + yr;
                    }
                    else if (mon >= QuarterTicks[1] && QuarterTicks[2] == 0) {
                        return "Q2 - " + yr;
                    }
                    else if (mon >= QuarterTicks[1] && mon == QuarterTicks[1]) {
                        return "Q2 - " + yr;
                    }
                    else if (mon >= QuarterTicks[2] && mon < QuarterTicks[3]) {
                        return "Q3 - " + yr;
                    }
                    else if (mon >= QuarterTicks[2] && QuarterTicks[3] == 0) {
                        return "Q3 - " + yr;
                    }
                    else if (mon >= QuarterTicks[2] && mon == QuarterTicks[2]) {
                        return "Q3 - " + yr;
                    }
                    else if (mon >= QuarterTicks[3] && mon < QuarterTicks[0]) {
                        return "Q4 - " + yr;
                    }
                    else if (mon >= QuarterTicks[3] && QuarterTicks[3] == 0) {
                        return "Q4 - " + yr;
                    }
                    else if (mon >= QuarterTicks[3] && mon == QuarterTicks[3]) {
                        return "Q4 - " + yr;
                    }
                });
        var zoom = d3.behavior.zoom().scaleExtent([1, 1.75]).x(xScale)
            .on('zoom', function () {
                render();
            })
            .on('zoomend', function () {
                if (xScale.domain()[1] > d3.time.day.offset(d3.max(
                    data.map(function (d) {
                        return (new Date(d.PlannedFinish));
                    })), 4)) {
                    //data = data.concat(later_data);             
                    render();
                }
            });

        var canvas = d3.select('.canvas')
            // var canvas = d3.select('#timeline1').append('.ca')
            .attr('height', height)
            .attr('width', width)
            .call(zoom)
            .on("wheel.zoom", null);

        //Timeline positioning 
        var xAxisSelection = canvas.append('g')
            .attr('class', 'x axis')
            .attr('transform', 'translate(1, 30)')
            .attr('word-spacing', '5');
        var canvasGroup = canvas.append('g')
            .attr('class', 'canvasGroup')
            .attr('transform', 'translate(0,60)');

        //Quarter positioning 
        var xAxisQSelection = canvas.append('g')
            .attr('class', 'x axis')
            .attr('transform', 'translate(0, 20)')
        var canvasQGroup = canvas.append('g')
            .attr('class', 'canvasQGroup')
            .attr('transform', 'translate(0,30)');

        //var todayline = canvasGroup.append("line");
        var Rectline = canvasGroup.append("line");
        var RectQline = canvasQGroup.append("line");
        var todayImage = canvasGroup.append("image");
        var render = function () {
            xAxisSelection.call(xAxis).selectAll("text")
                .attr("x", "53")
                .attr("y", "15");
            xAxisSelection.selectAll("line")
                .attr("y2", "22")
                .attr("y1", "-1");
            xAxisQSelection.call(xAxis3).selectAll("text")
                .attr("x", function (d) {
                    console.log(_this.panX);
                    if (_this.panX == 1)
                        return "170";
                    if (_this.panX == 1.25)
                        return "200";
                    if (_this.panX == 1.5)
                        return "250";
                    if (_this.panX == 1.75)
                        return "290";
                })
                .attr("y", "-12");
            xAxisQSelection.selectAll("line")
                .attr("y2", "4")
                .attr("y1", "-20")
                .attr("x2", "0")
                .attr("x1", "0")

            todayImage.attr("x", function (d) {
                var startDate = d3.time.day.floor(new Date());
                var xposition = xScale(startDate);
                return (parseFloat(xposition) - 12);
            })
                .attr("xlink:href", "../images/output-onlinepngtools.png")
                .attr("y", -25)
                .attr('height', 20)
                .attr('width', 25);
            var startDateVL = d3.time.day.floor(new Date());

            //Change the position of timeline dotted line left and top 
            //$('#CurrentDateVL').offset({ left: xScale(startDateVL) });
            $('#CurrentDateVL').css("margin-left", xScale(startDateVL) + "px");
            $('#CurrentDateVL').offset({ top: 140 });
            Rectline.attr("x1", 0)
                .attr("y1", -5)
                .attr("x2", "100%")
                .attr("y2", -5)
                .attr("stroke-width", 0.5)
                .attr("stroke", "Black")
                .attr("stroke-style", "dotted");
            RectQline.attr("x1", 0)
                .attr("y1", -5)
                .attr("x2", "100%")
                .attr("y2", -5)
                .attr("stroke-width", 0.5)
                .attr("stroke", "Black")
                .attr("stroke-style", "dotted");

            var tasks = canvasGroup.selectAll('.task').data(data);

            tasks.enter()
                //.append('svg:rect')delsy
                .append(function (d) {
                    if (d.TaskType == 'Milestone') {
                        var p = document.getElementById("milestoneTasksFlag");
                        console.log(_this.MilestoneFlat, 'Rendertimeline');

                        if (document.getElementById("div_" + d.TaskUId) == null || document.getElementById("div_" + d.TaskUId) == undefined) {
                            if (d.ParentTaskUId != 0) {
                                var parentTaskType = _this.flat.filter(i => i.TaskUId == d.ParentTaskUId)[0].TaskType;
                                /*Except Functional Area and Tasks, milestone can be linked to all other entities*/
                                if (parentTaskType != "FunctionalArea" && parentTaskType != "Task") {
                                    if (_this.MilestoneFlat.length > 0) {
                                        //if (_this.MilestoneFlat.filter(a => a.ParentTaskUId == d.ParentTaskUId).length == 0) {
                                        var newElement = document.createElement('div');
                                        newElement.setAttribute('id', "div_" + d.TaskUId);
                                        newElement.innerHTML = '<img class="flag-on-main-scr" id = "img_' + d.TaskUId + '" src="./images/redflag.png" style="height:20px; width:20px;"/>';
                                        newElement.style.position = 'absolute';
                                        newElement.style.zIndex = "1";
                                        newElement.style.width = "1px";
                                        newElement.onclick = function () { _this.ShowEntityPopUp('Milestone', '', "div_" + d.TaskUId); }
                                        p.appendChild(newElement);
                                        //}
                                    }
                                    else {
                                        var newElement = document.createElement('div');
                                        newElement.setAttribute('id', "div_" + d.TaskUId);
                                        newElement.innerHTML = '<img class="flag-on-main-scr" id = "img_' + d.TaskUId + '" src="./images/redflag.png" style="height:20px; width:20px;"/>';
                                        newElement.style.position = 'absolute';
                                        newElement.style.zIndex = "1";
                                        newElement.style.width = "1px";
                                        newElement.onclick = function () { _this.ShowEntityPopUp('Milestone', '', "div_" + d.TaskUId); }
                                        p.appendChild(newElement);
                                    }
                                }
                            }
                        }
                    }
                    return document.createElementNS('http://www.w3.org/2000/svg', 'rect');
                })
                .attr('class', 'task')
                .transition()
                .duration(500)
                .attr("id", function (d) { return 'svg_' + d.TaskUId })
                .attr('opacity', 0.0)

            tasks
                .attr('fill', "white") //commented
                //.attr('fill', "red") //Uncommented
                .attr('x', function (d) {
                    var startDate = new Date();
                    if (d.TaskType == 'Milestone') {
                        if (d.BaselineStartDate != undefined && d.BaselineStartDate != '')
                            startDate = d3.time.day.floor(new Date(d.BaselineStartDate));
                        else {
                            if (d.ParentTaskUId != 0) {
                                var BaselineStartDate = _this.flat.filter(i => i.TaskUId == d.ParentTaskUId)[0].PlannedFinish;
                                startDate = d3.time.day.floor(new Date(BaselineStartDate));
                            }
                        }
                        return xScale(startDate);
                    }
                    else {
                        startDate = d3.time.day.floor(new Date(d.PlannedStart));
                        return xScale(startDate);
                    }
                })
                .attr('y', function (d) {
                    return yScale(d.TaskUId);
                })
                .attr('height', 25)
                .attr('width', function (d) {
                    var startDate = new Date();
                    var endDate = new Date();
                    if (d.TaskType == 'Milestone') {
                        if (d.BaselineStartDate != undefined && d.BaselineStartDate != '') {
                            startDate = d3.time.day.floor(new Date(d.BaselineStartDate));
                            endDate = d3.time.day.ceil(new Date(d.BaselineStartDate));
                        }
                        else {
                            if (d.ParentTaskUId != 0) {
                                var BaselineStartDate = _this.flat.filter(i => i.TaskUId == d.ParentTaskUId)[0].PlannedFinish;
                                startDate = d3.time.day.floor(new Date(BaselineStartDate));
                                endDate = d3.time.day.ceil(new Date(BaselineStartDate));
                            }
                        }
                        return xScale(endDate) - xScale(startDate);
                    }
                    else {
                        startDate = d3.time.day.floor(new Date(d.PlannedStart));
                        endDate = d3.time.day.ceil(new Date(d.PlannedFinish));
                        return xScale(endDate) - xScale(startDate);
                    }
                });
        };

        function zoomInFn() {
            _this.editentity = false;
            if (_this.panX < 1.75) {
                _this.panX = _this.panX + 0.25;
                _this.zoomPercent = _this.panX * 100 + "%";
                _this.count = _this.count + 1;
            }
            _this.rendertimeline();
            _this.execDivResize = true;
        }

        function zoomOutFn() {
            if (_this.panX > 1) {
                _this.panX = _this.panX - 0.25;
                _this.count = _this.count - 1;
                if (_this.count == 0) {
                    _this.editentity = true;
                }
                _this.zoomPercent = _this.panX * 100 + "%";
            }
            _this.rendertimeline();
            _this.execDivResize = true;
        }

        function zoomResetFn() {
            _this.count = 0;
            _this.editentity = true;
            _this.panX = 1;
            _this.rendertimeline();
            _this.execDivResize = true;
            _this.zoomPercent = _this.panX * 100 + "%";
        }

        //function zoomReset() {
        //    //var _this = this;
        //    _this.editentity = true;
        //    _this.panX = 1;
        //    _this.zoomPercent = _this.panX * 100 + "%";
        //    _this.rendertimeline();
        //    _this.execDivResize = true;

        //}        

        function zoomed() {
            svg.select('.x-axis').call(xAxis)
            //canvas.selectAll('rect').each(function (d, i) {
            //    console.log(d.TaskUId);
            //    var test2 = canvas.selectAll("rect[id='svg_" + d.TaskUId + "']");

            //    $("#div_" + d.TaskUId).parent().css("width", test2.style("width"));
            //    $("#div_" + d.TaskUId).parent().css("marginLeft", (test2.attr("x") + "px"));
            //    //document.getElementById("div_" + d.TaskUId).style.width = test2.style("width");
            //    //document.getElementById("div_" + d.TaskUId).style.marginLeft = test2.attr("x") + "px";
            //});

        }
        d3.select("#ZoomInDiv").on('click', zoomInFn);
        d3.select("#ZoomOutDiv").on('click', zoomOutFn);
        d3.select("#ZoomResetDiv").on('click', zoomResetFn);
        // d3.select("#reset").on('click', zoomReset);
        render();
        //zoomed();

    }

    monthDiff(d1, d2) {
        var months;
        months = (d2.getFullYear() - d1.getFullYear()) * 12;
        months -= d1.getMonth() + 1;
        months += d2.getMonth();
        return months <= 0 ? 0 : months;
    }

    setContainerAxis(event: any) {
        var svg = d3.select("svg");
        svg.selectAll('rect').each(function (d, i) {
            console.log(d.TaskUId);
            var test2 = svg.selectAll("rect[id='svg_" + d.TaskUId + "']");

            $("#div_" + d.TaskUId).parent().css("width", test2.style("width"));
            $("#div_" + d.TaskUId).parent().css("marginLeft", (test2.attr("x") + "px"));
        });
    }

    getTimelineDate() {
        var svg = d3.select("svg");
        var test3 = svg.selectAll("rect[id='svg_1']");
        //var xScale = d3.time.scale().domain([new Date(this.timelineGridStartDate), new Date(this.timelineGridEndDate)]).range([0, 900]);
        var xScale = d3.time.scale().domain([new Date(this.timelinemonthdate), new Date(this.timelineGridEndDate)]).range([0, this.timeLineGridWidth]);

        var xPosition = test3.style("x");
        xPosition = xPosition.substring(0, xPosition.length - 2);
        var rectWidth = test3.style("width");
        rectWidth = rectWidth.substring(0, rectWidth.length - 2);
        var startDate = xScale.invert(parseFloat(xPosition));
        var endDate = xScale.invert(parseFloat(xPosition) + parseFloat(rectWidth));
        console.log(test3.attr("x"));
    }

    setSVGAxis() {
        var svg = d3.select("svg");
        svg.selectAll('rect').each(function (d, i) {
            var test3 = svg.selectAll("rect[id='svg_" + d.TaskUId + "']");

            var rectLeft = document.getElementById("div_" + d.TaskUId).style.left;
            rectLeft = rectLeft.substring(0, rectLeft.length - 2);

            var svgLeft = test3.attr("x");
            svgLeft = svgLeft.substring(0, svgLeft.length - 2);
            var finalsvgLeft = parseFloat(svgLeft) + parseFloat(rectLeft)
            test3.style("x", finalsvgLeft);
            test3.style("width", document.getElementById("div_" + d.TaskUId).style.width);
        });

        //var svg = d3.select("svg");
        //svg.selectAll('rect').each(function (d, i) {
        //    console.log(d.TaskUId);
        //    var test2 = svg.selectAll("rect[id='svg_" + d.TaskUId + "']");

        //    $("#div_" + d.TaskUId).parent().css("width", test2.style("width"));
        //    $("#div_" + d.TaskUId).parent().css("marginLeft", (test2.attr("x") + "px"));
        //});
    }

    expandcollapsepanel(ecid: any) {
        var id;
        if (typeof ecid === 'object')
            id = ecid.id;
        else
            id = ecid;

        var _this = this;
        if (this.flat.filter(x => x.ParentTaskUId == id.split('_')[1]).length > 0) {
            this.flat.filter(x => x.ParentTaskUId == id.split('_')[1]).forEach(function hide(item) {


                if (_this.MilestoneFlat.filter(x => x.ParentTaskUId == item.TaskUId).length > 0) {
                    var a = _this.MilestoneFlat.filter(x => x.ParentTaskUId == item.TaskUId);
                    if ($("#img_" + a[0].TaskUId).css('display') != 'none') {
                        $("#img_" + a[0].TaskUId).css("display", "none");
                    }
                    else {
                        $("#img_" + a[0].TaskUId).css("display", "block");
                    }
                }
                if (_this.flat.filter(x => x.ParentTaskUId == item.TaskUId).length > 0) {

                    _this.flat.filter(x => x.ParentTaskUId == item.TaskUId).forEach(hide);
                }
            });

        }
        $('#' + id).find('.shadow.content').toggle();
        if ($('#' + id + '> .shadow.content').css('display') == 'none') {
            this.isCollapsed = true;
            $(event.target).parent().parent().addClass('expandInitContent');
        } else {
            this.isCollapsed = false;
            $(event.target).parent().parent().removeClass('expandInitContent');

        }
        _this.AlignMilestone(_this.timelinemonthdate, _this.timelineGridEndDate);
    }
    //expandcollapshistory(ecid: any) {
    //    var id = ecid.id;
    //    $('#' + id).find('.hiscomments').toggle();
    //}
    expandcollapshistory() {
        this.historycolumns = true;
    }
    getFlat(array: any, parentid: any) {
        return array.reduce((r: any, o: any) => {
            var temp = {};
            r.push(temp);
            Object.entries(o).forEach(([k, v]) => {
                if (k.startsWith('Children')) {
                    r.push(...this.getFlat(v, o.TaskUId));
                } else {
                    temp[k] = v;
                }
            });
            temp["ParentTaskUId"] = parentid;
            return r;
        }, []);
    }

    getHierarchical(data: any[], parent: any): any[] {
        const result = data.filter(d => d.ParentTaskUId === parent);
        if (!result && !result.length) {
            return null;
        }
        return result.map(({ RoadMapTaskId, Title, InputType, Icon, BarColor, Associativescopeselector, AssociativescopeselectorId, PlannedStart, PlannedFinish, Levels, OutlineNumber, DeliveryConstructUId, TaskUId, TaskType, IsEnabled, PositionSettings, HeightPositionSetting, IsEditedFromEntity, DeletedEntity, ParentTaskUId, MaxWidth, MinWidth, Orderid, Rowid, sprintDaysDuration, sprintWeeksDuration, ReleaseMethodologyType, Display, BaselinedatInitlevel, AssociatedOverAllReleaseUId, PlannedEfforts, Submenu, isBaselineAutoSave, BaselinedDate }) =>
            ({ RoadMapTaskId, Title, InputType, Icon, BarColor, Associativescopeselector, AssociativescopeselectorId, PlannedStart, PlannedFinish, Levels, OutlineNumber, DeliveryConstructUId, TaskUId, TaskType, IsEnabled, PositionSettings, HeightPositionSetting, IsEditedFromEntity, DeletedEntity, ParentTaskUId, MaxWidth, MinWidth, Orderid, Rowid, sprintDaysDuration, sprintWeeksDuration, ReleaseMethodologyType, Display, BaselinedatInitlevel, AssociatedOverAllReleaseUId, PlannedEfforts, Submenu, isBaselineAutoSave, BaselinedDate, Children: this.getHierarchical(data, RoadMapTaskId) }))
    }

    getHierarchicalData(data: any[], parent: any): any[] {
        //const result = data.filter(d => d.ParentTaskUId === parent);
        const result = data.filter(d => d.ParentTaskUId === parent).sort(function (a, b) { return a.Orderid - b.Orderid });
        if (!result && !result.length) {
            return null;
        }
        return result.map(({ _id, RoadmapMappingUId, RoadMapTaskId, Title, InputType, Associativescopeselector, AssociativescopeselectorId, Icon, PlannedStart, PlannedFinish, BarColor, BarFontSize, Levels, OutlineNumber, DeliveryConstructUId, TaskUId, isEnabled, TaskType, PositionSettings, HeightPositionSetting, IsEditedFromEntity, Orderid, Rowid, DeletedEntity, ParentTaskUId, MaxWidth, MinWidth, BaselineStartDate, LegendIcon, sprintDaysDuration, sprintWeeksDuration, ReleaseMethodologyType, BaselinedatInitlevel, AssociatedOverAllReleaseUId, PlannedEfforts, Submenu, isBaselineAutoSave, BaselinedDate }) =>
            ({ _id, RoadmapMappingUId, RoadMapTaskId, Title, InputType, Associativescopeselector, AssociativescopeselectorId, Icon, PlannedStart, PlannedFinish, BarColor, BarFontSize, Levels, OutlineNumber, DeliveryConstructUId, TaskUId, isEnabled, TaskType, PositionSettings, HeightPositionSetting, IsEditedFromEntity, Orderid, Rowid, DeletedEntity, ParentTaskUId, MaxWidth, MinWidth, BaselineStartDate, LegendIcon, sprintDaysDuration, sprintWeeksDuration, ReleaseMethodologyType, BaselinedatInitlevel, AssociatedOverAllReleaseUId, PlannedEfforts, Submenu, isBaselineAutoSave, BaselinedDate, Children: this.getHierarchicalData(data, TaskUId) }))
        //return result.map(({ _id, RoadMapMappingUId, RoadMapTaskId, Title, InputType, Icon, PlannedStart, PlannedFinish, BarColor, BarFontSize, Levels, OutlineNumber, DeliveryConstructUId, TaskUId, isEnabled, TaskType, PositionSettings, HeightPositionSetting, IsEditedFromEntity }) =>
        //    ({ _id, RoadMapMappingUId, RoadMapTaskId, Title, InputType, Icon, PlannedStart, PlannedFinish, BarColor, BarFontSize, Levels, OutlineNumber, DeliveryConstructUId, TaskUId, isEnabled, TaskType, PositionSettings, HeightPositionSetting, IsEditedFromEntity, Children: this.getHierarchicalData(data, TaskUId) }))
    }

    GenerateUniqueId() {
        return function iter(o: any) {
            if (typeof o === 'object' && 'Title' in o && ('TaskUId' in o) == false) {
                o.TaskUId = Guid.raw();
            }
            //o.Orderid = 0;
            ////o.Rowid = 0;
            //o.PositionSettings = 0;
            //o.isCopied = false;
            Object.keys(o).forEach(function (k) {
                Array.isArray(o[k]) && o[k].forEach(iter);
            });
        };
    }


    ShowHistory() {

        $(".commentPopup").hide();

        if (this.isDisabledButton == true) {
            return;
        }

        if (this.roadMapUUId != "" && this.roadMapUUId != null) {
            this.showHistory = true;
            this.historytoggle = {};
            $(".historyDescription").addClass("hideme");
            $(".historyDefaultCollapse").addClass("Historycollapse");
            this.openHistorytoggle = false;
            this.showBaselineTab = false;
            //this.showBaselineInitiativeTab = false;
            this.showEditInitiative = false;
            this.showEditRelease = false;
            this.showEditPhase = false;
            this.showEditTask = false;
            this.showEditIteration = false;
            this.showAddEditSprint = false;
            this.showEditMilestone = false;
            this.showEditFunctional = false;
            this.GetHistoryData(this.roadMapUUId);
            this.ShowHistoryComments = false;
            this.showBuild = false;
            this.showExport = false;
            // this.showSettings = false;
            $('.settings').hide();


        }
    }

    CloseHistory() {
        this.showHistory = false;
    }

    ShowBaseline(EntiyId: any, isBaselineInitiative: boolean = false) {

        this.toastrService.dismissAllToastr();
        var deliveryConstructUId = this.global['DeliveryConstructUId'];
        if (deliveryConstructUId == "" || deliveryConstructUId == undefined || deliveryConstructUId == '') {
            return;
        }
        else if (this.isDisabledButton == true) {
            return;
        }

        if (this.ValidationChecktoSaveRoadmap()) {
            return;
        }

        var roadMapTitle = "";
        roadMapTitle = this.global["TITLEFORBASE"];
        if (roadMapTitle == undefined || roadMapTitle == "") {
            this.isBaselineAutoSave = true;
            this.ShowSettings();
            this.settingComp.isError = true;
            this.settingComp.errorMessage = "Roadmap Name not Entered";
            this.toastrService.showWarningToastr(this.settingComp.errorMessage);
            $(function () { $("#Title").focus() });
            $("#Title").css('border', '1px solid red');
            return true;

        }
        var inputdata = this.flat;

        if (inputdata != null && inputdata.length == 0) {
            this.isBaselineAutoSave = true;
            this.SaveWarningMessage = true;
            this.RoadmapWarningMessage = "Blank roadmap cannot be baselined.";
            this.toastrService.showErrorToastr(this.RoadmapWarningMessage);
            return true;
        }

        else {
            $("#Title").css('border', '1px solid #ccc');

            let modalOption: NgbModalOptions = {};
            modalOption.backdrop = 'static';
            modalOption.size = 'lg';
            modalOption.keyboard = false;
            modalOption.centered = true;
            //this.showHistory = false;
            const modalRef = this.modalService.open(ConfirmPromptModal, modalOption);
            modalRef.componentInstance.headerText = "Alert";
            if (isBaselineInitiative == true) {
                modalRef.componentInstance.confirmationMessage = "Do you want to baseline the roadmap at initiative level?";
            } else {
                modalRef.componentInstance.confirmationMessage = "Do you want to baseline the roadmap?";
            }
            let result = false;
            modalRef.result.then((isConfirmed: any) => {
                if (isConfirmed) {
                    this.showHistory = false;
                    this.showEditInitiative = false;
                    this.showEditRelease = false;
                    this.showEditPhase = false;
                    this.showEditTask = false;
                    this.showEditIteration = false;
                    this.showAddEditSprint = false;
                    this.showEditMilestone = false;
                    this.showEditFunctional = false;
                    this.showBuild = false;
                    this.showExport = false;
                    $('#dependency').hide();
                    // this.showSettings = false;
                    $('.settings').hide();
                    this.showFilter = false;
                    this.isCommentPopup = false;
                    this.ShowHistoryComments = false;
                    this.showBaselineTab = true;
                    this.showBaselineInitiativeTab = isBaselineInitiative;
                    if (EntiyId != undefined && EntiyId != null) {
                        this.baselineInitiativeUID = EntiyId;
                        this.baselineInitiativeName = this.flat.find(x => x.TaskUId == EntiyId).Title;
                    } else {
                        this.baselineInitiativeUID = "";
                        this.baselineInitiativeName = "";
                    }
                    $('.settings').hide();
                } else {
                    result = false;
                }
            });
            return result;

        }


    }

    ValidationChecktoSaveRoadmap() {
        var _this = this;
        var options = ['Add Initiative', 'Add Release', 'Add Iteration', 'Add Phase', 'Add Functional Area', 'Add Activity', 'Add Sprint', 'Add Milestone', 'E2E Add Iteration', 'E2E Add Phase', 'E2E Add Activity', 'E2E Add Milestone'];
        for (var i = 0; i < this.flat.length; i++) {
            if (this.flat[i].Title == " ") {
                this.RoadmapWarningMessage = "Please Enter Valid Entity Name";
                this.toastrService.showWarningToastr(this.RoadmapWarningMessage);
                this.flat.forEach(function (d) {
                    if (d.Title == " ")
                        $("#div_" + d.TaskUId).parent().addClass('highlightEntity');
                });
                return true;
            }
            if (this.MilestoneFlat != undefined && this.MilestoneFlat.length > 0) {
                var milestoneFlatData = this.MilestoneFlat.filter(x => x.ParentTaskUId == this.flat[i].TaskUId);
                if (milestoneFlatData != undefined && milestoneFlatData.length > 0) {
                    for (var k = 0; k < milestoneFlatData.length; k++) {
                        if ((milestoneFlatData[k].Title == "Add Milestone" || milestoneFlatData[k].Title == "E2E Add Milestone")
                            && milestoneFlatData[k].TaskType == "Milestone" && milestoneFlatData[k].ActionType != "Deleted") {
                            this.RoadmapWarningMessage = "Please Enter Milestone Entity Name";
                            this.toastrService.showWarningToastr(this.RoadmapWarningMessage);
                            return true;
                        }
                    }
                }
            }
            for (var j = i; j < this.flat.length; j++) {
                if (options.indexOf(this.flat[i].Title) !== -1 || options.indexOf(this.flat[j].Title) !== -1) {
                    this.SaveWarningMessage = true;
                    this.RoadmapWarningMessage = "Please Enter RoadMap Entity Name";
                    this.toastrService.showWarningToastr(this.RoadmapWarningMessage);
                    this.flat.forEach(function (d) {
                        if (options.indexOf(d.Title) !== -1)
                            $("#div_" + d.TaskUId).parent().addClass('highlightEntity');
                    });
                    return true;
                }
            }
            if (this.flat[i].PlannedEfforts == undefined) {
                this.RoadmapWarningMessage = "Roadmap cannot be saved without providing planned effort";
                this.toastrService.showWarningToastr(this.RoadmapWarningMessage);
                this.flat.forEach(function (d) {
                    if (d.PlannedEfforts == undefined)
                        $("#div_" + d.TaskUId).parent().addClass('highlightEntity');
                });
                return true;
            }
        }

    }

    ShowBaselineDetails() {
        this.showDetails = true;
    }

    CloseBaselinePopup(event: any) {
        this.showBaselineTab = event;

    }

    //CloseBaselineInitiativePopup(event: any) {
    //    this.showBaselineInitiativeTab = event;

    //}
    hideDeletebaselinedEntity(event: any) {
        var _this = this;
        if (_this.targetBuilderTools.length > 0) {
            for (var i = 0; i < _this.flat.length; i++) {
                if (_this.flat[i].TaskUId == event.InitiativeUId) {
                    _this.flat[i].BaselinedatInitlevel = true;
                    if (_this.DependencyFlat != undefined && _this.DependencyFlat.length > 0) {
                        _this.hasDependecy = _this.DependencyFlat.find(x => x.SuccessorUId == _this.flat[i].TaskUId || x.PredecessorUId == _this.flat[i].TaskUId);
                        if (_this.hasDependecy != undefined) {
                            _this.hasDependecy.BaselinedatInitlevel = true;
                        }
                    }
                    //_this.DeletedArray.push(_this.flat[i]);
                    if (_this.flat.filter(x => x.ParentTaskUId == _this.flat[i].TaskUId).length > 0) {
                        _this.flat.filter(x => x.ParentTaskUId == _this.flat[i].TaskUId).forEach(function iter(item) {
                            item.BaselinedatInitlevel = true;
                            if (_this.DependencyFlat != undefined && _this.DependencyFlat.length > 0) {
                                _this.hasDependecy = _this.DependencyFlat.find(x => x.SuccessorUId == item.TaskUId || x.PredecessorUId == item.TaskUId);
                                if (_this.hasDependecy != undefined) {
                                    _this.hasDependecy.BaselinedatInitlevel = true;
                                }
                            }
                            // _this.CloseDeletedEntitypopUp(item.TaskType)
                            // _this.DeletedArray.push(item);
                            if (_this.flat.filter(x => x.ParentTaskUId == item.TaskUId).length > 0) {

                                _this.flat.filter(x => x.ParentTaskUId == item.TaskUId).forEach(iter);
                            }

                        });
                    }
                    //else {
                    //    _this.flat[i].DeletedEntity = "True";
                    //}
                    // this.flat.splice(i, 1);



                }
            }
            $.each(_this.MilestoneFlat, function (i, d) {
                var milestonesContainer = $.grep(_this.flat, function (e) { return e.TaskUId == d.ParentTaskUId; });
                if (milestonesContainer != undefined && milestonesContainer.length > 0) {
                    d.BaselinedatInitlevel = milestonesContainer[0].BaselinedatInitlevel;
                }
            });
            _this.global["DEPENDENCYFLAT"] = _this.DependencyFlat;
        }

    }
    HideDeleteButtonInDependency() {
        var _this = this;
        if (_this.global["DEPENDENCYFLAT"] != null && _this.global["DEPENDENCYFLAT"].length > 0) {
            for (var i = 0; i < _this.global["DEPENDENCYFLAT"].length; i++) {
                if (_this.flat.filter(x => x.TaskUId == _this.global["DEPENDENCYFLAT"][i].PredecessorUId).length > 0) {
                    _this.flat.filter(x => x.TaskUId == _this.global["DEPENDENCYFLAT"][i].PredecessorUId).forEach(function iter(item) {
                        _this.global["DEPENDENCYFLAT"][i].BaselinedatInitlevel = item.BaselinedatInitlevel;
                    });

                }
            }
        }

    }

    saveBaselineMessage(event: any) {
        //this.isSaved = event;
        this.isbaselineMessage = true;
        if (event.InitiativeUId != undefined) {
            this.hideDeletebaselinedEntity(event);
            this.SaveRoadmapComments('save', false);
        } else {
            this.SaveRoadmapComments('save', true);
        }
        // this.SaveRoadmapComments('save');
        //this.isSaved = true;
        //this.successMessage = "Baseline Saved Successfully";

    }
    ShowWorkPlan() {
        this.toastrService.dismissAllToastr();
        var deliveryConstructUId = this.global['DeliveryConstructUId'];
        if (deliveryConstructUId == "" || deliveryConstructUId == undefined || deliveryConstructUId == '') {
            return;
        }
        else if (this.isDisabledButton == true) {
            return;
        }
        this.ClearDependency();
        this.showWorkPlanTab = true;
        this.showBaselineTab = false;
        //this.showBaselineInitiativeTab = false;
        this.showHistory = false;
        this.showEditInitiative = false;
        this.showEditRelease = false;
        this.showEditPhase = false;
        this.showEditTask = false;
        this.showEditIteration = false;
        this.showAddEditSprint = false;
        this.showEditMilestone = false;
        this.showEditFunctional = false;
        this.showBuild = false;
        this.showFilter == false;
        $("#showfilter").hide();
        $(".filterAppliedIcon").hide();
        $(".rmfilterAppliedIcon").hide();
        $(".filtericon").hide();
        $("#timeline").hide();
        // this.showSettings = false;
        $('.settings').hide();
        $('#dependency').hide();
        $("#Hidingfilter").hide();
        $("#ForeCast").hide();
        if (this.RoadMapFilterComponent != undefined) {
            this.RoadMapFilterComponent.CloseFilter();
        }
        $(document).ready(function () {
            var currentZoom = 1.0;
            $(".zoom_in").click(function () {
                $("#myGrid").animate({ 'zoom': currentZoom += .1 });
            });
            $(".zoom_out").click(function () {
                $("#myGrid").animate({ 'zoom': currentZoom -= .1 });
            });

            $(".builder-container").hide();
            $(".builder-source").hide();
            $(".canvas").hide();

            $("#CurrentDateVL").css("display", "none");

            setTimeout(function () {
                $(".progress_wrapper button").click(function () {
                    $(this).addClass("create_workplan");
                });
                $(".workplan_progress_section").css("display", "block");
                $(".CurrentDateVL").css("display", "none");
                $(".workplan_radio").click(function () {
                    $(this).find(".radio_innermost").toggle();
                });
                $(".progress_wrapper").css({ "display": "block", "width": "100%" });
                $(".slick-header-columns").css({ "width": "97.2%", "left": "0px" });
                $(".slick-header-column:first-child").css({ "width": "40%", "left": "0px" });
                $(".slick-header-column:not(:first-child)").css({ "width": "20%", "left": "0px" });
            }, 300);
        });

        this.ShowHistoryComments = false;
        //setTimeout(() => {
        //    //if ($('.fixHeaderPos').length > 0) {$(".showWorkPlanTab").addClass("fixedWorkPlanTab");}
        //    //else { $(".showWorkPlanTab").removeClass("fixedWorkPlanTab"); }
        //    var _isHeaderFIxedPosition = $('.fixHeaderPos').length > 0;
        //    $(".showWorkPlanTab")[_isHeaderFIxedPosition == true ? 'addClass' : 'removeClass']('fixedWorkPlanTab')
        //},2);
    }


    ShowBuild() {
        this.showBuild = true;
        $(".commentPopup").hide();

        //  this.showSettings = false;
        this.showFilter = false;
        this.showEditInitiative = false;
        this.showEditRelease = false;
        this.showEditPhase = false;
        this.showEditTask = false;
        this.showEditIteration = false;
        this.showAddEditSprint = false;
        this.showEditMilestone = false;
        this.showEditFunctional = false;
        this.showBaselineTab = false;
        //this.showBaselineInitiativeTab = false;
        this.ShowHistoryComments = false;
        this.showExport = false;
        $('.settings').hide();
        $('#dependency').hide();
    }

    CloseBuild() {
        this.showBuild = false;
    }
    //CloseFilter() {
    //    this.showFilter = false;
    //}

    ShowSettings() {
        $(".commentPopup").hide();
        var deliveryConstructUId = this.global['DeliveryConstructUId'];
        this.global["isUnSavedData"] = true;
        if (deliveryConstructUId != "" && deliveryConstructUId != undefined && deliveryConstructUId != '') {
            this.showBuild = false;
            this.showFilter = false;
            this.showEditInitiative = false;
            this.showEditRelease = false;
            this.showEditPhase = false;
            this.showEditTask = false;
            this.showEditIteration = false;
            this.showAddEditSprint = false;
            this.showEditMilestone = false;
            this.showEditFunctional = false;
            this.showSettings = true;
            $('.settings').show();
            $('#dependency').hide();
            this.showBaselineTab = false;
            //this.showBaselineInitiativeTab = false;
            this.ShowHistoryComments = false;
            //this.roadmapAssistantService.setHeightSettingTab();
            this.showExport = false;
            if ($('.settingTab .nav-tabs .nav-item .nav-link.active')[0].innerText == "Timeline") {
                $('.sidePannelContentScroll').addClass('removeContentScroll');
                $('.sidePannelContentScroll').attr('style', '');
                setTimeout(() => {
                    var getActiveTabPannel = $('.sidePannelContent .tab-pane.active').height() + 100;
                    $('.sidePannelContentScroll').css('height', getActiveTabPannel + 'px');
                }, 0);

            }
            else {
                this.roadmapAssistantService.setHeightSettingTab();
            }
        }
        else {
            let modalOption: NgbModalOptions = {};
            modalOption.backdrop = 'static';
            modalOption.size = 'lg';
            modalOption.keyboard = false;
            modalOption.centered = true;

            const modalRef = this.modalService.open(RoadmapPromptTemplates, modalOption);
            modalRef.componentInstance.headerText = "Alert"
            modalRef.componentInstance.promptModalMessage = "Please select any Delivery Construct from the scope selector";
        }
    }
    CloseSettings(event: any) {
        $('.settings').hide();
        //  this.showSettings = event;

    }

    ShowFilter() {

        $(".commentPopup").hide();
        this.roadMapFilter = false;
        this.progressBarFilter = false;
        if (this.progressbarTab == true) {
            this.roadMapFilter = false;
            this.progressBarFilter = true;
        }
        else if (this.ForeCastTab == true) {
            this.roadMapFilter = false;
            this.progressBarFilter = true;
        }
        else {
            this.progressBarFilter = false;
            this.roadMapFilter = true;
            $(".filterAppliedIcon").hide();
            this.selectedProgressFilterValues = [];
        }

        this.showBuild = false;
        // this.showSettings = false;
        this.showFilter = true;
        this.showEditInitiative = false;
        this.showEditRelease = false;
        this.showEditPhase = false;
        this.showEditTask = false;
        this.showEditIteration = false;
        this.showAddEditSprint = false;
        this.showEditMilestone = false;
        this.showEditFunctional = false;
        this.showBaselineTab = false;
        //this.showBaselineInitiativeTab = false;
        //this.showExport = false;
        this.showExport = false;
        $('.settings').hide();
        $('#dependency').hide();

    }

    //setSelectionRange(input, selectionStart, selectionEnd) {
    //    if (input.setSelectionRange) {
    //        input.focus();
    //        input.setSelectionRange(selectionStart, selectionEnd);
    //    } else if (input.createTextRange) {
    //        var range = input.createTextRange();
    //        range.collapse(true);
    //        range.moveEnd('character', selectionEnd);
    //        range.moveStart('character', selectionStart);
    //        range.select();
    //    }
    //}

    ChangeName(name: any, event: any) {
        // this.entityFontSize = event.srcElement.style.fontSize == "small" ? "medium" : event.srcElement.style.fontSize;
        this.entityFontSize = event.srcElement.style.fontSize;
        this.isTitleEdit = !this.isTitleEdit;
        var taskType = name.id.split('_')[2];
        if (taskType == "Sprint/Iteration") {
            // tasktype = 'Sprint//Iteration'
            name.id = name.id.split('_')[0] + '_' + name.id.split('_')[1] + '_' + 'Sprint\\/Iteration';
        }
        if (taskType != "Release") {
            var taskUId = name.id.split('_')[1];
            if (this.helperService.CheckIfTopParentIsProgramRelease(this.flat, taskUId)) {
                var titleValue = $.trim($('#' + name.id).val());
                var title = titleValue.split(' ');
                if (title.length > 0) {
                    if (title[0] == "E2E") {
                        title.splice(0, 1);
                        var modifiedTitle = "";
                        title.forEach(x => modifiedTitle += ((modifiedTitle != undefined && modifiedTitle != '') ? ' ' : '') + x);
                        this.flat.filter(x => x.TaskUId == taskUId)[0].Title = modifiedTitle
                        this.targetBuilderTools = this.getHierarchicalData(this.flat, this.flat[0].ParentTaskUId);
                        this.execDivResize = true;
                    }
                }
            }
        }

        this.global['EditTitleNameEntityId'] = name.id;
        setTimeout(function () {
            $('#' + name.id)[0].focus();
        }, 300)
    }
    CaptureTitleOnDbClick() {
        // any changes replicate in updateTitle()
        if (this.global['EditTitleNameEntityId'] !== null && this.global['EditTitleNameEntityId'] !== undefined &&
            this.global['EditTitleNameEntityId'] !== '') {
            const id = this.global['EditTitleNameEntityId'];
            let taskUId = id.split('_')[1];
            var taskType = id.split('_')[2];
            let newTitle = $.trim($('#' + id).val());

            if (taskType != "Release") {
                if (this.helperService.CheckIfTopParentIsProgramRelease(this.flat, taskUId)) {
                    if (newTitle == '') {
                        newTitle = this.flat.filter(x => x.TaskUId == taskUId)[0].Title;
                    }
                    let title = newTitle.split(' ');
                    if (title.length > 0) {
                        if (title[0] != "E2E") {
                            newTitle = "E2E " + newTitle;
                        }
                    }
                }
            }

            if (newTitle !== '' && this.flat.filter(x => x.TaskUId == taskUId)[0].Title.trim() !== newTitle) {
                this.isDisabledSaveButton = false;
                this.flat.filter(x => x.TaskUId == taskUId)[0].Title = newTitle
                this.targetBuilderTools = this.getHierarchicalData(this.flat, this.flat[0].ParentTaskUId);
            }
            this.global['EditTitleNameEntityId'] = '';
        }
    }

    //MouseOutText(name: any) {
    //    this.isTitleEdit = false;
    //    var taskType = name.id.split('_')[2];
    //    var taskId = name.id.split('_')[1];
    //    if (name.value == '') {
    //        $('#' + name.id).val(taskType);
    //    }

    //    if (this.targetBuilderTools.length > 0) {
    //        for (var i = 0; i < this.flat.length; i++) {
    //            if (this.flat[i].TaskUId == taskId) {
    //                this.flat[i].Title = name.value;
    //                // this.flat[i].BarColor = this.titleColor;
    //                // this.titleColor = this.flat[i].BarColor;

    //            }

    //        }
    //    }
    //    this.targetBuilderTools = this.getHierarchicalData(this.flat, this.flat[0].ParentTaskUId);
    //    this.execDivResize = true;
    //}
    CaptureTitle(event: any, name: any) {
        //setTimeout(function () {
        //    $('#' + name.id)[0].blur();
        //}, 10)
        this.isDisabledSaveButton = false;
        let taskUId = event.target.id.split('_')[1];
        let newTitle = event.target.value;
        //console.log("CaptureTitle", taskUId, newTitle);
        this.flat.filter(x => x.TaskUId == taskUId)[0].Title = newTitle;
        this.targetBuilderTools = this.getHierarchicalData(this.flat, this.flat[0].ParentTaskUId);
        //console.log(this.flat);
        this.execDivResize = true;
        var taskType = event.target.id.split('_')[2];
        if (taskType == "Sprint/Iteration") {
            event.target.id = event.target.id.split('_')[0] + '_' + event.target.id.split('_')[1] + '_' + 'Sprint\\/Iteration';
        }
        setTimeout(function () {
            $('#' + event.target.id).focus();
        }, 10)
    }

    updateTitle($event) {
        let taskUId = $event.target.id.split('_')[1];
        var taskType = $event.target.id.split('_')[2];
        let newTitle = $event.target.innerText;

        if (taskType != "Release") {
            if (this.helperService.CheckIfTopParentIsProgramRelease(this.flat, taskUId)) {
                if (newTitle == '') {
                    newTitle = this.flat.filter(x => x.TaskUId == taskUId)[0].Title;
                }
                let title = newTitle.split(' ');
                if (title.length > 0) {
                    if (title[0] != "E2E") {
                        newTitle = "E2E " + newTitle;
                    }
                }
            }
        }

        if (newTitle !== '' && this.flat.filter(x => x.TaskUId == taskUId)[0].Title.trim() !== newTitle) {
            this.isDisabledSaveButton = false;
            this.flat.filter(x => x.TaskUId == taskUId)[0].Title = newTitle
            this.targetBuilderTools = this.getHierarchicalData(this.flat, this.flat[0].ParentTaskUId);
        }
        this.isTitleEdit = false;
        this.execDivResize = true;
    }
    ShowEntityPopUp(entity: any, subMenuItem: any, containerID: any) {
        this.toastrService.dismissAllToastr();
        this.isDisabledSaveButton = false;
        this.global["isUnSavedData"] = true;
        this.entityContainerID = containerID;
        var initiative_id = containerID.split("_")[1];
        var release_id = containerID.split("_")[1];
        var iteration_id = containerID.split("_")[1];
        var phase_id = containerID.split("_")[1];
        var task_id = containerID.split("_")[1];
        // this.titleName = titlename.id.split("_")[3];
        var functional_id = containerID.split("_")[1];
        var sprint_id = containerID.split("_")[1];
        var milestone_id = containerID.split("_")[1];
        // this.titleName = titlename.id.split("_")[3];
        $('#sidePanelPopupContainer').show();
        if (entity == 'Initiative' && subMenuItem == 'Edit') {
            this.showEditInitiative = true;
            this.showEditRelease = false;
            this.showEditPhase = false;
            this.showEditTask = false;
            this.showEditIteration = false;
            this.showAddEditSprint = false;
            this.showEditMilestone = false;
            this.showFilter = false;
            this.showEditFunctional = false;
            this.showBuild = false;
            //this.showSettings = false;
            $('.settings').hide();
            $('#dependency').hide();
            this.showHistory = false;
            this.showBaselineTab = false;
            this.showExport = false;
            //this.showBaselineInitiativeTab = false;
            //this.showExport = false;
            this.ShowHistoryComments = false;
            if (this.edit != undefined) {
                this.edit.GetInitativeData(initiative_id);
            }
        }
        else if (entity == 'Release' && subMenuItem == 'Edit') {
            this.showEditRelease = true;
            //this.setEditHeight();
            this.showEditInitiative = false;
            this.showEditPhase = false;
            this.showEditTask = false;
            this.showEditIteration = false;
            this.showAddEditSprint = false;
            this.showEditMilestone = false;
            this.showFilter = false;
            //  this.showSettings = false;
            $('.settings').hide();
            $('#dependency').hide();
            this.showHistory = false;
            this.showBaselineTab = false;
            //this.showBaselineInitiativeTab = false;
            this.showEditFunctional = false;
            this.ShowHistoryComments = false;
            this.showExport = false;
            if (this.editRelease != undefined) {
                this.editRelease.GetReleaseData(release_id);
            }
        }
        else if (entity == 'Phase' && subMenuItem == 'Edit') {
            this.showEditPhase = true;
            this.showEditInitiative = false;
            this.showEditRelease = false;
            this.showEditTask = false;
            this.showEditIteration = false;
            this.showAddEditSprint = false;
            this.showEditMilestone = false;
            this.showFilter = false;
            //this.showSettings = false;
            $('.settings').hide();
            $('#dependency').hide();
            this.showHistory = false;
            this.showBaselineTab = false;
            //this.showBaselineInitiativeTab = false;
            this.showEditFunctional = false;
            this.ShowHistoryComments = false;
            this.showExport = false;
            if (this.editPhase != undefined) {
                this.editPhase.GetPhaseData(phase_id);
            }
        }
        else if (entity == 'Task' && subMenuItem == 'Edit') {
            this.showEditTask = true;
            this.showEditInitiative = false;
            this.showEditRelease = false;
            this.showEditPhase = false;
            this.showEditIteration = false;
            this.showAddEditSprint = false;
            this.showEditMilestone = false;
            this.showFilter = false;
            //   this.showSettings = false;
            $('.settings').hide();
            $('#dependency').hide();
            this.showHistory = false;
            this.showBaselineTab = false;
            //this.showBaselineInitiativeTab = false;
            this.showEditFunctional = false;
            this.ShowHistoryComments = false;
            this.showExport = false;

            if (this.editTask != undefined) {
                this.editTask.GetTaskData(task_id);
            }
        }
        else if (entity == "Iteration" && subMenuItem == "Edit") {
            this.showEditIteration = true;
            this.showEditTask = false;
            this.showEditInitiative = false;
            this.showEditRelease = false;
            this.showEditPhase = false;
            this.showAddEditSprint = false;
            this.showEditMilestone = false;
            this.showFilter = false;
            //  this.showSettings = false;
            $('.settings').hide();
            $('#dependency').hide();
            this.showHistory = false;
            this.showBaselineTab = false;
            //this.showBaselineInitiativeTab = false;
            this.showEditFunctional = false;
            this.ShowHistoryComments = false;
            this.showExport = false;
            if (this.editIteration != undefined) {
                this.editIteration.GetIterationData(iteration_id);
            }
        }
        else if (entity == "Milestone") {
            this.showEditMilestone = true;
            this.showEditIteration = false;
            this.showEditTask = false;
            this.showEditInitiative = false;
            this.showEditRelease = false;
            this.showEditPhase = false;
            this.showAddEditSprint = false;
            this.showFilter = false;
            //this.showSettings = false;
            $('.settings').hide();
            $('#dependency').hide();
            this.showHistory = false;
            this.showBaselineTab = false;
            //this.showBaselineInitiativeTab = false;
            this.showEditFunctional = false;
            this.ShowHistoryComments = false;
            this.showExport = false;
            if (this.editMilestone != undefined) {
                this.editMilestone.GetMilestoneData(milestone_id);
            }
        }
        else if (entity == "Sprint/Iteration" && subMenuItem == "Edit") {
            this.showEditIteration = false;
            this.showEditTask = false;
            this.showEditInitiative = false;
            this.showEditRelease = false;
            this.showEditPhase = false;
            this.showFilter = false;
            //   this.showSettings = false;
            $('.settings').hide();
            $('#dependency').hide();
            this.showHistory = false;
            this.showBaselineTab = false;
            //this.showBaselineInitiativeTab = false;
            this.showAddEditSprint = true;
            this.showEditFunctional = false;
            this.ShowHistoryComments = false;
            this.showExport = false;
            if (this.sprintEdit != undefined) {
                this.sprintEdit.GetSprintData(sprint_id);
            }
        }
        else if (entity == "FunctionalArea" && subMenuItem == "Edit") {
            this.showEditIteration = false;
            this.showEditTask = false;
            this.showEditInitiative = false;
            this.showEditRelease = false;
            this.showEditPhase = false;
            this.showFilter = false;
            this.showExport = false;
            //  this.showSettings = false;
            $('.settings').hide();

            this.showHistory = false;
            this.showBaselineTab = false;
            //this.showBaselineInitiativeTab = false;
            this.showAddEditSprint = false;
            this.showEditFunctional = true;
            this.ShowHistoryComments = false;
            $('#dependency').hide();
            if (this.functionalEdit != undefined) {
                this.functionalEdit.GetfunctionalData(functional_id);
            }
        }
        else if (entity == 'Dependency') {
            var dependency_id = containerID.split("_")[1];
            console.log('Edit Dependency');
            this.showEditDependency = true;
            $('#dependency').show();
            this.showEditRelease = false;
            this.showEditInitiative = false;
            this.showEditPhase = false;
            this.showEditTask = false;
            this.showEditIteration = false;
            this.showAddEditSprint = false;
            this.showEditMilestone = false;
            this.showFilter = false;
            this.showExport = false;
            //  this.showSettings = false;
            $('.settings').hide();

            this.showHistory = false;
            this.showBaselineTab = false;
            //this.showBaselineInitiativeTab = false;
            this.showEditFunctional = false;
            this.ShowHistoryComments = false;
            if (this.editDependency != undefined) {
                this.editDependency.GetDependencyData(dependency_id);
            }
        }
        else if (entity == 'Initiative' && subMenuItem == 'Delete') {
            // this.showEditIteration = false;
            this.showEditInitiative = false;
            this.DeleteRoadmapEntity(containerID.split("_")[1])
        }
        else if (entity == 'Release' && subMenuItem == 'Delete') {
            //this.isReleaseeDelete = true;
            this.showEditRelease = false;
            this.DeleteRoadmapEntity(containerID.split("_")[1])

        }
        else if (entity == 'Iteration' && subMenuItem == 'Delete') {
            // this.isIterationDelete = true;
            this.showEditIteration = false;
            this.DeleteRoadmapEntity(containerID.split("_")[1])
        }
        else if (entity == 'Phase' && subMenuItem == 'Delete') {
            this.showEditPhase = false;
            this.DeleteRoadmapEntity(containerID.split("_")[1])
        }
        else if (entity == 'Task' && subMenuItem == 'Delete') {
            this.showEditTask = false;
            this.DeleteRoadmapEntity(containerID.split("_")[1])
        }
        else if (entity == 'Sprint/Iteration' && subMenuItem == 'Delete') {
            this.showAddEditSprint = false;
            this.DeleteRoadmapEntity(containerID.split("_")[1])
        }
        else if (entity == 'FunctionalArea' && subMenuItem == 'Delete') {
            this.showEditFunctional = false;
            this.DeleteRoadmapEntity(containerID.split("_")[1])
        }
        else if (entity == 'Initiative' && subMenuItem == 'Copy') {
            this.showEditInitiative = false;
            this.CopyRoadmapEntity(containerID.split("_")[1])
        }
        else if (entity == 'Release' && subMenuItem == 'Copy') {
            this.showEditRelease = false;
            this.CopyRoadmapEntity(containerID.split("_")[1])

        }
        else if (entity == 'Iteration' && subMenuItem == 'Copy') {
            this.showEditIteration = false;
            this.CopyRoadmapEntity(containerID.split("_")[1])
        }
        else if (entity == 'FunctionalArea' && subMenuItem == 'Copy') {
            this.showEditFunctional = false;
            this.CopyRoadmapEntity(containerID.split("_")[1])
        }


        else if (entity == 'Initiative' && subMenuItem == 'Baseline') {
            //this.showEditFunctional = false;
            this.ShowBaseline(containerID.split("_")[1], true);
        }

    }

    CloseDeletedEntitypopUp(tasktype: any) {
        if (tasktype == "Initiative") {
            this.showEditInitiative = false;
        }
        else if (tasktype == "Release") {
            this.showEditRelease = false;
        }
        else if (tasktype == "Iteration") {
            this.showEditIteration = false;
        }
        else if (tasktype == "Phase") {
            this.showEditPhase = false;
        }
        else if (tasktype == "Task") {
            this.showEditTask = false;
        }
        else if (tasktype == "FunctionalArea") {
            this.showEditFunctional = false;
        }
        else if (tasktype == "Sprint/Iteration") {
            this.showAddEditSprint = false;
        }
    }

    showDependencyPopUp() {
        console.log("Dependency click");
        this.showEditDependency = true;
        this.entityContainerID = undefined;
        $('#dependency').show();
        if (this.editDependency != undefined) {
            this.editDependency.clearDependencyData();
        }
    }

    DeleteRoadmapEntity(EntiyId: any) {
        let m = -1;
        let parentToDelete = EntiyId;
        let tempArray = [];
        let tempSubArray = [];
        var _this = this;
        tempArray = this.flat.slice(0);

        if (_this.targetBuilderTools.length > 0) {
            for (var i = 0; i < tempArray.length; i++) {

                //if (tempArray[i].TaskUId == parentToDelete) {
                //    if (this.flat.filter(function (a) { return a.ParentTaskUId == tempArray[i].TaskUId; }).length > 0) {
                //        parentToDelete = this.flat.filter(function (a) { return a.ParentTaskUId == parentToDelete; })[0].TaskUId;
                //    }
                //    // this.flat.splice(i, 1);
                //    this.flat[i].DeletedEntity = "True";
                //}
                if (tempArray[i].TaskUId == parentToDelete) {
                    _this.flat[i].DeletedEntity = "True";
                    _this.CloseDeletedEntitypopUp(_this.flat[i].TaskType)
                    _this.DeletedArray.push(_this.flat[i]);
                    if (_this.DependencyFlat != undefined && _this.DependencyFlat.length > 0) {
                        _this.hasDependecy = _this.DependencyFlat.find(x => x.SuccessorUId == tempArray[i].TaskUId || x.PredecessorUId == tempArray[i].TaskUId);
                        if (_this.hasDependecy != undefined) {
                            _this.RemoveDependencyLine(_this.hasDependecy.DependencyUId);
                        }
                    }
                    /*if User delete Over all(Program)Release, untagging that over all release from associated project release*/
                    if (_this.flat[i].ParentTaskUId == 0 && _this.flat[i].TaskType == "Release") {
                        var associatedProjectreleases = _this.flat.filter(x => x.AssociatedOverAllReleaseUId == _this.flat[i].TaskUId);
                        if (associatedProjectreleases.length > 0) {
                            associatedProjectreleases.forEach(function (item) {
                                _this.flat.filter(x => x.TaskUId == item.TaskUId)[0].AssociatedOverAllReleaseUId = null;
                            });
                        }
                    }
                    /*------*/
                    if (_this.flat.filter(x => x.ParentTaskUId == tempArray[i].TaskUId).length > 0) {
                        _this.flat.filter(x => x.ParentTaskUId == tempArray[i].TaskUId).forEach(function iter(item) {
                            item.DeletedEntity = "True";
                            _this.CloseDeletedEntitypopUp(item.TaskType)
                            _this.DeletedArray.push(item);
                            if (_this.DependencyFlat != undefined && _this.DependencyFlat.length > 0) {
                                _this.hasDependecy = _this.DependencyFlat.find(x => x.SuccessorUId == item.TaskUId || x.PredecessorUId == item.TaskUId);
                                if (_this.hasDependecy != undefined) {
                                    _this.RemoveDependencyLine(_this.hasDependecy.DependencyUId);
                                }
                            }

                            if (_this.flat.filter(x => x.ParentTaskUId == item.TaskUId).length > 0) {

                                _this.flat.filter(x => x.ParentTaskUId == item.TaskUId).forEach(iter);
                            }

                        });
                    }
                    //else {
                    //    _this.flat[i].DeletedEntity = "True";
                    //}
                    // this.flat.splice(i, 1);
                }

            }
            // let deletedtempArray = [];          
            if (_this.flat.filter(a => a.DeletedEntity == "True").length > 0) {
                let filterArray = _this.flat.filter(a => a.DeletedEntity != "True");
                //deletedtempArray = this.flat.filter(a => a.DeletedEntity == "True");
                //  this.DeletedArray.push(this.flat.filter(a => a.DeletedEntity == "True"));
                _this.flat = filterArray;
            }
            _this.orderFlatJson();
            if (this.global["ROADMAPFILTERSETTINGSFLAT"] != undefined && this.global["ISFILTERED"] == true) {
                var filterData = this.global["ROADMAPFILTERSETTINGSFLAT"];
                var filteredData = [];
                var flatData = this.flat;
                filterData.forEach(function (item) {
                    var tempArr = flatData.filter(x => x.TaskUId == item.TaskUId);
                    for (let i = 0; i < tempArr.length; i++) {
                        filteredData.push(tempArr[i]);
                    }
                });
                this.targetBuilderTools = this.getHierarchicalData(filteredData, filteredData[0].ParentTaskUId);
            }
            else {
                if (_this.flat.length > 0) {
                    _this.targetBuilderTools = this.getHierarchicalData(this.flat, this.flat[0].ParentTaskUId);
                } else {
                    _this.targetBuilderTools = this.getHierarchicalData(this.flat, 0);
                }
            }
            $.each(this.MilestoneFlat, function (i: any, d: any) {
                var milestonesContainer = $.grep(_this.flat, function (e: any) { return e.TaskUId == d.ParentTaskUId });
                if (milestonesContainer != undefined && milestonesContainer.length == 0) {
                    d.DeletedEntity = "True";
                    d.ActionType = "Deleted";
                }
            });

            _this.execDivResize = true;
        }
        _this.ValidateSourceBuilderTools();
    }

    CopyRoadmapEntity(EntityId: any) {
        let parentToCopy = EntityId;
        let ecid = "ec_" + EntityId;
        if (this.isCollapsed == true)
            this.expandcollapsepanel(ecid);
        let tempArray = [];
        var _this = this;
        var CopyArray: any[] = [];
        var MilestoneCopyArray: any[] = [];
        //tempArray = this.flat.slice(0);
        if (_this.targetBuilderTools.length > 0) {
            for (var i = 0; i < _this.flat.length; i++) {
                if (_this.flat[i].TaskUId == parentToCopy) {
                    CopyArray.push(JSON.parse(JSON.stringify(_this.flat[i])));

                    if (_this.MilestoneFlat.filter(x => x.ParentTaskUId == _this.flat[i].TaskUId && x.ActionType != "Deleted").length > 0) {
                        MilestoneCopyArray.push(JSON.parse(JSON.stringify(_this.MilestoneFlat.filter(x => x.ParentTaskUId == _this.flat[i].TaskUId && x.ActionType != "Deleted")[0])));
                    }
                    if (_this.flat.filter(x => x.ParentTaskUId == _this.flat[i].TaskUId).length > 0) {
                        _this.flat.filter(x => x.ParentTaskUId == _this.flat[i].TaskUId).forEach(function iter(item) {
                            CopyArray.push(JSON.parse(JSON.stringify(item)));
                            if (_this.MilestoneFlat.filter(x => x.ParentTaskUId == item.TaskUId && x.ActionType != "Deleted").length > 0) {
                                MilestoneCopyArray.push(JSON.parse(JSON.stringify(_this.MilestoneFlat.filter(x => x.ParentTaskUId == item.TaskUId && x.ActionType != "Deleted")[0])));
                            }
                            if (_this.flat.filter(x => x.ParentTaskUId == item.TaskUId).length > 0) {
                                _this.flat.filter(x => x.ParentTaskUId == item.TaskUId).forEach(iter);
                            }
                        });
                    }
                }
            }
        }
        for (var i = 0; i < CopyArray.length; i++) {
            var oldTaskUId = CopyArray[i].TaskUId;
            var newTaskUId = Guid.raw();
            var childEntity = $.grep(CopyArray, function (e: any) { return e.ParentTaskUId == oldTaskUId });
            var childMilestoneEntity = $.grep(MilestoneCopyArray, function (e: any) { return e.ParentTaskUId == oldTaskUId });
            if (childEntity.length > 0) {
                for (var j = 0; j < childEntity.length; j++) {
                    childEntity[j].ParentTaskUId = newTaskUId;
                }
            }
            if (childMilestoneEntity.length > 0) {
                var newMilestoneTaskUId = Guid.raw();
                for (var j = 0; j < childMilestoneEntity.length; j++) {
                    var oldMilestoneTaskUId = childMilestoneEntity[j].TaskUId;
                    childMilestoneEntity[j].ParentTaskUId = newTaskUId;
                    childMilestoneEntity[j].OldTaskUId = oldMilestoneTaskUId;
                    childMilestoneEntity[j].TaskUId = newMilestoneTaskUId;
                    childMilestoneEntity[j].RoadmapMappingUId = undefined;
                }

            }
            CopyArray[i].OldTaskUId = oldTaskUId;
            CopyArray[i].TaskUId = newTaskUId;
            CopyArray[i].BaselinedatInitlevel = false;
            CopyArray[i].RoadmapMappingUId = undefined;
        }
        let newCopyArray = CopyArray.concat(MilestoneCopyArray);

        var copyVersion = this.global["COPYVERSION"];
        if (copyVersion == null || copyVersion == undefined || copyVersion == 0) {
            this.CopyVersion = 1;
        }
        if (this.CopyVersion == undefined) {
            this.CopyVersion = this.global["COPYVERSION"];
        }
        copyVersion = this.CopyVersion;
        for (var i = 0; i < newCopyArray.length; i++) {
            //console.log("length" + newCopyArray.length);
            //newCopyArray[i].Title = newCopyArray[i].Title + "(" + this.CopyVersion + ")";
            if (i == 0) {
                newCopyArray[i].Title = newCopyArray[i].Title + "(" + this.CopyVersion + ")";
            }
            else {
                newCopyArray[i].Title = newCopyArray[i].Title;
            }
        }
        this.flat.forEach(function (item) {
            item.CopyVersion = copyVersion;
        });
        for (var i = 0; i < newCopyArray.length; i++) {
            let newTitle = newCopyArray[i].Title;
            let newTaskUId = newCopyArray[i].TaskUId;
            let oldTaskUId = newCopyArray[i].OldTaskUId;
            switch (newCopyArray[i].TaskType) {
                case "Initiative":
                    if (this.global["INITIATIVEFLAT"] == undefined) {
                        _this.roadmapAssistantService.GetInitiativeDetails(oldTaskUId).subscribe((response) => {
                            if (response != null) {
                                if (response.length > 0) {
                                    var oldInitiativeDetails = response;

                                    var initiativeFlatJsonData = [];
                                    if (oldInitiativeDetails.length > 0) {
                                        var initiativeData = oldInitiativeDetails;
                                        initiativeData[0].InitiativeUId = newTaskUId;
                                        initiativeData[0].Name = newTitle;
                                        initiativeFlatJsonData.push(initiativeData[0]);
                                        this.global["INITIATIVEFLAT"] = initiativeFlatJsonData;
                                    }
                                }
                            }
                        });
                    }
                    if (this.global["INITIATIVEFLAT"] != undefined) {

                        var initiativeFlatJsonData = this.global["INITIATIVEFLAT"];

                        if (initiativeFlatJsonData.filter(x => x.InitiativeUId == oldTaskUId).length > 0) {
                            var oldInitiative = JSON.parse(JSON.stringify(initiativeFlatJsonData.filter(x => x.InitiativeUId == oldTaskUId)));
                            if (oldInitiative.length > 0) {
                                var initiativeData = oldInitiative;
                                initiativeData[0].InitiativeUId = newTaskUId;
                                initiativeData[0].Name = newTitle;
                                initiativeFlatJsonData.push(initiativeData[0]);
                                this.global["INITIATIVEFLAT"] = initiativeFlatJsonData;
                            }
                        }
                        else {
                            _this.roadmapAssistantService.GetInitiativeDetails(oldTaskUId).subscribe((response) => {
                                if (response != null) {
                                    if (response.length > 0) {
                                        var oldInitiativeDetails = response;

                                        if (oldInitiativeDetails.length > 0) {
                                            var initiativeData = oldInitiativeDetails;
                                            initiativeData[0].InitiativeUId = newTaskUId;
                                            initiativeData[0].Name = newTitle;
                                            initiativeFlatJsonData.push(initiativeData[0]);
                                            this.global["INITIATIVEFLAT"] = initiativeFlatJsonData;
                                        }
                                    }
                                }
                            });
                        }
                    }
                    break;
                case "Release":
                    if (this.global["RELEASEFLAT"] == undefined) {
                        _this.roadmapAssistantService.GetReleaseDetails(oldTaskUId).subscribe((response) => {
                            if (response != null) {
                                if (response.length > 0) {
                                    var oldReleaseDetails = response;

                                    var releaseFlatJsonData = [];
                                    if (oldReleaseDetails.length > 0) {
                                        var releaseData = oldReleaseDetails;
                                        releaseData[0].ReleaseUId = newTaskUId;
                                        releaseData[0].Name = newTitle;
                                        releaseFlatJsonData.push(releaseData[0]);                                       
                                        this.global["RELEASEFLAT"] = releaseFlatJsonData;
                                    }
                                }
                            }
                        });
                    }
                    if (this.global["RELEASEFLAT"] != undefined) {
                        var releaseFlatJsonData = this.global["RELEASEFLAT"];
                        if (releaseFlatJsonData.filter(x => x.ReleaseUId == oldTaskUId).length > 0) {
                            var oldRelease = JSON.parse(JSON.stringify(releaseFlatJsonData.filter(x => x.ReleaseUId == oldTaskUId)));
                            if (oldRelease.length > 0) {
                                var releaseData = oldRelease;
                                releaseData[0].ReleaseUId = newTaskUId;
                                releaseData[0].Name = newTitle;
                                releaseFlatJsonData.push(releaseData[0]);
                                this.global["RELEASEFLAT"] = releaseFlatJsonData;
                            }
                        }
                        else {
                            _this.roadmapAssistantService.GetReleaseDetails(oldTaskUId).subscribe((response) => {
                                if (response != null) {
                                    if (response.length > 0) {
                                        var oldReleaseDetails = response;

                                        if (oldReleaseDetails.length > 0) {
                                            var releaseData = oldReleaseDetails;
                                            releaseData[0].ReleaseUId = newTaskUId;
                                            releaseData[0].Name = newTitle;
                                            releaseFlatJsonData.push(releaseData[0]);
                                            this.global["RELEASEFLAT"] = releaseFlatJsonData;
                                        }
                                    }
                                }
                            });
                        }
                    }
                    break;
                case "Iteration":
                    if (this.global["ITERATIONFLAT"] == undefined) {
                        _this.roadmapAssistantService.GetIterationDetails(oldTaskUId).subscribe((response) => {
                            if (response != null) {
                                if (response.length > 0) {
                                    var oldIterationDetails = response;

                                    var iterationFlatJsonData = [];
                                    if (oldIterationDetails.length > 0) {
                                        var iterationData = oldIterationDetails;
                                        iterationData[0].IterationUId = newTaskUId;
                                        iterationData[0].Name = newTitle;
                                        iterationFlatJsonData.push(iterationData[0]);
                                        this.global["ITERATIONFLAT"] = iterationFlatJsonData;
                                    }
                                }
                            }
                        });
                    }
                    if (this.global["ITERATIONFLAT"] != undefined) {

                        var iterationFlatJsonData = this.global["ITERATIONFLAT"];

                        if (iterationFlatJsonData.filter(x => x.IterationUId == oldTaskUId).length > 0) {
                            var oldIteration = JSON.parse(JSON.stringify(iterationFlatJsonData.filter(x => x.IterationUId == oldTaskUId)));
                            if (oldIteration.length > 0) {
                                var iterationData = oldIteration;
                                iterationData[0].IterationUId = newTaskUId;
                                iterationData[0].Name = newTitle;
                                iterationFlatJsonData.push(iterationData[0]);
                                this.global["ITERATIONFLAT"] = iterationFlatJsonData;
                            }
                        }
                        else {
                            _this.roadmapAssistantService.GetIterationDetails(oldTaskUId).subscribe((response) => {
                                if (response != null) {
                                    if (response.length > 0) {
                                        var oldIterationDetails = response;

                                        if (oldIterationDetails.length > 0) {
                                            var iterationData = oldIterationDetails;
                                            iterationData[0].IterationUId = newTaskUId;
                                            iterationData[0].Name = newTitle;
                                            iterationFlatJsonData.push(iterationData[0]);
                                            this.global["ITERATIONFLAT"] = iterationFlatJsonData;
                                        }
                                    }
                                }
                            });
                        }
                    }
                    break;
                case "FunctionalArea":
                    if (this.global["FUNCTIONALFLAT"] == undefined) {
                        _this.roadmapAssistantService.GetfunctionalData(oldTaskUId).subscribe((response) => {
                            if (response != null) {
                                if (response.length > 0) {
                                    var oldFunctionalArea = response;

                                    var functionalFlatJsonData = [];
                                    if (oldFunctionalArea.length > 0) {
                                        var functionalData = oldFunctionalArea;
                                        functionalData[0].FunctionalAreaUId = newTaskUId;
                                        functionalData[0].Name = newTitle;
                                        functionalFlatJsonData.push(functionalData[0]);
                                        this.global["FUNCTIONALFLAT"] = functionalFlatJsonData;
                                    }
                                }
                            }
                        });
                    }
                    if (this.global["FUNCTIONALFLAT"] != undefined) {

                        var functionalFlatJsonData = this.global["FUNCTIONALFLAT"];

                        if (functionalFlatJsonData.filter(x => x.FunctionalAreaUId == oldTaskUId).length > 0) {
                            var oldFunctionalArea = JSON.parse(JSON.stringify(functionalFlatJsonData.filter(x => x.FunctionalAreaUId == oldTaskUId)));
                            if (oldFunctionalArea.length > 0) {
                                var functionalData = oldFunctionalArea;
                                functionalData[0].FunctionalAreaUId = newTaskUId;
                                functionalData[0].Name = newTitle;
                                functionalFlatJsonData.push(functionalData[0]);
                                this.global["FUNCTIONALFLAT"] = functionalFlatJsonData;
                            }
                        }
                        else {
                            _this.roadmapAssistantService.GetfunctionalData(oldTaskUId).subscribe((response) => {
                                if (response != null) {
                                    if (response.length > 0) {
                                        var oldFunctionalArea = response;

                                        if (oldFunctionalArea.length > 0) {
                                            var functionalData = oldFunctionalArea;
                                            functionalData[0].FunctionalAreaUId = newTaskUId;
                                            functionalData[0].Name = newTitle;
                                            functionalFlatJsonData.push(functionalData[0]);
                                            this.global["FUNCTIONALFLAT"] = functionalFlatJsonData;
                                        }
                                    }
                                }
                            });
                        }
                    }
                    break;
                case "Sprint/Iteration":
                    if (this.global["SPRINTFLAT"] == undefined) {
                        _this.roadmapAssistantService.GetSprintDetails(oldTaskUId).subscribe((response) => {
                            if (response != null) {
                                if (response.length > 0) {
                                    var oldSprint = response;

                                    var SprintFlatJsonData = [];
                                    if (oldSprint.length > 0) {
                                        var sprintData = oldSprint;
                                        sprintData[0].SprintUId = newTaskUId;
                                        sprintData[0].Name = newTitle;
                                        SprintFlatJsonData.push(sprintData[0]);
                                        this.global["SPRINTFLAT"] = SprintFlatJsonData;
                                    }
                                }
                            }
                        });
                    }
                    if (this.global["SPRINTFLAT"] != undefined) {

                        var SprintFlatJsonData = this.global["SPRINTFLAT"];

                        if (SprintFlatJsonData.filter(x => x.SprintUId == oldTaskUId).length > 0) {
                            var oldSprint = JSON.parse(JSON.stringify(SprintFlatJsonData.filter(x => x.SprintUId == oldTaskUId)));
                            if (oldSprint.length > 0) {
                                var sprintData = oldSprint;
                                sprintData[0].SprintUId = newTaskUId;
                                sprintData[0].Name = newTitle;
                                SprintFlatJsonData.push(sprintData[0]);
                                this.global["SPRINTFLAT"] = SprintFlatJsonData;
                            }
                        }
                        else {
                            _this.roadmapAssistantService.GetSprintDetails(oldTaskUId).subscribe((response) => {
                                if (response != null) {
                                    if (response.length > 0) {
                                        var oldSprint = response;

                                        if (oldSprint.length > 0) {
                                            var sprintData = oldSprint;
                                            sprintData[0].SprintUId = newTaskUId;
                                            sprintData[0].Name = newTitle;
                                            SprintFlatJsonData.push(sprintData[0]);
                                            this.global["SPRINTFLAT"] = SprintFlatJsonData;
                                        }
                                    }
                                }
                            });
                        }
                    }
                    break;
                case "Task":
                    if (this.global["TASKFLAT"] == undefined) {
                        _this.roadmapAssistantService.GetTaskDetails(oldTaskUId).subscribe((response) => {
                            if (response != null) {
                                if (response.length > 0) {
                                    var oldTask = response;

                                    var taskFlatJsonData = [];
                                    if (oldTask.length > 0) {
                                        var taskData = oldTask;
                                        taskData[0].ActivityUId = newTaskUId;
                                        taskData[0].Name = newTitle;
                                        taskFlatJsonData.push(taskData[0]);
                                        this.global["TASKFLAT"] = taskFlatJsonData;
                                    }
                                }
                            }
                        });
                    }
                    if (this.global["TASKFLAT"] != undefined) {

                        var taskFlatJsonData = this.global["TASKFLAT"];

                        if (SprintFlatJsonData.filter(x => x.ActivityUId == oldTaskUId).length > 0) {
                            var oldTask = JSON.parse(JSON.stringify(taskFlatJsonData.filter(x => x.ActivityUId == oldTaskUId)));
                            if (oldTask.length > 0) {
                                var taskData = oldTask;
                                taskData[0].ActivityUId = newTaskUId;
                                taskData[0].Name = newTitle;
                                taskFlatJsonData.push(taskData[0]);
                                this.global["TASKFLAT"] = taskFlatJsonData;
                            }
                        }
                        else {
                            _this.roadmapAssistantService.GetTaskDetails(oldTaskUId).subscribe((response) => {
                                if (response != null) {
                                    if (response.length > 0) {
                                        var oldTask = response;

                                        if (oldTask.length > 0) {
                                            var taskData = oldTask;
                                            taskData[0].ActivityUId = newTaskUId;
                                            taskData[0].Name = newTitle;
                                            taskFlatJsonData.push(taskData[0]);
                                            this.global["TASKFLAT"] = taskFlatJsonData;
                                        }
                                    }
                                }
                            });
                        }
                    }
                    break;
                case "Phase":
                    if (this.global["PHASEFLAT"] == undefined) {
                        _this.roadmapAssistantService.GetPhaseDetails(oldTaskUId).subscribe((response) => {
                            if (response != null) {
                                if (response.length > 0) {
                                    var oldPhase = response;

                                    var phaseFlatJsonData = [];
                                    if (oldPhase.length > 0) {
                                        var phaseData = oldPhase;
                                        phaseData[0].PhaseUId = newTaskUId;
                                        phaseData[0].Name = newTitle;
                                        phaseFlatJsonData.push(phaseData[0]);
                                        this.global["PHASEFLAT"] = phaseFlatJsonData;
                                    }
                                }
                            }
                        });
                    }
                    if (this.global["PHASEFLAT"] != undefined) {

                        var phaseFlatJsonData = this.global["PHASEFLAT"];

                        if (phaseFlatJsonData.filter(x => x.PhaseUId == oldTaskUId).length > 0) {
                            var oldPhase = JSON.parse(JSON.stringify(phaseFlatJsonData.filter(x => x.PhaseUId == oldTaskUId)));
                            if (oldPhase.length > 0) {
                                var phaseData = oldPhase;
                                phaseData[0].PhaseUId = newTaskUId;
                                phaseData[0].Name = newTitle;
                                phaseFlatJsonData.push(phaseData[0]);
                                this.global["PHASEFLAT"] = phaseFlatJsonData;
                            }
                        }
                        else {
                            _this.roadmapAssistantService.GetPhaseDetails(oldTaskUId).subscribe((response) => {
                                if (response != null) {
                                    if (response.length > 0) {
                                        var oldPhase = response;

                                        if (oldPhase.length > 0) {
                                            var phaseData = oldPhase;
                                            phaseData[0].PhaseUId = newTaskUId;
                                            phaseData[0].Name = newTitle;
                                            phaseFlatJsonData.push(phaseData[0]);
                                            this.global["PHASEFLAT"] = phaseFlatJsonData;
                                        }
                                    }
                                }
                            });
                        }
                    }
                    break;
                case "Milestone":
                    if (this.global["MILESTONEFLAT"] == undefined) {
                        _this.roadmapAssistantService.GetMilestoneDetails(oldTaskUId).subscribe((response) => {
                            if (response != null) {
                                if (response.length > 0) {
                                    var oldMilestone = response;

                                    var milestoneFlatJsonData = [];
                                    if (oldMilestone.length > 0) {
                                        var milestoneData = oldMilestone;
                                        milestoneData[0].MilestoneUId = newTaskUId;
                                        milestoneData[0].Name = newTitle;
                                        milestoneFlatJsonData.push(milestoneData[0]);                                        
                                        this.global["MILESTONEFLAT"] = milestoneFlatJsonData;
                                    }
                                }
                            }
                        });
                    }
                    if (this.global["MILESTONEFLAT"] != undefined) {

                        var milestoneFlatJsonData = this.global["MILESTONEFLAT"];

                        if (milestoneFlatJsonData.filter(x => x.MilestoneUId == oldTaskUId).length > 0) {
                            var oldMilestone = JSON.parse(JSON.stringify(milestoneFlatJsonData.filter(x => x.MilestoneUId == oldTaskUId)));
                            if (oldMilestone.length > 0) {
                                var milestoneData = oldMilestone;
                                milestoneData[0].MilestoneUId = newTaskUId;
                                milestoneData[0].Name = newTitle;
                                milestoneFlatJsonData.push(milestoneData[0]);
                                this.global["MILESTONEFLAT"] = milestoneFlatJsonData;
                            }
                        }
                        else {
                            _this.roadmapAssistantService.GetMilestoneDetails(oldTaskUId).subscribe((response) => {
                                if (response != null) {
                                    if (response.length > 0) {
                                        var oldMilestone = response;

                                        if (oldMilestone.length > 0) {
                                            var milestoneData = oldMilestone;
                                            milestoneData[0].MilestoneUId = newTaskUId;
                                            milestoneData[0].Name = newTitle;
                                            milestoneFlatJsonData.push(milestoneData[0]);
                                            this.global["MILESTONEFLAT"] = milestoneFlatJsonData;
                                        }
                                    }
                                }
                            });
                        }
                    }
            }
        }
        this.CopyVersion = this.CopyVersion + 1;
        this.global["COPYVERSION"] = this.CopyVersion;
        this.isCopied = true;
        for (var i = 0; i < newCopyArray.length; i++) {

            newCopyArray[i].isCopied = true;
        }
        this.flat = this.flat.concat(newCopyArray);
        this.rendertimeline();
        this.flat = this.flat.filter(x => x.TaskType != "Milestone");
        this.MilestoneFlat = this.MilestoneFlat.concat(MilestoneCopyArray);
        this.global["ISCOPIED"] = true;
        this.orderFlatJson();
        for (var i = 0; i < this.flat.length; i++) {
            if (('isCopied' in this.flat[i]) == false) {
                this.flat[i].isCopied = false;
            }
        }
        this.targetBuilderTools = this.getHierarchicalData(this.flat, this.flat[0].ParentTaskUId);
        this.execDivResize = true;
        this.successMessage = "Copied Successfully";
        this.toastrService.showSuccessToastr(this.successMessage);
    }



    openDependencyPopup(event: any) {
        this.showEditDependency = true;
    }
    updatetheProgressBar(FilterValuesSaved: any) {
        this.selectedProgressFilterValues = FilterValuesSaved;
        if (this.ForeCastTab) {
            this.selectedFilterValues = FilterValuesSaved;
        } else if (this.progressbarTab) {
            this.ProgressBarFilteredData = FilterValuesSaved
        }

    }

    ReceiveMessageFromEntityComp(entity: any, event: any) {
        if (entity == 'initiative') {
            this.showEditInitiative = event;
        }
        else if (entity == 'release') {
            this.showEditRelease = event;
        }
        else if (entity == 'phase') {
            this.showEditPhase = event;
        }
        else if (entity == 'task') {
            this.showEditTask = event;
        }
        else if (entity == 'filter') {
            this.showFilter = event;
        }
        else if (entity == 'iteration') {
            this.showEditIteration = event;
        }
        else if (entity == 'sprint') {
            this.showAddEditSprint = event;
        }
        else if (entity == 'milestone') {
            this.showEditMilestone = event;
        }
        else if (entity == 'functional') {
            this.showEditFunctional = event;
        }
        else if (entity == 'dependency') {
            this.isDisabledSaveButton = false;
            //this.showEditDependency = event;
            $('#dependency').hide();

            if (event == 'apply')
                this.DrawDependencyLine();
            else if (event == 'delete') {
                var DeleteDependencyTaskUId = this.global["DELETEDEPENDENCYID"];
                this.RemoveDependencyLine(DeleteDependencyTaskUId);
                this.global["DELETEDEPENDENCYID"] = null;
            }
        }
    }

    SetTargetBuilderData(event: any) {

        //this.targetBuilderTools = this.getHierarchicalData(event, event[0].ParentTaskUId);
        this.isDisabledSaveButton = false;

        for (let i = 0; i < event.length; i++) {
            for (let j = 0; j < this.flat.length; j++) {
                if (event[i].InitiativeUId != undefined) {
                    if (event[i].InitiativeUId == this.flat[j].TaskUId) {
                        this.flat[j].Title = event[i].Name;
                        this.flat[j].BarColor = event[i].BarColor;
                        this.flat[j].Associativescopeselector = event[i].AssociativescopeselectorName;
                        this.flat[j].AssociativescopeselectorId = event[i].AssociativescopeselectorId;
                        // this.titleColor = this.flat[j].BarColor;
                        this.flat[j].IsEditedFromEntity = event[i].IsEditedFromEntity;
                        this.flat[j].BarFontSize = event[i].BarFontSize;
                        this.flat[j].PlannedFinish = event[i].PlannedEndDate != undefined ? event[i].PlannedEndDate : this.flat[j].PlannedFinish;
                        this.flat[j].PlannedStart = event[i].PlannedStartDate != undefined ? event[i].PlannedStartDate : this.flat[j].PlannedStart;
                        this.flat[j].PlannedEfforts = event[i].PlannedEfforts;
                        //this.titleIsChanged = event[i].InitiativetitleIsChangedone;
                        //Setting the timeline of all children w.r.t its parent timeline change  
                        this.SetChildrenTimeline(event[i].InitiativeUId, this.flat[j]);

                        break;
                    }
                }
                if (event[i].ReleaseUId != undefined) {
                    if (event[i].ReleaseUId == this.flat[j].TaskUId) {
                        this.flat[j].Title = event[i].Name;
                        this.flat[j].BarColor = event[i].BarColor;
                        this.flat[j].Associativescopeselector = event[i].AssociativescopeselectorName;
                        this.flat[j].AssociativescopeselectorId = event[i].AssociativescopeselectorId;
                        //  this.titleColor = this.flat[j].BarColor;
                        this.flat[j].IsEditedFromEntity = event[i].IsEditedFromEntity;
                        this.flat[j].BarFontSize = event[i].BarFontSize;
                        this.flat[j].PlannedFinish = event[i].PlannedEndDate != undefined ? event[i].PlannedEndDate : this.flat[j].PlannedFinish;
                        this.flat[j].PlannedStart = event[i].PlannedStartDate != undefined ? event[i].PlannedStartDate : this.flat[j].PlannedStart;
                        this.flat[j].PlannedEfforts = event[i].PlannedEfforts;
                        this.flat[j].ReleaseMethodologyType = event[i].MethodologyName != undefined ? event[i].MethodologyName : "";
                        /*Programlevel(OverAll) Release*/
                        if (this.flat[j].ParentTaskUId == 0) {
                            var _this = this;
                            var selectedProjectReleases = [];
                            if (event[i].AssociatedProjectReleases != undefined && event[i].AssociatedProjectReleases.length > 0) {
                                var associatedProjectReleases = event[i].AssociatedProjectReleases.split(',');
                                associatedProjectReleases.forEach(function (taskUId) {
                                    if (_this.flat.filter(x => x.TaskUId == taskUId).length > 0) {
                                        selectedProjectReleases.push(_this.flat.filter(x => x.TaskUId == taskUId)[0]);
                                    }
                                });

                                if (selectedProjectReleases.length > 0) {
                                    var maxFinishDate = this.flat[j].PlannedFinish;
                                    var minStartDate = this.flat[j].PlannedStart;
                                    for (let x = 0; x < selectedProjectReleases.length; x++) {
                                        if (selectedProjectReleases[x].PlannedFinish > maxFinishDate) {
                                            maxFinishDate = selectedProjectReleases[x].PlannedFinish;
                                        }
                                        if (selectedProjectReleases[x].PlannedStart < minStartDate) {
                                            minStartDate = selectedProjectReleases[x].PlannedStart;
                                        }
                                        /*Tagging Over All release taskuId to associated project releases*/
                                        this.flat.filter(k => k.TaskUId == selectedProjectReleases[x].TaskUId)[0].AssociatedOverAllReleaseUId = event[i].ReleaseUId;
                                    }
                                    this.flat[j].PlannedFinish = maxFinishDate;
                                    this.flat[j].PlannedStart = minStartDate;
                                }

                            }
                        }
                        // Reverse Scenario for the Overall Release (Project Level Release)
                        else {
                            if (this.flat[j].AssociatedOverAllReleaseUId != undefined) {
                                var associatedOverallRelease = this.flat.filter(x => x.TaskUId == this.flat[j].AssociatedOverAllReleaseUId)[0];
                                if (associatedOverallRelease.PlannedStart > this.flat[j].PlannedStart) {
                                    this.flat.filter(k => k.TaskUId == associatedOverallRelease.TaskUId)[0].PlannedStart = this.flat[j].PlannedStart;
                                }
                                if (associatedOverallRelease.PlannedFinish < this.flat[j].PlannedFinish) {
                                    this.flat.filter(k => k.TaskUId == associatedOverallRelease.TaskUId)[0].PlannedFinish = this.flat[j].PlannedFinish;
                                }
                            }
                        }
                        //Setting the timeline of all children w.r.t its parent timeline change  
                        this.SetChildrenTimeline(event[i].ReleaseUId, this.flat[j]);
                        break;
                    }
                }
                if (event[i].IterationUId != undefined) {
                    if (event[i].IterationUId == this.flat[j].TaskUId) {
                        this.flat[j].Title = event[i].Name;
                        this.flat[j].BarColor = event[i].BarColor;
                        // this.titleColor = this.flat[j].BarColor;
                        this.flat[j].IsEditedFromEntity = event[i].IsEditedFromEntity;
                        this.flat[j].BarFontSize = event[i].BarFontSize;
                        this.flat[j].PlannedFinish = event[i].PlannedEndDate != undefined ? event[i].PlannedEndDate : this.flat[j].PlannedFinish;
                        this.flat[j].PlannedStart = event[i].PlannedStartDate != undefined ? event[i].PlannedStartDate : this.flat[j].PlannedStart;
                        this.flat[j].PlannedEfforts = event[i].PlannedEfforts;
                        //this.titleIsChanged = event[i].IterationtitleIsChangedone;
                        //Setting the timeline of all children w.r.t its parent timeline change  
                        this.SetChildrenTimeline(event[i].IterationUId, this.flat[j]);

                        break;
                    }
                }
                if (event[i].SprintUId != undefined) {
                    if (event[i].SprintUId == this.flat[j].TaskUId) {
                        this.flat[j].Title = event[i].Name;
                        this.flat[j].BarColor = event[i].BarColor;
                        // this.titleColor = this.flat[j].BarColor;
                        this.flat[j].IsEditedFromEntity = event[i].IsEditedFromEntity;
                        this.flat[j].BarFontSize = event[i].BarFontSize;
                        this.flat[j].PlannedFinish = event[i].PlannedEndDate != undefined ? event[i].PlannedEndDate : this.flat[j].PlannedFinish;
                        this.flat[j].PlannedStart = event[i].PlannedStartDate != undefined ? event[i].PlannedStartDate : this.flat[j].PlannedStart;
                        this.flat[j].PlannedEfforts = event[i].PlannedEfforts;
                        // this.titleIsChanged = event[i].SprinttitleIsChangedone;
                        //Setting the timeline of all children w.r.t its parent timeline change  
                        this.SetChildrenTimeline(event[i].SprintUId, this.flat[j]);
                        break;
                    }
                }
                if (event[i].FunctionalAreaUId != undefined) {
                    if (event[i].FunctionalAreaUId == this.flat[j].TaskUId) {
                        this.flat[j].Title = event[i].Name;
                        this.flat[j].BarColor = event[i].BarColor;
                        this.flat[j].IsEditedFromEntity = event[i].IsEditedFromEntity;
                        // this.titleColor = this.flat[j].BarColor;
                        this.flat[j].BarFontSize = event[i].BarFontSize;
                        this.flat[j].PlannedFinish = event[i].PlannedEndDate != undefined ? event[i].PlannedEndDate : this.flat[j].PlannedFinish;
                        this.flat[j].PlannedStart = event[i].PlannedStartDate != undefined ? event[i].PlannedStartDate : this.flat[j].PlannedStart;
                        this.flat[j].PlannedEfforts = event[i].PlannedEfforts;
                        //this.titleIsChanged = event[i].functionaltitleIsChangedone;
                        //Setting the timeline of all children w.r.t its parent timeline change  
                        this.SetChildrenTimeline(event[i].FunctionalAreaUId, this.flat[j]);
                        break;
                    }
                }
                if (event[i].PhaseUId != undefined) {
                    if (event[i].PhaseUId == this.flat[j].TaskUId) {
                        this.flat[j].Title = event[i].Name;
                        this.flat[j].BarColor = event[i].BarColor;
                        //  this.titleColor = this.flat[j].BarColor;
                        this.flat[j].BarFontSize = event[i].BarFontSize;
                        this.flat[j].IsEditedFromEntity = event[i].IsEditedFromEntity;
                        this.flat[j].PlannedFinish = event[i].PlannedEndDate != undefined ? event[i].PlannedEndDate : this.flat[j].PlannedFinish;
                        this.flat[j].PlannedStart = event[i].PlannedStartDate != undefined ? event[i].PlannedStartDate : this.flat[j].PlannedStart;
                        this.flat[j].PlannedEfforts = event[i].PlannedEfforts;
                        // this.titleIsChanged = event[i].phasetitleIsChangedone;
                        //Setting the timeline of all children w.r.t its parent timeline change  
                        this.SetChildrenTimeline(event[i].PhaseUId, this.flat[j]);
                        break;
                    }
                }
                if (event[i].ActivityUId != undefined) {
                    if (event[i].ActivityUId == this.flat[j].TaskUId) {
                        this.flat[j].Title = event[i].Name;
                        this.flat[j].BarColor = event[i].BarColor;
                        //  this.titleColor = this.flat[j].BarColor;
                        this.flat[j].BarFontSize = event[i].BarFontSize;
                        this.flat[j].IsEditedFromEntity = event[i].IsEditedFromEntity;
                        this.flat[j].PlannedFinish = event[i].PlannedEndDate != undefined ? event[i].PlannedEndDate : this.flat[j].PlannedFinish;
                        this.flat[j].PlannedStart = event[i].PlannedStartDate != undefined ? event[i].PlannedStartDate : this.flat[j].PlannedStart;
                        this.flat[j].PlannedEfforts = event[i].PlannedEfforts;
                        // this.titleIsChanged = event[i].TasktitleIsChangedone;
                        //Setting the timeline of all children w.r.t its parent timeline change  
                        this.SetChildrenTimeline(event[i].ActivityUId, this.flat[j]);
                        break;
                    }
                }

            }
            for (let k = 0; k < this.MilestoneFlat.length; k++) {
                if (event[i].MilestoneUId != undefined) {
                    if (event[i].MilestoneUId == this.MilestoneFlat[k].TaskUId) {
                        this.MilestoneFlat[k].Title = event[i].Name;
                        this.MilestoneFlat[k].LegendIcon = event[i].LegendIcon;
                        this.MilestoneFlat[k].ActionType = event[i].ActionType != undefined ? event[i].ActionType : null;
                        this.MilestoneFlat[k].BaselineStartDate = event[i].BaselineStartDate != undefined ? event[i].BaselineStartDate : null;
                    }
                }
            }
        }
        this.orderFlatJson();
        if (this.global["ROADMAPFILTERSETTINGSFLAT"] != undefined && this.global["ISFILTERED"] == true) {
            var filterData = this.global["ROADMAPFILTERSETTINGSFLAT"];
            var filteredData = [];
            var flatData = this.flat;
            var tempArray = flatData.filter(x => x.RoadMapTaskId != undefined);
            filterData = filterData.concat(tempArray);

            filterData.forEach(function (item) {
                var tempArr = flatData.filter(x => x.TaskUId == item.TaskUId);
                for (let i = 0; i < tempArr.length; i++) {
                    filteredData.push(tempArr[i]);
                }
            });

            this.targetBuilderTools = this.getHierarchicalData(filteredData, filteredData[0].ParentTaskUId);
        }
        else {
            this.targetBuilderTools = this.getHierarchicalData(this.flat, this.flat[0].ParentTaskUId);
        }
        //   console.log(this.targetBuilderTools);

        //this.flat = event;
        this.execDivResize = true;
        //this.rendertimeline();
        //this.setContainerAxis();        
    }
    //SaveRoadmapComments(RoadMapupdatedComments: string, isvalid: boolean) {
    //    this.RoadMapComments = RoadMapupdatedComments;
    //}

    changeTimeline(event) {
        this.isDisabledSaveButton = false;

        //let timelineStartDate = new Date(event.TimelineStartDate);
        //timelineStartDate.setMonth(timelineStartDate.getMonth());
        //timelineStartDate.setDate(-1);
        //this.timelineGridStartDate = timelineStartDate.toISOString().slice(0, 10); 

        var tempDate1 = new Date(event.TimelineStartDate);
        //tempDate1.setDate(1);
        tempDate1.setDate(-1);
        //this.timelineGridStartDate = this.ConvertDateTimeToString(tempDate1.toDateString());
        this.timelinemonthdate = this.ConvertDateTimeToString(tempDate1.toDateString());
        this.timelineGridStartDate = event.TimelineStartDate;
        this.timelineGridEndDate = event.TimelineEndDate;
        this.timelineGridStartMonth = event.TimelineStartMonth;
        this.rendertimeline();
    }

    orderFlatJson() {
        this.flat.forEach(this.GenerateUniqueId());

        var EntityData = [];
        var ReleaseData = [];
        var distinctLevels = [];
        //ReleaseData = $.grep(this.flat, function (e: any) { return e.TaskType == "Release" });
        EntityData = $.grep(this.flat, function (e: any) { return e.TaskType != "Initiative" });
        var distinctParent = EntityData.map(item => item.ParentTaskUId)
            .filter((value, index, self) => self.indexOf(value) === index);

        if (distinctParent.length > 0) {
            for (let i = 0; i < distinctParent.length; i++) {
                var flatRelease = []
                var Orderid = 0;
                var heightPosition = 1;
                var startDate = null;
                for (let temp = 0; temp < EntityData.length; temp++) {
                    EntityData[temp].PositionSettings = 0;
                }
                flatRelease = $.grep(EntityData, function (e: any) { return e.ParentTaskUId == distinctParent[i]; });

                for (let j = 0; j < flatRelease.length; j++) {
                    var yetToAlign = $.grep(flatRelease, function (e: any) { return e.PositionSettings == 0 || e.PositionSettings == undefined; });
                    if (startDate == null || startDate == undefined) {

                        if (yetToAlign.length > 0) {

                            var mindate = new Date(Math.min.apply(null, yetToAlign.map(function (e) {
                                return new Date(e.PlannedStart);
                            })));
                            var mindate2 = moment(mindate).format('YYYY-MM-DD');
                            var AlignTask = $.grep(yetToAlign, function (e: any) { return Date.parse(moment(e.PlannedStart).format('YYYY-MM-DD')) == Date.parse(mindate2); });
                            Orderid = Orderid + 1;
                            // update Flat json with orderid and rowid based on AlignTask
                            //this.flat.filter(x => x.TaskUId == flatRelease[j].TaskUId)[0].Orderid = Orderid;
                            //this.flat.filter(x => x.TaskUId == flatRelease[j].TaskUId)[0].Rowid = heightPosition;
                            if (AlignTask.length > 0) {
                                AlignTask[0].Orderid = Orderid;
                                AlignTask[0].Rowid = heightPosition;

                                startDate = AlignTask[0].PlannedFinish;
                                AlignTask[0].PositionSettings = 1;
                            }
                            var remainingTasks1 = $.grep(yetToAlign, function (e: any) { return e.PlannedStart > startDate; });
                            if (remainingTasks1.length == 0) {
                                startDate = null;
                                heightPosition++;
                            }

                        }
                    }
                    else {

                        if (yetToAlign.length > 0) {
                            var remainingTasks1 = $.grep(yetToAlign, function (e: any) { return e.PlannedStart > startDate; });

                            var mindate = new Date(Math.min.apply(null, remainingTasks1.map(function (e) {
                                return new Date(e.PlannedStart);
                            })));
                            var mindate2 = moment(mindate).format('YYYY-MM-DD');
                            var AlignTask = $.grep(yetToAlign, function (e: any) { return Date.parse(moment(e.PlannedStart).format('YYYY-MM-DD')) == Date.parse(mindate2); });
                            Orderid = Orderid + 1;
                            // update Flat json with orderid based on AlignTask
                            //this.flat.filter(x => x.TaskUId == flatRelease[j].TaskUId)[0].Orderid = Orderid;
                            //this.flat.filter(x => x.TaskUId == flatRelease[j].TaskUId)[0].Rowid = heightPosition;
                            if (AlignTask.length > 0) {
                                AlignTask[0].Orderid = Orderid;
                                AlignTask[0].Rowid = heightPosition;

                                startDate = AlignTask[0].PlannedFinish;
                                AlignTask[0].PositionSettings = 1;
                            }
                            var remainingTasks1 = $.grep(yetToAlign, function (e: any) { return e.PlannedStart > startDate; });
                            if (remainingTasks1.length == 0) {
                                startDate = null;
                                heightPosition++;
                            }
                        }

                    }


                }
            }
        }
        //this.targetBuilderTools = this.getHierarchicalData(this.flat, this.flat[0].ParentTaskUId);
        if (this.flat.length > 0) {
            this.targetBuilderTools = this.getHierarchicalData(this.flat, this.flat[0].ParentTaskUId);
        } else {
            this.targetBuilderTools = this.getHierarchicalData(this.flat, 0);
        }
    }

    setEachEntityDate() {
        // var xScale: any = d3.time.scale().domain([new Date(this.timelineGridStartDate), new Date(this.timelineGridEndDate)]).range([0, 1700]);
        var xScale: any = d3.time.scale().domain([new Date(this.timelineGridStartDate), new Date(this.timelineGridEndDate)]).range([0, this.timeLineGridWidth]);
        let _this = this;
        var TimelineSD;
        if (_this.global["ROADMAPSETTINGSFLAT"] != null) {
            let roadmapSettingsData = _this.global["ROADMAPSETTINGSFLAT"];
            TimelineSD = roadmapSettingsData.TimelineStartDate;
        }
        $.each(this.flat, function (i: any, d: any) {
            var isAgileRelease = false;
            if (d.TaskType == 'Sprint/Iteration') {
                var parentData1 = _this.flat.filter(x => x.TaskUId == d.ParentTaskUId);
                if (parentData1.length > 0) {
                    if (parentData1[0].ReleaseMethodologyType != undefined) {
                        isAgileRelease = parentData1[0].ReleaseMethodologyType.toLowerCase() == "agile" ? true : false;
                    }
                }
            }
            if (d.PlannedStart == undefined && d.PlannedFinish == undefined) {
                if (d.ParentTaskUId == 0) {

                    if (d.TaskType == 'Initiative') {
                        if (TimelineSD != null) {
                            var startDate = new Date(TimelineSD);
                            startDate.setDate(startDate.getDate() + 6);
                            d.PlannedStart = startDate.toISOString().slice(0, 10);
                            startDate.setMonth(startDate.getMonth() + 8);
                            var endDate = startDate.toISOString().slice(0, 10);
                            d.PlannedFinish = endDate;
                        }
                        else {
                            var startDate = new Date();
                            d.PlannedStart = startDate.toISOString().slice(0, 10);
                            startDate.setMonth(startDate.getMonth() + 8);
                            var endDate = startDate.toISOString().slice(0, 10);
                            d.PlannedFinish = endDate;
                        }
                    }
                    if (d.TaskType == 'Release'/*Program Release(OverAll Release)*/) {
                        var startDate = new Date();
                        d.PlannedStart = startDate.toISOString().slice(0, 10);
                        startDate.setMonth(startDate.getMonth() + 6);
                        var endDate = startDate.toISOString().slice(0, 10);
                        d.PlannedFinish = endDate;
                    }

                    if (Date.parse(startDate.toISOString().slice(0, 10)) < Date.parse(_this.timelineGridStartDate) || Date.parse(endDate) > Date.parse(_this.timelineGridEndDate)) {
                        d.PlannedFinish = _this.timelineGridEndDate;
                    }
                    //resize part 
                    ///var startDate1: any = d3.time.day.floor(new Date(d.PlannedStart)); 
                    ///var endDate1: any = d3.time.day.ceil(new Date(d.PlannedFinish)); 
                    ///var calwidth = xScale(endDate1) - xScale(startDate1); 
                    ///d.MaxWidth = calwidth + 1000; 
                    ///d.MinWidth = 1; 
                }
                //else if (d.TaskType == 'Sprint/Iteration' && isAgileRelease) {
                //    if (d.ParentTaskUId != 0) {
                //        parentData = _this.flat.filter(x => x.TaskUId == d.ParentTaskUId);
                //        var peerSprints = _this.flat.filter(x => x.ParentTaskUId == d.ParentTaskUId && d.TaskType == "Sprint/Iteration");

                //        let parentstartdate = parentData[0].PlannedStart.split("-");
                //        let parentenddate = parentData[0].PlannedFinish.split("-");

                //        if (parentData[0].sprintDaysDuration == undefined && parentData[0].sprintWeeksDuration == undefined) {
                //            var mdystart = new Date(parentstartdate[0], parentstartdate[1] - 1, parentstartdate[2]);
                //            var mdyend = new Date(parentenddate[0], parentenddate[1] - 1, parentenddate[2]);
                //            var diff = Math.abs(mdyend.getTime() - mdystart.getTime());
                //            parentData[0].sprintDaysDuration = Math.ceil(diff / (1000 * 3600 * 24));
                //            parentData[0].sprintWeeksDuration = Math.round(parentData[0].sprintDaysDuration / 7);
                //            _this.sprintDaysDuration = parentData[0].sprintDaysDuration;
                //            _this.sprintWeeksDuration = parentData[0].sprintWeeksDuration;
                //        }

                //        if (peerSprints.length == 1) {
                //            const [prevyear, prevmonth, prevday] = parentData[0].PlannedStart.split("-");
                //            var startDateSprint = parentData[0].PlannedStart;
                //            d.PlannedStart = startDateSprint;
                //            var endDateSprint = new Date(parseInt(prevyear), parseInt(prevmonth) - 1, parseInt(prevday) + 7);
                //            d.PlannedFinish = new Date(endDateSprint.getTime() - (endDateSprint.getTimezoneOffset() * 60000)).toJSON().split('T')[0];
                //            d.Title = "Sprint 0";
                //            _this.sprintDaysDuration, parentData[0].sprintDaysDuration = _this.sprintDaysDuration - 7;
                //            _this.sprintWeeksDuration, parentData[0].sprintWeeksDuration = Math.round(_this.sprintDaysDuration / 7);
                //        }
                //        else {
                //            var maxOrderId = _this.getMax(peerSprints, "Orderid");
                //            var prevpeerSprint = $.grep(peerSprints, function (e: any) { return e.Orderid == maxOrderId });
                //            let prevpeerSprintstartdate = prevpeerSprint[0].PlannedStart.split("-");
                //            let prevpeerSprintenddate = prevpeerSprint[0].PlannedFinish.split("-");
                //            var prevmdystart = new Date(prevpeerSprintstartdate[0], prevpeerSprintstartdate[1] - 1, prevpeerSprintstartdate[2]);
                //            var prevmdyend = new Date(parentenddate[0], prevpeerSprintenddate[1] - 1, prevpeerSprintenddate[2]);
                //            var diff1 = Math.abs(prevmdyend.getTime() - prevmdystart.getTime());
                //            var prevSprintDuration = Math.ceil(diff1 / (1000 * 3600 * 24));

                //            const [prevyearSprint, prevmonthSprint, prevdaySprint] = prevpeerSprint[0].PlannedFinish.split("-");
                //            let nextChildStartDateSprint = new Date(parseInt(prevyearSprint), parseInt(prevmonthSprint) - 1, parseInt(prevdaySprint) + 2);

                //            _this.sprintDaysDuration, parentData[0].sprintDaysDuration = _this.sprintDaysDuration - prevSprintDuration;
                //            _this.sprintWeeksDuration, parentData[0].sprintWeeksDuration = Math.round(_this.sprintDaysDuration / 7);
                //            var len = peerSprints.length - 1;
                //            d.Title = "Sprint" + " " + len;

                //            d.PlannedStart = new Date(nextChildStartDateSprint.getTime() - (nextChildStartDateSprint.getTimezoneOffset() * 60000)).toJSON().split("T")[0];
                //            const [prevyear, prevmonth, prevday] = d.PlannedStart.split("-");
                //            var endDateSprint1 = new Date(parseInt(prevyear), parseInt(prevmonth) - 1, parseInt(prevday) + prevSprintDuration + 1);
                //            d.PlannedFinish = new Date(endDateSprint1.getTime() - (endDateSprint1.getTimezoneOffset() * 60000)).toJSON().split("T")[0];
                //        }
                //    }
                //}
                else {
                    var parentData = [];
                    if (d.ParentTaskUId != 0) {
                        parentData = _this.flat.filter(x => x.TaskUId == d.ParentTaskUId);

                        //resize part
                        ///d.MaxWidth = parseFloat($("#div_" + d.ParentTaskUId).parent().css("width")) - 60;
                        ///d.MinWidth = 1;
                        ///var sd = parentData[0].PlannedStart;

                        let parentMonth = parentData[0].PlannedFinish.split("-")[1];
                        //let parentDataRelease = _this.flat.filter(x => x.TaskType == "Release" && x.ParentTaskUId == d.ParentTaskUId);
                        let childEntityData = _this.flat.filter(x => x.ParentTaskUId == d.ParentTaskUId);
                        if (childEntityData != undefined && childEntityData.length > 1) {
                            var maxOrderId = _this.getMax(childEntityData, "Orderid");
                            var prevChildEntity = $.grep(childEntityData, function (e: any) { return e.Orderid == maxOrderId });
                            const [prevyear, prevmonth, prevday] = prevChildEntity[0].PlannedFinish.split("-");
                            let nextChildStartDate = new Date(parseInt(prevyear), parseInt(prevmonth) - 1, parseInt(prevday) + 4);
                            let nextChildEndDate;
                            if (d.TaskType == "Sprint/Iteration") {
                                nextChildStartDate = new Date(parseInt(prevyear), parseInt(prevmonth) - 1, parseInt(prevday) + 1);
                                nextChildEndDate = new Date(parseInt(prevyear), parseInt(prevmonth) - 1, parseInt(prevday) + 7);
                            }
                            else if (d.TaskType == "Task") {
                                nextChildStartDate = new Date(parseInt(prevyear), parseInt(prevmonth) - 1, parseInt(prevday) + 1);
                                if (parentData[0].TaskType == "Phase") {
                                    nextChildEndDate = new Date(parentData[0].PlannedFinish);
                                }
                                else
                                    nextChildEndDate = new Date(parseInt(prevyear), parseInt(prevmonth), parseInt(prevday));
                            }
                            else {
                                if (d.TaskType == "Release")
                                    nextChildEndDate = new Date(parseInt(prevyear), parseInt(prevmonth) + 5, parseInt(prevday));
                                else if (d.TaskType == "Iteration")
                                    nextChildEndDate = new Date(parseInt(prevyear), parseInt(prevmonth) + 2, parseInt(prevday));
                                else if (d.TaskType == "FunctionalArea")
                                    nextChildEndDate = new Date(parseInt(prevyear), parseInt(prevmonth) + 4, parseInt(prevday));
                                else
                                    nextChildEndDate = new Date(parseInt(prevyear), parseInt(prevmonth) + 1, parseInt(prevday));

                                //if (nextChildEndDate >= new Date(parentData[0].PlannedFinish)) {//commented by Hema
                                //	nextChildEndDate = new Date(parseInt(prevyear), parseInt(prevmonth), parseInt(prevday));
                                //}
                            }
                            //if (parseInt(prevmonth) + 2 >= parseInt(parentMonth)) { //commented by Hema
                            if (new Date(nextChildEndDate) >= new Date(parentData[0].PlannedFinish) && d.TaskType != "Task") {
                                d.PlannedStart = parentData[0].PlannedStart;
                                const [year, month, day] = parentData[0].PlannedStart.split("-");
                                const [eyear, emonth, eday] = parentData[0].PlannedFinish.split("-");
                                let childFinishDate;
                                if (d.TaskType == "Sprint/Iteration" )
                                    childFinishDate = new Date(parseInt(year), parseInt(month) - 1, parseInt(day) + 6);
                                else {
                                    var monthint = parseInt(month) + 1;
                                    if (d.TaskType == "Release")
                                        monthint = parseInt(month) + 5;
                                    else if (d.TaskType == "Iteration")
                                        monthint = parseInt(month) + 2;
                                    else if (d.TaskType == "FunctionalArea")
                                        monthint = parseInt(month) + 4;

                                    childFinishDate = new Date(parseInt(year), monthint, parseInt(day));
                                    if (new Date(new Date(childFinishDate.getTime() - (childFinishDate.getTimezoneOffset() * 60000)).toJSON().split("T")[0]) > new Date(parentData[0].PlannedFinish)) {
                                        childFinishDate = new Date(parseInt(eyear), parseInt(emonth) - 1, parseInt(eday));
                                    }
                                    else {
                                        childFinishDate = new Date(parseInt(year), monthint, parseInt(day));
                                    }
                                }
                                d.PlannedFinish = new Date(childFinishDate.getTime() - (childFinishDate.getTimezoneOffset() * 60000)).toJSON().split("T")[0];

                            }
                            else if (new Date(nextChildStartDate) >= new Date(parentData[0].PlannedFinish) && d.TaskType == "Task") {
                                d.PlannedStart = parentData[0].PlannedStart;
                                const [year, month, day] = parentData[0].PlannedStart.split("-");
                                let childFinishDate;
                                if (parentData[0].TaskType == "Phase") {
                                    var oneDay = 24 * 60 * 60 * 1000;
                                    var diffDays = Math.round(Math.abs((new Date(parentData[0].PlannedStart).getTime() - new Date(parentData[0].PlannedFinish).getTime()) / (oneDay)));
                                    if (diffDays > 14)
                                        childFinishDate = new Date((new Date(parentData[0].PlannedStart).getTime() + new Date(parentData[0].PlannedFinish).getTime()) / 2);
                                    else
                                        childFinishDate = new Date(parentData[0].PlannedFinish);
                                }
                                else
                                    childFinishDate = new Date(parseInt(year), parseInt(month), parseInt(day));

                                d.PlannedFinish = new Date(childFinishDate.getTime() - (childFinishDate.getTimezoneOffset() * 60000)).toJSON().split("T")[0];
                            }
                            else {
                                d.PlannedStart = new Date(nextChildStartDate.getTime() - (nextChildStartDate.getTimezoneOffset() * 60000)).toJSON().split("T")[0];
                                d.PlannedFinish = new Date(nextChildEndDate.getTime() - (nextChildEndDate.getTimezoneOffset() * 60000)).toJSON().split("T")[0];
                            }
                        }
                        else {
                            d.PlannedStart = parentData[0].PlannedStart;
                            const [year, month, day] = parentData[0].PlannedStart.split("-");
                            const [eyear, emonth, eday] = parentData[0].PlannedFinish.split("-");
                            let childFinishDate;

                            if (d.TaskType == "Sprint/Iteration") {
                                childFinishDate = new Date(parseInt(year), parseInt(month) - 1, parseInt(day) + 6);
                            }
                            else if (d.TaskType == "Task") {
                                if (parentData[0].TaskType == "Phase") {
                                    var oneDay = 24 * 60 * 60 * 1000;
                                    var diffDays = Math.round(Math.abs((new Date(parentData[0].PlannedStart).getTime() - new Date(parentData[0].PlannedFinish).getTime()) / (oneDay))); 
                                    if (diffDays > 14)
                                        childFinishDate = new Date((new Date(parentData[0].PlannedStart).getTime() + new Date(parentData[0].PlannedFinish).getTime()) / 2);
                                    else
                                        childFinishDate = new Date(parentData[0].PlannedFinish);
                                }
                                else
                                    childFinishDate = new Date(parseInt(year), parseInt(month), parseInt(day));
                            }
                            else {
                                var monthint = parseInt(month) + 1;
                                if (d.TaskType == "Release")
                                    monthint = parseInt(month) + 5;
                                else if (d.TaskType == "Iteration")
                                    monthint = parseInt(month) + 2;
                                else if (d.TaskType == "FunctionalArea")
                                    monthint = parseInt(month) + 4;

                                childFinishDate = new Date(parseInt(year), monthint, parseInt(day));
                                if (new Date(new Date(childFinishDate.getTime() - (childFinishDate.getTimezoneOffset() * 60000)).toJSON().split("T")[0]) > new Date(parentData[0].PlannedFinish)) {
                                    childFinishDate = new Date(parseInt(eyear), parseInt(emonth) - 1, parseInt(eday));
                                }
                                else {
                                    childFinishDate = new Date(parseInt(year), monthint, parseInt(day));
                                }
                            }

                            d.PlannedFinish = new Date(childFinishDate.getTime() - (childFinishDate.getTimezoneOffset() * 60000)).toJSON().split("T")[0];
                        }
                    }
                    if (new Date(d.PlannedFinish) > new Date(parentData[0].PlannedFinish)) {
                        d.PlannedFinish = parentData[0].PlannedFinish;
                    }

                    //resize part
                    ///let samecon = _this.flat.filter(x => x.ParentTaskUId == d.ParentTaskUId);
                    ///var maxdate = new Date(Math.max.apply(null, samecon.map(function (e) {
                    ///    return new Date(e.PlannedFinish);
                    ///})));
                    ///var maxdate2 = moment(maxdate).format('YYYY-MM-DD');
                    ///var maxCon = $.grep(_this.flat, function (e: any) { return Date.parse(moment(e.PlannedFinish).format('YYYY-MM-DD')) == Date.parse(maxdate2); });
                    ///var ed;
                    ///if (maxCon != undefined && maxCon.length > 0) {
                    ///    ed = maxCon[0].PlannedFinish;
                    ///}

                    ///var sd1: any = d3.time.day.floor(new Date(sd));
                    ///var ed1: any = d3.time.day.ceil(new Date(ed));
                    ///var minWidth = xScale(ed1) - xScale(sd1);
                    ///parentData[0].MinWidth = minWidth + 60;
                }

            }
        });

        $.each(_this.MilestoneFlat, function (i: any, d: any) {
            if (d.BaselineStartDate == undefined) {
                var parentData = _this.flat.filter(x => x.TaskUId == d.ParentTaskUId);
                var fd = parentData[0].PlannedFinish;
                d.BaselineStartDate = parentData[0].PlannedFinish;
            }

        });
        ///this.targetBuilderTools = this.getHierarchicalData(this.flat, this.flat[0].ParentTaskUId);
    }

    getMax(arr: any, prop: any) {
        var max = -1;
        for (var i = 0; i < arr.length; i++) {
            if (parseInt(arr[i][prop]) > max)
                max = arr[i][prop];
        }
        return max;
    }

    //getMax(arr: any, prop: any, compareId:any) {
    //    var min = 99999;
    //    var orderids = [];
    //    for (var i = 0; i < arr.length; i++) {
    //        orderids.push(arr[i][prop]);
    //     }
    //    for (var i = 0; i < orderids.length; i++) {
    //        if (parseInt(orderids[i]) < min) {
    //            min = orderids[i];
    //        }
    //    }
    //    return min;
    //}

    openDeleteConfirmation(TaskType, subMenu, containerID: any) {
        this.toastrService.dismissAllToastr();
        var _this = this;
        let modalOption: NgbModalOptions = {};
        modalOption.backdrop = 'static';
        modalOption.size = 'lg';
        modalOption.keyboard = false;
        modalOption.centered = true;
        const modalRef = this.modalService.open(ConfirmPromptModal, modalOption);
        modalRef.componentInstance.headerText = "Deleted Entity";
        modalRef.componentInstance.confirmationMessage = "Are you sure you want to delete the entity?"
        let k = 0;
        if (_this.targetBuilderTools.length > 0) {
            for (var i = 0; i < _this.flat.length; i++) {
                if (_this.flat[i].TaskUId == containerID.split("_")[1]) {
                    if (_this.DependencyFlat != undefined && _this.DependencyFlat.length > 0) {
                        _this.hasDependecy = _this.DependencyFlat.find(x => x.SuccessorUId == containerID.split("_")[1] || x.PredecessorUId == containerID.split("_")[1]);
                        if (_this.hasDependecy == undefined) {
                            if (_this.flat.filter(x => x.ParentTaskUId == _this.flat[i].TaskUId).length > 0) {
                                _this.flat.filter(x => x.ParentTaskUId == _this.flat[i].TaskUId).forEach(function iter(item) {
                                    _this.hasDependecy = _this.DependencyFlat.find(x => x.SuccessorUId == item.TaskUId || x.PredecessorUId == item.TaskUId);
                                    if (_this.hasDependecy == undefined) {
                                        if (_this.flat.filter(x => x.ParentTaskUId == item.TaskUId).length > 0) {

                                            _this.flat.filter(x => x.ParentTaskUId == item.TaskUId).forEach(iter);
                                        }
                                    } else {
                                        k++;
                                    }
                                });
                            }
                        } else {
                            k++;
                        }
                    }

                }
            }
        }
        if (k > 0) {
            modalRef.componentInstance.confirmationMessage = "Are you sure you want to delete the entity and remove its dependency?";
        }
        modalRef.result.then((isConfirmed: any) => {
            if (isConfirmed) {
                this.ShowEntityPopUp(TaskType, subMenu, containerID);

            }

        });
    }

    addNewLine(text: string, index: number) {
        var obj = $(`#historyDescription_${index}`).text(text);
        obj.html(obj.html().replace(/,/g, '<br>'));
        return obj;
    }

    DrawDependencyLine() {
        var _this = this;
        var DependencyData;
        if (this.isDependencyReset == true) {
            DependencyData = this.global["RESETDEPENDENCYDATA"];
            $("#Line_" + DependencyData.DependencyUId).remove();
        }
        else {
            DependencyData = this.global["DEPENDENCYDATA"];
            if (DependencyData.isEdited == true) {
                $("#Line_" + DependencyData.DependencyUId).remove();
            }
        }

        let startDiv = this.flat.find(a => a.TaskUId == DependencyData.PredecessorUId);
        let endDiv = this.flat.find(a => a.TaskUId == DependencyData.SuccessorUId);
        if (new Date(startDiv.PlannedFinish) > new Date(endDiv.PlannedStart)) {
            this.RemoveDependencyLine(DependencyData.DependencyUId);
            this.PromptDependency();
            return false;
        }
        //Line draw
        var startElement = document.getElementById("div_" + startDiv.TaskUId).parentElement,
            endElement = document.getElementById("div_" + endDiv.TaskUId).parentElement;
        var line1 = new LeaderLine(startElement, endElement);
        line1.setOptions({ path: 'grid', size: DependencyData.LineSize, color: DependencyData.LineColor }); //, startSocket: 'right', endSocket: 'right'
        if (DependencyData.LineStyle == "Striped" || DependencyData.LineStyle == "Dotted") {
            if (DependencyData.LineStyle == "Striped") {
                line1.dash = true;
            }
            else {
                line1.setOptions({
                    dash: { len: DependencyData.LineSize, gap: DependencyData.LineSize }
                });
            }
        }

        if (this.DependencyFlat != undefined) {
            if (this.DependencyFlat.filter(a => a.DependencyUId == DependencyData.DependencyUId).length == 0) {
                this.DependencyFlat.push(DependencyData);
            }
            else {
                for (let i = 0; i < this.DependencyFlat.length; i++) {
                    if (this.DependencyFlat[i].DependencyUId == DependencyData.DependencyUId) {
                        this.DependencyFlat[i].PredecessorUId = DependencyData.PredecessorUId;
                        this.DependencyFlat[i].SuccessorUId = DependencyData.SuccessorUId;
                        this.DependencyFlat[i].Predecessor = DependencyData.Predecessor;
                        this.DependencyFlat[i].Successor = DependencyData.Successor;
                        this.DependencyFlat[i].LineSize = DependencyData.LineSize;
                        this.DependencyFlat[i].LineStyle = DependencyData.LineStyle;
                        this.DependencyFlat[i].LineColor = DependencyData.LineColor;
                        this.DependencyFlat[i].IsInternal = DependencyData.IsInternal;
                        this.DependencyFlat[i].IsExternal = DependencyData.IsExternal;
                        this.DependencyFlat[i].IsEdited = DependencyData.isEdited;
                        this.DependencyFlat[i].strObjectId = DependencyData.strObjectId;
                        this.DependencyFlat[i].ActionType = DependencyData.ActionType;
                    }
                }
            }
        }
        else {
            this.DependencyFlat = [];
            this.DependencyFlat.push(DependencyData);
        }

        for (let i = 0; i < this.flat.length; i++) {
            this.flat[i].Title = $.trim(this.flat[i].Title);
        }

        this.global["DEPENDENCYFLAT"] = this.DependencyFlat;

        for (var i = 0; i < document.getElementsByClassName('leader-line').length; i++) {
            //var LineElement = document.getElementsByClassName('leader-line')[i].id;
            if (document.getElementsByClassName('leader-line')[i].id == "") {
                var LineElement = document.getElementsByClassName('leader-line')[i];
                LineElement.id = "Line_" + DependencyData.DependencyUId;
            }
        }

        $(".leader-line").on('click', function () {
            var id = $(this).attr('id');
            console.log("The Line clicked from DrawDependencyLine.");
            _this.ShowEntityPopUp('Dependency', '', id);
        });

        $(".leader-line").mouseover(function () {
            var id = $(this).attr('id');
            console.log("mouseover function");
            var dependency_id = id.split("_")[1];
            _this.HighlightEntity('mouseover', dependency_id)
        });

        $(".leader-line").mouseout(function () {
            var id = $(this).attr('id');
            console.log("mouseout function");
            var dependency_id = id.split("_")[1];
            _this.HighlightEntity('mouseout', dependency_id)
        });

    }

    HighlightEntity(event, dependency_id) {
        this.DependencyFlat = this.global["DEPENDENCYFLAT"];
        if (this.DependencyFlat != undefined) {
            var highlightDependecy = this.DependencyFlat.filter(a => a.DependencyUId == dependency_id);
            if (event == 'mouseover') {
                $("#div_" + highlightDependecy[0].PredecessorUId).parent().addClass('dependencyshadow');
                $("#div_" + highlightDependecy[0].SuccessorUId).parent().addClass('dependencyshadow');
            }
            else if (event = 'mouseout') {
                $("#div_" + highlightDependecy[0].PredecessorUId).parent().removeClass('dependencyshadow');
                $("#div_" + highlightDependecy[0].SuccessorUId).parent().removeClass('dependencyshadow');
            }
        }
    }

    ResetDependencyLine() {
        this.DependencyFlat = this.global["DEPENDENCYFLAT"];
        var _this = this;
        //if (this.DependencyFlat.filter(a => a.DeletedEntity == "True").length > 0) {
        //    let filterArray = this.DependencyFlat.filter(a => a.DeletedEntity != "True");
        //    if (filterArray.length > 0)
        //        this.DependencyFlat = filterArray;
        //    else
        //        this.DependencyFlat = undefined;
        //    //this.global["DEPENDENCYFLAT"] = _this.DependencyFlat;
        //}
        //$('.leader-line').remove();
        _this.global["RESETDEPENDENCYDATA"] = undefined;
        if (this.DependencyFlat != undefined) {
            this.isDependencyReset = true;
            var activeDependencyFlat = this.DependencyFlat.filter(a => a.ActionType != 'Deleted');
            $.each(activeDependencyFlat, function (i: any, d: any) {
                _this.global["RESETDEPENDENCYDATA"] = d;
                if (_this.isFilterApplied == false || _this.isFilterApplied == undefined)
                    _this.DrawDependencyLine();

                else {
                    if (_this.filterAppliedData != undefined) {
                        let PredecessorArray = _this.filterAppliedData.filter(a => a.TaskUId == d.PredecessorUId);
                        let SuccessorArray = _this.filterAppliedData.filter(a => a.TaskUId == d.SuccessorUId);
                        if (PredecessorArray.length > 0 && SuccessorArray.length > 0)
                            _this.DrawDependencyLine();
                        else
                            $("#Line_" + d.DependencyUId).remove();
                    }
                }
            });
        }        
        this.isDependencyReset = false;
    }

    //Use - When delete any depndent entity, line is removed from UI and global object
    RemoveDependencyLine(lineID: any) {
        this.DependencyFlat = this.global["DEPENDENCYFLAT"];
        var _this = this;
        if (_this.DependencyFlat != undefined) {
            $("#Line_" + lineID).remove();
            let tempArray = [];
            tempArray = _this.DependencyFlat.slice(0);

            for (var i = 0; i < tempArray.length; i++) {

                if (tempArray[i].DependencyUId == lineID) {
                    if (_this.DependencyFlat[i]._id == undefined) {
                        _this.DependencyFlat.splice(i, 1);
                    } else {
                        _this.DependencyFlat[i].DeletedEntity = "True";
                        _this.DependencyFlat[i].ActionType = "Deleted";
                        _this.DependencyFlat[i].strObjectId = _this.DependencyFlat[i]._id;
                    }
                    //_this.CloseDeletedEntitypopUp(_this.flat[i].TaskType)
                    //_this.DependencyDeletedArray.push(_this.DependencyFlat[i]);
                }
            }
            //if (_this.DependencyFlat.filter(a => a.DeletedEntity == "True" && a.strstrObjectId != undefined).length > 0) {
            //    let filterArray = _this.DependencyFlat.filter(a => a.DeletedEntity != "True");
            //    _this.DependencyFlat = filterArray;
            //}
            this.global["DEPENDENCYFLAT"] = _this.DependencyFlat;
        }
    }

    //Use - Display alert when user tries to set a dependency between two entities and they having overlap of time duration.
    PromptDependency() {
        let modalOption: NgbModalOptions = {};
        modalOption.backdrop = 'static';
        modalOption.size = 'lg';
        modalOption.keyboard = false;
        modalOption.centered = true;
        const modalRef = this.modalService.open(RoadmapPromptTemplates, modalOption);
        //modalRef.componentInstance.headerText = "Alert";
        modalRef.componentInstance.promptModalMessage = "Predecessor entity to complete before the successor to start and it will not allow the setting of dependency.";
    }

    //Use - To clear dependency global object when we nevigate to other page from header menu (i.e New, Open, Compare etc.)
    ClearDependency() {
        this.DependencyFlat = this.global["DEPENDENCYFLAT"];
        if (this.DependencyFlat != undefined && this.DependencyFlat.length > 0) {
            this.DependencyFlat.forEach(function iter(item) {
                $("#Line_" + item.DependencyUId).remove();
            });
        }

        this.global["DEPENDENCYFLAT"] = undefined;
    }
    VerticalCompareClick() {
        console.log('Vertical Compare Clicked.');
    }

    HorizontalCompareClick() {
        console.log('Horizontal Compare Clicked.');
    }


    ShowPages(PageName: string) {
        this.toastrService.dismissAllToastr();
        var deliveryConstructUId = this.global['DeliveryConstructUId'];
        if (deliveryConstructUId == "" || deliveryConstructUId == undefined || deliveryConstructUId == '') {
            return;
        }
        else if (this.isDisabledButton == true) {
            $(".progress").removeAttr("href");
            $(".forecast").removeAttr("href");
            return;
        }
        this.showFilter = false;
        this.progressbarTab = false;
        this.ForeCastTab = false;
        this.showExport = false;
        this.showBaselineTab = false;
        //this.showBaselineInitiativeTab = false;
        this.showHistory = false;
        this.showEditInitiative = false;
        this.showEditRelease = false;
        this.showEditPhase = false;
        this.showEditTask = false;
        this.showEditIteration = false;
        this.showAddEditSprint = false;
        this.showEditMilestone = false;
        this.showEditFunctional = false;
        this.showBuild = false;
        // this.showSettings = false;
        $('.settings').hide();
        console.log('Passed');
        $('.builder-container').hide();
        $('.builder-source').hide();
        this.ShowHistoryComments = false;
        $(".filterAppliedIcon").hide();
        $(".rmfilterAppliedIcon").hide();
        this.selectedProgressFilterValues = [];
        switch (PageName) {
            case "ProgressBarTab": {
                this.progressbarTab = true;
                this.ForeCastTab = false;
                // this.router.navigate(['/RoadMapProgress']);
                return false;
                break;
            }
            case "ForecastTab": {
                this.ForeCastTab = true;
                this.progressbarTab = false;
                this.isBaselineChecked = false;
                return false;
                break;
            }
        }
    }

    ShowExport() {

        this.toastrService.dismissAllToastr();
        var deliveryConstructUId = this.global['DeliveryConstructUId'];
        if (deliveryConstructUId == "" || deliveryConstructUId == undefined || deliveryConstructUId == '') {
            return;
        }
        else if (this.isDisabledButton == true) {
            return;
        }

        if (this.roadMapName == '' || this.roadMapName == undefined)
            return;
        this.showExport = true;
        this.showBuild = false;
        //  this.showSettings = false;
        this.showFilter = false;
        this.showEditInitiative = false;
        this.showEditRelease = false;
        this.showEditPhase = false;
        this.showEditTask = false;
        this.showEditIteration = false;
        this.showAddEditSprint = false;
        this.showEditMilestone = false;
        this.showEditFunctional = false;
        this.showBaselineTab = false;
        this.ShowHistoryComments = false;
        this.showHistory = false;
        if (this.progressbarTab == true || this.ForeCastTab == true) {
            this.showExport = false;
        }
        $('.settings').hide();
        $('#dependency').hide();
    }

    CloseExport() {
        this.showExport = false;
    }
    showPdfLegend: boolean = false;
    exitFullScreen: boolean = false;
    ExportRoadMap() {
        let showBuildValues = JSON.parse(JSON.stringify(this.showBuild));
        this.showBuild = false;
        this.showExport = false;
        this.showPdfLegend = true;
        $("#noncomparediv").addClass("content-margin");
        $('button').removeClass("btn");
        $("button").css("cursor", "pointer");
        $("#footercontainer").hide();
        this.ShowFullScreen();
        this.exitFullScreen = true;
        this.editentity = false;
        this.rendertimeline();
        $(".x.axis path").css("display", " none");
        $('.x.axis line').css("stroke", "black");
        setTimeout(() => {
            this.ResetDependencyLine();
            $(".disabled-edit-entity").css("opacity", "1");
            var docwidth = $('#timeline').width();
            $('#div_scroll').css("width", docwidth + 'px');
            var docheight = $('#contentToConvert').height();
            $('#div_scroll').css("height", docheight + 'px');
            var data = document.getElementById('div_scroll');

            const options = {
                foreignObjectRendering: true,
            }
            html2canvas(data, options).then(canvas => {
                const contentDataURL = canvas.toDataURL('image/png', 1.0);
                let pdf = new jspdf('l', 'mm', 'a0', true);
                var position = 0;

                if (canvas.width < 5080 && canvas.height < 5080) {
                    if (canvas.width > canvas.height) {
                        pdf = new jspdf('l', 'mm', [canvas.width, canvas.height], true);
                    }
                    else {
                        pdf = new jspdf('p', 'mm', [canvas.height, canvas.width], true);
                    }
                } else {
                    if (canvas.width > canvas.height) {
                        pdf = new jspdf('l', 'in', ["200", "200"], true);
                    }
                    else {
                        pdf = new jspdf('p', 'in', ["200", "200"], true);
                    }
                }
                var width = pdf.internal.pageSize.width;
                var height = pdf.internal.pageSize.height;
                pdf.addImage(contentDataURL, 'JPEG', 0, position, width, height, '', 'FAST');
                var name = this.roadMapName.trim();
                if (name != '') {
                    pdf.save(name + '.pdf');
                } else {
                    pdf.save('RoadMap.pdf');
                }
                this.showBuild = showBuildValues;
                $("#footercontainer").show();
                this.showPdfLegend = false;
                $('#div_scroll').css("width", "");
                 $('#div_scroll').css("height", "");
                $("#noncomparediv").removeClass("content-margin");
                $(".disabled-edit-entity").css("opacity", "");
                this.exitFullScreen = false;
                this.rendertimeline();
                this.CloseFullScreen();
                this.editentity = true;
            });
        }, 500);
    }

    ExportRoadmapPPT() {
        let type = 'ppt'
        let BaselineUid = null;

        //this.roadmapAssistantService.ExportRoadmapData(this.deliveryConstructUId, this.roadMapExportUIds, BaselineUid, type);

        this.roadmapAssistantService.ExportRoadmapData(this.deliveryConstructUId, this.global["ROADMAPUID"], BaselineUid, type).subscribe(
            (response) => {
                //  console.log("Success Response" + response);
                let blob = response.body;
                let data = new Blob([blob], { type: 'application/octet-stream' });
                var filename = response.headers.get('FileName')
                //FileSaver.saveAs(data, filename)                
                const url = window.URL.createObjectURL(blob);
                var anchor = document.createElement("a");
                anchor.download = this.roadMapName + ".zip";
                anchor.href = url;
                anchor.click();
                //window.open(url);
            });
    }

    AlignMilestone(timelineGridStartDate, timelineGridEndDate) {
        var _this = this;
        var xScale: any = d3.time.scale().domain([new Date(timelineGridStartDate), new Date(timelineGridEndDate)]).range([0, this.timeLineGridWidth]);
        $.each(this.MilestoneFlat, function (i: any, d: any) {
            setTimeout(function () {
                $("#img_" + d.TaskUId).position({ my: 'right top-20', at: 'right+25 top', of: '#div_' + d.ParentTaskUId, collision: "none" });
            }, 0);

            if (d.BaselineStartDate != undefined) {
                var milestonesContainer = $.grep(_this.flat, function (e: any) { return e.TaskUId == d.ParentTaskUId });
                if (milestonesContainer != undefined && milestonesContainer.length > 0) {
                    if ((new Date(d.BaselineStartDate)).toDateString() != (new Date(milestonesContainer[0].PlannedFinish)).toDateString()) {
                        if (milestonesContainer != undefined && milestonesContainer.length > 0) {
                            var msd = milestonesContainer[0].PlannedStart;
                        }
                        var startDate: any = d3.time.day.floor(new Date(msd));
                        var endDate: any = d3.time.day.ceil(new Date(d.BaselineStartDate));

                        var calwidth = xScale(endDate) - xScale(startDate) - 15;
                        var l = 'left+' + calwidth + ' top';
                        setTimeout(function () {
                            $("#img_" + d.TaskUId).position({ my: 'left top-20', at: l, of: '#div_' + d.ParentTaskUId, collision: "none" });
                        }, 0);
                    }
                }

            }

            var src: any;
            var milestoneStyle = 'redflag';
            if (_this.settingsAppliedData != undefined && _this.settingsAppliedData.MilestoneStyle != undefined) {
                milestoneStyle = _this.settingsAppliedData.MilestoneStyle;
            }

            if (d.LegendIcon != undefined) {
                if (d.LegendIcon.toLowerCase() == 'greensquare')
                    src = "./images/greensquare.png";
                else if (d.LegendIcon.toLowerCase() == 'bluediamond')
                    src = "./images/bluediamond.png";
                else if (d.LegendIcon.toLowerCase() == 'yellowstar')
                    src = "./images/yellowstar.png";
                else
                    src = "./images/redflag.png";
            }
            else {
                if (milestoneStyle.toLowerCase().indexOf('greensquare') > -1)
                    src = "./images/greensquare.png";
                else if (milestoneStyle.toLowerCase().indexOf('bluediamond') > -1)
                    src = "./images/bluediamond.png";
                else if (milestoneStyle.toLowerCase().indexOf('yellowstar') > -1)
                    src = "./images/yellowstar.png";
                else
                    src = "./images/redflag.png";

                d.LegendIcon = src.split('/')[2].split('.')[0];
            }

            if (d.ActionType == "Deleted") {
                $("#img_" + d.TaskUId).remove();
            }
            else {
                $("#img_" + d.TaskUId).attr("src", src);
                $("#img_" + d.TaskUId).prop("title", d.Title + "  " + d.BaselineStartDate);
            }
        });
    }

    ShowFullScreen() {
        //this.showFullScreen = true;
        this.toastrService.dismissAllToastr();
        this.showExport = false;
        this.showBuild = false;
        this.showFilter = false;
        this.showEditInitiative = false;
        this.showEditRelease = false;
        this.showEditPhase = false;
        this.showEditTask = false;
        this.showEditIteration = false;
        this.showAddEditSprint = false;
        this.showEditMilestone = false;
        this.showEditFunctional = false;
        this.showBaselineTab = false;
        this.ShowHistoryComments = false;
        this.showHistory = false;

        $(document).on('keyup', function (evt) {
            if (evt.keyCode == 27) {
                $(".exit_fullscreen").trigger("click", function () {
                    $("body").removeClass("isFullscreenEnable");
                });
            }
        });
        $(".settings").hide();
        $("#dependency").hide();
        $(".myWizard-gov-footer").hide();
        $("header-component, .roadMapHeaderNavigationMenu, .roadmap-zoomingContainer").addClass("fullscreen_applied");
        $("#contentToConvert, #timeline").addClass("fullscreen_active");
        $("body").addClass("isFullscreenEnable");
        $(".exit_fullscreen").css("display", "block");
        $("ap-forecast-bar-comproad-monent").find("div:eq(0), div:eq(4)").css("top", "8.5%");
        $("ap-progress-bar-comproad-monent").find("div:eq(0)").css("top", "60px"); 
        
        this.ResetDependencyLine();

        //if ($('.parentDNDContainer').children().length > 0) {
        //    var getWindowHeight = $(window).height();
        //    var headerHgt = $('.header').length > 0 ? $('.header').height() : 0
        //    var backtoPhoenix = $('.backto_phoenix').length > 0 ? $('.backto_phoenix').height() : 0
        //    var roadmapZoomingContainerHgt = $('.roadmap-zoomingContainer').length > 0 ? $('.roadmap-zoomingContainer').height() : 0
        //    var headerHeight = $('#div_scroll').height() + headerHgt + backtoPhoenix + $('.roadMapHeaderNavigationMenu').height() + roadmapZoomingContainerHgt + 54;

        //    if (getWindowHeight < headerHeight) {
        //        setTimeout(function () {
        //            var TimelineHeight = $(".builder-target").css('height');
        //            var ScrollHeight = $(window).height() - 145;
        //            if (parseFloat(TimelineHeight) > ScrollHeight) {
        //                $("#div_scroll").css('height', (parseFloat(TimelineHeight) + 100) + "px");
        //            }
        //            else {
        //                $("#div_scroll").css('height', ScrollHeight + 'px');
        //            }

        //            $('#CurrentDateVL').css("height", $("#div_scroll").css('height'));

        //        }, 10);
        //    } else {
        //        $("#div_scroll ").css('height', (getWindowHeight - 155) + 'px');
        //        $('#CurrentDateVL').css('height', (getWindowHeight - 130) + 'px');
        //    }


        //} else {
        //    var getWindowHeight = $(window).height();
        //    $("#div_scroll ").css('height', (getWindowHeight - 155) + 'px');
        //    $('#CurrentDateVL').css('height', (getWindowHeight - 130) + 'px');
        //}
    }

    CloseFullScreen() {
        if (!this.exitFullScreen) {
            $(".exit_fullscreen").removeAttr("style");
            $("header-component,  .roadMapHeaderNavigationMenu, .roadmap-zoomingContainer").removeClass("fullscreen_applied");
            $("#contentToConvert, #timeline").removeClass("fullscreen_active");
            $('body').removeClass("isFullscreenEnable");
            $("ap-forecast-bar-comproad-monent").find("div:eq(0), div:eq(4)").css("top", "65px");
            $("ap-progress-bar-comproad-monent").find("div:eq(0)").css("top", "60px");
            $(".myWizard-gov-footer").show();
            this.ResetDependencyLine();
        }
    }

    getLastModifiedBaselineData(containerID: any) {
        let _this = this;
        this.roadmapAssistantService.GetLastModifiedBaseline(containerID.split("_")[1]).subscribe((response) => {
            if (response != null) {
                if (response.length > 0) {
                    let modalOption: NgbModalOptions = {};
                    modalOption.backdrop = 'static';
                    modalOption.size = 'lg';
                    modalOption.keyboard = false;
                    modalOption.centered = true;
                    const modalRef = this.modalService.open(ConfirmPromptModal, modalOption);
                    modalRef.componentInstance.headerText = "Baseline Details";
                    modalRef.componentInstance.confirmationMessage = `Last baselined date:${response[0].ModifiedDate}`;
                    modalRef.result.then((isConfirmed: any) => {
                        if (isConfirmed) {//confirmed
                        }
                        else {//cancelled
                        }
                    });
                    //console.log(response);
                }
            }
        });
    }


    setDynamicTimelineheight() {
        setTimeout(() => {
            var getWindowHeight = $(window).height();
            var getHeaderHeight = $('.header').length > 0 ? $('.header').height() : 0;
            var getMenuHeight = $('.roadMapHeaderNavigationMenu').height();
            var getZoomContanerHeight = $('.roadmap-zoomingContainer').length > 0 ? $('.roadmap-zoomingContainer').height() : 0;
            var getWorkPlanSectionHeight = $('.workplan_progress_section').length > 0 ? $('.workplan_progress_section').height() : 0;
            var ifNotFixedheader = getHeaderHeight + getMenuHeight + getZoomContanerHeight + getWorkPlanSectionHeight;
            var calHgtTimelineDottedLine = getWindowHeight - ifNotFixedheader;
            var _isBuilderGreater = $('.builder-container').height() - 100;

            var compairLineCanvasHeight = $('.builder-container').height() < $('#CurrentDateVL').height();
            $('#CurrentDateVL').css('height', compairLineCanvasHeight ? calHgtTimelineDottedLine : _isBuilderGreater + 'px');
        }, 5);
    }
    setDynamicCanvasheight() {
        var calculateHgtForCanvas = $('.builder-container').length > 0 ? $('.builder-container').height() : 200;
        var setCanvasHeight = calculateHgtForCanvas + 100;
        if ($('.canvas').length > 0) {
            $('.canvas').css('height', setCanvasHeight + 'px');
        } else if ($('.canvas1').length > 0) {
            $('.canvas1').css('height', setCanvasHeight + 'px');
        }
    }
    onTimelineScroll(event: any) {
        this.DependencyFlat = this.global["DEPENDENCYFLAT"];
        if (this.DependencyFlat != undefined && this.DependencyFlat.length > 0) {
            this.ResetDependencyLine();
        }
    }

    updateZoomPercent(zoomValue) {
        this.zoomPercent = zoomValue;
    }
    GetReleaseMethodologiesData() {
        this.roadmapAssistantService.GetMethodologiesData().subscribe((response: any) => {
            if (response != null) {
                if (response.length > 0) {
                    this.global["RELEASEMETHODOLOGY"] = response;
                }
            }
        });
    }
    
}



export class RoadMapMapping {
    public strObjectId: any;
    public RoadmapMappingUId: any;
    public RoadMapMappingId: any;
    public Title: any;
    public TaskUId: any;
    public ParentTaskUId: any;
    public TaskType: any;
    public Levels: any;
    public RoadmapUId: any;
    public CreatedIn: any;
    public ModifiedIn: any;
    public ActionType: any;
    public CreatedBy: any;
    public PlannedStart: any;
    public PlannedFinish: any;
    public PlannedEfforts: any;
    public BarColor: any;
    public BarFontSize: any;
    public RoadMapComments: any;
    public IsEditedFromEntity: any;
    public BaselineStartDate: any;
    public LegendIcon: any;
    public ReleaseMethodologyType: any;
    public Associativescopeselector: any;
    public AssociativescopeselectorId: any;
    public CopyVersion: any;
    public BaselinedatInitlevel: boolean = false;
    public AssociatedOverAllReleaseUId: any;
    public isBaselineAutoSave: boolean = false;
    public BaselinedDate: any;
}

export class RoadMap {
    public RoadMapMappingList: any;
    public RoadmapUId: any;
    public RoadMapId: any;
    public DeliveryConstructUId: any;
    public Title: any;
    public Description: any;
    public MultiSelectModel: any;
    public MilestoneStyle: any;
    public DependencyStyle: any;
    public LineSize: any;
    public Barvalue: any;
    public Barcolor: any;
    public SelectedBars: any;
    public TimelineStyle: any;
    public DisplayGrids: any;
    public TimelineMonthstoDisplay: any;
    public TimelineStartDate: any;
    public TimelineEndDate: any;
    public RoadMapComments: any;

}


